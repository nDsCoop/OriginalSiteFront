{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\library\\\\AudioVisualiser.js\";\nimport React, { Component } from 'react';\n\nclass AudioVisualiser extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const {\n      audioData\n    } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n    let x = 0;\n    const bufferLength = audioData.fftSize;\n    const sliceWidth = width * 1.0 / bufferLength; // const sliceWidth = (width * 1.0) / audioData.length;\n\n    context.lineWidth = 1.5;\n    context.strokeStyle = 'rgba(199, 119, 199, 0.9)';\n    context.clearRect(0, 0, width, height);\n    context.beginPath();\n    context.moveTo(0, height / 2);\n\n    for (const item of audioData) {\n      const y = item / 255.0 * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      width: \"1250px\",\n      height: \"400px\",\n      ref: this.canvas,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default AudioVisualiser;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/library/AudioVisualiser.js"],"names":["React","Component","AudioVisualiser","constructor","props","canvas","createRef","componentDidUpdate","draw","audioData","current","height","width","context","getContext","x","bufferLength","fftSize","sliceWidth","lineWidth","strokeStyle","clearRect","beginPath","moveTo","item","y","lineTo","stroke","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,eAAN,SAA8BD,SAA9B,CAAwC;AACtCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcL,KAAK,CAACM,SAAN,EAAd;AACD;;AACDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,IAAL;AACD;;AAEDA,EAAAA,IAAI,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAgB,KAAKL,KAA3B;AACA,UAAMC,MAAM,GAAG,KAAKA,MAAL,CAAYK,OAA3B;AACA,UAAMC,MAAM,GAAGN,MAAM,CAACM,MAAtB;AACA,UAAMC,KAAK,GAAGP,MAAM,CAACO,KAArB;AACA,UAAMC,OAAO,GAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAhB;AACA,QAAIC,CAAC,GAAG,CAAR;AAEA,UAAMC,YAAY,GAAGP,SAAS,CAACQ,OAA/B;AAEA,UAAMC,UAAU,GAAIN,KAAK,GAAG,GAAT,GAAeI,YAAlC,CAVK,CAYL;;AAEAH,IAAAA,OAAO,CAACM,SAAR,GAAoB,GAApB;AACAN,IAAAA,OAAO,CAACO,WAAR,GAAsB,0BAAtB;AACAP,IAAAA,OAAO,CAACQ,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBT,KAAxB,EAA+BD,MAA/B;AAEAE,IAAAA,OAAO,CAACS,SAAR;AACAT,IAAAA,OAAO,CAACU,MAAR,CAAe,CAAf,EAAkBZ,MAAM,GAAG,CAA3B;;AACA,SAAK,MAAMa,IAAX,IAAmBf,SAAnB,EAA8B;AAC5B,YAAMgB,CAAC,GAAID,IAAI,GAAG,KAAR,GAAiBb,MAA3B;AACAE,MAAAA,OAAO,CAACa,MAAR,CAAeX,CAAf,EAAkBU,CAAlB;AACAV,MAAAA,CAAC,IAAIG,UAAL;AACD;;AACDL,IAAAA,OAAO,CAACa,MAAR,CAAeX,CAAf,EAAkBJ,MAAM,GAAG,CAA3B;AACAE,IAAAA,OAAO,CAACc,MAAR;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAuB,MAAA,MAAM,EAAC,OAA9B;AAAsC,MAAA,GAAG,EAAE,KAAKvB,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAED;;AAzCqC;;AA4CxC,eAAeH,eAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AudioVisualiser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvas = React.createRef();\r\n  }\r\n  componentDidUpdate() {\r\n    this.draw();\r\n  }\r\n\r\n  draw() {\r\n    const { audioData } = this.props;\r\n    const canvas = this.canvas.current;\r\n    const height = canvas.height;\r\n    const width = canvas.width;\r\n    const context = canvas.getContext('2d');\r\n    let x = 0;\r\n\r\n    const bufferLength = audioData.fftSize;\r\n\r\n    const sliceWidth = (width * 1.0) /bufferLength;\r\n\r\n    // const sliceWidth = (width * 1.0) / audioData.length;\r\n\r\n    context.lineWidth = 1.5;\r\n    context.strokeStyle = 'rgba(199, 119, 199, 0.9)';\r\n    context.clearRect(0, 0, width, height);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, height / 2);\r\n    for (const item of audioData) {\r\n      const y = (item / 255.0) * height;\r\n      context.lineTo(x, y);\r\n      x += sliceWidth;\r\n    }\r\n    context.lineTo(x, height / 2);\r\n    context.stroke();\r\n  }\r\n \r\n  render() {\r\n    return <canvas width=\"1250px\" height=\"400px\" ref={this.canvas}>\r\n    </canvas>;\r\n  }\r\n}\r\n\r\nexport default AudioVisualiser;"]},"metadata":{},"sourceType":"module"}