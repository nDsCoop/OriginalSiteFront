{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\ContentChat.js\";\nimport React, { Component } from 'react';\nimport Sidebar from './Sidebar';\nimport { MESSAGE_SENT, TYPING, COMMUNITY_CHAT, MESSAGE_RECIEVED, PRIVATE_MESSAGE, USER_CONNECTED, USER_DISCONNECTED, NEW_CHAT_USER } from '../Events';\nimport ChatHeading from \"../messages/ChatHeading\";\nimport Messages from \"../messages/Messages\";\nimport MessageInput from \"../messages/MessageInput\";\nimport { values, difference, differenceBy } from \"lodash\";\nexport default class ContentChat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendOpenPrivateMessage = reciever => {\n      const {\n        socket,\n        user\n      } = this.props;\n      const {\n        activeChat\n      } = this.state;\n      socket.emit(PRIVATE_MESSAGE, {\n        reciever,\n        sender: user.name,\n        activeChat\n      });\n    };\n\n    this.addUserToChat = ({\n      chatId,\n      newUser\n    }) => {\n      const {\n        chats\n      } = this.state;\n      const newChats = chats.map(chat => {\n        if (chat.id === chatId) {\n          return Object.assign({}, chat, {\n            users: [...chat.users, newUser]\n          });\n        }\n\n        return chat;\n      });\n      this.setState({\n        chat: newChats\n      });\n    };\n\n    this.removeUsersFromChat = removeUsers => {\n      const {\n        chats\n      } = this.state;\n      const newChats = chats.map(chat => {\n        let newUsers = difference(chat.users, removeUsers.map(u => u.name));\n        return Object.assign({}, chats, {\n          users: newUsers\n        });\n      });\n      this.setState({\n        chats: newChats\n      });\n    };\n\n    this.resetChat = chat => {\n      return this.addChat(chat, true);\n    };\n\n    this.addChat = (chat, reset = false) => {\n      const {\n        socket\n      } = this.props;\n      const {\n        chats\n      } = this.state;\n      const newChats = reset ? [chat] : [...chats, chat];\n      this.setState({\n        chats: newChats,\n        activeChat: reset ? chat : this.state.activeChat\n      });\n      const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`;\n      const typingEvent = `${TYPING}-${chat.id}`;\n      socket.on(typingEvent, this.updateTypingInChat(chat.id));\n      socket.on(messageEvent, this.addMessageToChat(chat.id));\n    };\n\n    this.addMessageToChat = chatId => {\n      return message => {\n        const {\n          chats\n        } = this.state;\n        let newChats = chats.map(chat => {\n          if (chat.id === chatId) chat.messages.push(message);\n          return chat;\n        });\n        this.setState({\n          chats: newChats\n        });\n      };\n    };\n\n    this.updateTypingInChat = chatId => {\n      return ({\n        isTyping,\n        user\n      }) => {\n        if (user !== this.props.user.name) {\n          const {\n            chats\n          } = this.state;\n          let newChats = chats.map(chat => {\n            if (chat.id === chatId) {\n              if (isTyping && !chat.typingUsers.includes(user)) {\n                chat.typingUsers.push(user);\n              } else if (!isTyping && chat.typingUsers.includes(user)) {\n                chat.typingUsers = chat.typingUsers.filter(u => u !== user);\n              }\n            }\n\n            return chat;\n          });\n          this.setState({\n            chats: newChats\n          });\n        }\n      };\n    };\n\n    this.sendMessage = (chatId, message) => {\n      const {\n        socket\n      } = this.props;\n      socket.emit(MESSAGE_SENT, {\n        chatId,\n        message\n      });\n    };\n\n    this.sendTyping = (chatId, isTyping) => {\n      const {\n        socket\n      } = this.props;\n      socket.emit(TYPING, {\n        chatId,\n        isTyping\n      });\n    };\n\n    this.setActiveChat = activeChat => {\n      this.setState({\n        activeChat\n      });\n    };\n\n    this.state = {\n      chats: [],\n      users: [],\n      activeChat: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      socket\n    } = this.props;\n    this.initSocket(socket);\n  }\n\n  componentWillMount() {\n    const {\n      socket\n    } = this.props;\n    socket.off(PRIVATE_MESSAGE);\n    socket.off(USER_CONNECTED);\n    socket.off(USER_DISCONNECTED);\n    socket.off(NEW_CHAT_USER);\n  }\n\n  initSocket(socket) {\n    socket.emit(COMMUNITY_CHAT, this.resetChat);\n    socket.on(PRIVATE_MESSAGE, this.addChat);\n    socket.on('connect', () => {\n      socket.emit(COMMUNITY_CHAT, this.resetChat);\n    });\n    socket.on(USER_CONNECTED, users => {\n      this.setState({\n        users: values(users)\n      });\n      console.log(users);\n    });\n    socket.on(USER_DISCONNECTED, users => {\n      const removeUsers = differenceBy(this.state.users, values(users), 'id');\n      this.removeUsersFromChat(removeUsers);\n      this.setState({\n        users: values(users)\n      });\n    });\n    socket.on(NEW_CHAT_USER, this.addUserToChat);\n  }\n\n  render() {\n    const {\n      user,\n      logout\n    } = this.props;\n    const {\n      chats,\n      activeChat,\n      users\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      logout: logout,\n      chats: chats,\n      user: user,\n      users: users,\n      activeChat: activeChat,\n      setActiveChat: this.setActiveChat,\n      onSendPrivateMessage: this.sendOpenPrivateMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, activeChat !== null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_room\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChatHeading, {\n      name: activeChat.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Messages, {\n      messages: activeChat.messages,\n      user: user,\n      typingUsers: activeChat.typingUsers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(MessageInput, {\n      sendMessage: message => {\n        this.sendMessage(activeChat.id, message);\n      },\n      sendTyping: isTyping => {\n        this.sendTyping(activeChat.id, isTyping);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 33\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-room-choose\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 33\n      }\n    }, \"Choose a chat to start chat\"))));\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/ContentChat.js"],"names":["React","Component","Sidebar","MESSAGE_SENT","TYPING","COMMUNITY_CHAT","MESSAGE_RECIEVED","PRIVATE_MESSAGE","USER_CONNECTED","USER_DISCONNECTED","NEW_CHAT_USER","ChatHeading","Messages","MessageInput","values","difference","differenceBy","ContentChat","constructor","props","sendOpenPrivateMessage","reciever","socket","user","activeChat","state","emit","sender","name","addUserToChat","chatId","newUser","chats","newChats","map","chat","id","Object","assign","users","setState","removeUsersFromChat","removeUsers","newUsers","u","resetChat","addChat","reset","messageEvent","typingEvent","on","updateTypingInChat","addMessageToChat","message","messages","push","isTyping","typingUsers","includes","filter","sendMessage","sendTyping","setActiveChat","componentDidMount","initSocket","componentWillMount","off","console","log","render","logout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Sidebar from './Sidebar';\r\nimport { MESSAGE_SENT, TYPING, COMMUNITY_CHAT, MESSAGE_RECIEVED, PRIVATE_MESSAGE,\r\n        USER_CONNECTED, USER_DISCONNECTED, NEW_CHAT_USER } from '../Events';\r\nimport ChatHeading from \"../messages/ChatHeading\";\r\nimport Messages from \"../messages/Messages\";\r\nimport MessageInput from \"../messages/MessageInput\";\r\nimport { values, difference, differenceBy } from \"lodash\"\r\n\r\nexport default class ContentChat extends Component {\r\n    constructor(props) {\r\n        super(props);\t\r\n      \r\n        this.state = {\r\n            chats:[],\r\n            users:[],\r\n            activeChat:null\r\n        };\r\n      }\r\n  \r\n      componentDidMount() {\r\n            const { socket } = this.props\r\n            this.initSocket(socket)\r\n      }\r\n      componentWillMount(){\r\n            const { socket } = this.props\r\n            socket.off( PRIVATE_MESSAGE )\r\n            socket.off( USER_CONNECTED )\r\n            socket.off( USER_DISCONNECTED )\r\n            socket.off( NEW_CHAT_USER )\r\n\r\n      }\r\n        initSocket(socket) {\r\n            socket.emit(COMMUNITY_CHAT, this.resetChat)\r\n            socket.on(PRIVATE_MESSAGE, this.addChat)\r\n            socket.on('connect', () =>{\r\n                socket.emit(COMMUNITY_CHAT, this.resetChat)\r\n            })\r\n            socket.on(USER_CONNECTED, (users) => {\r\n                this.setState({ users: values(users) })\r\n                console.log(users)\r\n            })\r\n            socket.on(USER_DISCONNECTED, (users) => {\r\n                const removeUsers = differenceBy( this.state.users, values(users), 'id')\r\n                this.removeUsersFromChat(removeUsers)\r\n                this.setState({ users:values(users) }) \r\n            })\r\n            socket.on(NEW_CHAT_USER, this.addUserToChat)\r\n\r\n        }\r\n                \r\n\r\n        sendOpenPrivateMessage = (reciever) => {\r\n            const { socket, user } = this.props\r\n            const { activeChat } = this.state\r\n            socket.emit(PRIVATE_MESSAGE, {reciever, sender:user.name, activeChat })\r\n        }\r\n        addUserToChat = ({ chatId, newUser }) =>{\r\n            const { chats } = this.state\r\n            const newChats = chats.map( chat => {\r\n                if(chat.id === chatId){\r\n                    return Object.assign({}, chat, {users : [ ...chat.users, newUser ]})\r\n                }\r\n                return chat\r\n            })\r\n            this.setState ({ chat: newChats })\r\n        }\r\n        removeUsersFromChat = removeUsers => {\r\n            const { chats } = this.state\r\n            const newChats = chats.map( chat => {\r\n                let newUsers = difference( chat.users, removeUsers.map( u => u.name))\r\n                return Object.assign({}, chats, { users: newUsers })\r\n            })\r\n            this.setState({ chats: newChats })\r\n        }\r\n        \r\n     \r\n      resetChat = (chat)=>{\r\n          return this.addChat(chat, true)\r\n      }\r\n  \r\n      addChat = (chat, reset = false)=>{\r\n          const { socket } = this.props\r\n          const { chats } = this.state\r\n  \r\n          const newChats = reset ? [chat] : [...chats, chat]\r\n          this.setState({chats:newChats, activeChat:reset ? chat : this.state.activeChat})\r\n  \r\n          const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`\r\n          const typingEvent = `${TYPING}-${chat.id}`\r\n  \r\n          socket.on(typingEvent, this.updateTypingInChat(chat.id))\r\n          socket.on(messageEvent, this.addMessageToChat(chat.id))\r\n      }\r\n  \r\n      addMessageToChat = (chatId)=>{\r\n          return message => {\r\n              const { chats } = this.state\r\n              let newChats = chats.map((chat)=>{\r\n                  if(chat.id === chatId)\r\n                      chat.messages.push(message)\r\n                  return chat\r\n              })\r\n  \r\n              this.setState({chats:newChats})\r\n          }\r\n      }\r\n  \r\n     \r\n      updateTypingInChat = (chatId) =>{\r\n\t\treturn ({isTyping, user})=>{\r\n\t\t\tif(user !== this.props.user.name){\r\n\r\n\t\t\t\tconst { chats } = this.state\r\n\r\n\t\t\t\tlet newChats = chats.map((chat)=>{\r\n\t\t\t\t\tif(chat.id === chatId){\r\n\t\t\t\t\t\tif(isTyping && !chat.typingUsers.includes(user)){\r\n\t\t\t\t\t\t\tchat.typingUsers.push(user)\r\n\t\t\t\t\t\t}else if(!isTyping && chat.typingUsers.includes(user)){\r\n\t\t\t\t\t\t\tchat.typingUsers = chat.typingUsers.filter(u => u !== user)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn chat\r\n\t\t\t\t})\r\n\t\t\t\tthis.setState({chats:newChats})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  \r\n      sendMessage = (chatId, message)=>{\r\n          const { socket } = this.props\r\n          socket.emit(MESSAGE_SENT, {chatId, message} )\r\n      }\r\n  \r\n      sendTyping = (chatId, isTyping)=>{\r\n          const { socket } = this.props\r\n          socket.emit(TYPING, {chatId, isTyping})\r\n      }\r\n  \r\n      setActiveChat = (activeChat)=>{\r\n          this.setState({activeChat})\r\n      }\r\n    render() {\r\n        const { user, logout } = this.props\r\n        const { chats, activeChat, users } = this.state\r\n        return (\r\n            <div className=\"app3\">\r\n                <Sidebar\r\n                logout= { logout }\r\n                chats= { chats }\r\n                user= { user }\r\n                users = { users }\r\n                activeChat= { activeChat }\r\n                setActiveChat= { this.setActiveChat }\r\n                onSendPrivateMessage={ this.sendOpenPrivateMessage}\r\n                />\r\n                <div className=\"chat\">\r\n                    {\r\n                        activeChat !== null ? (\r\n                            <div className=\"chat_room\">\r\n                                <ChatHeading name={activeChat.name} />\r\n                                <Messages\r\n                                    messages= {activeChat.messages}\r\n                                    user= {user}\r\n                                    typingUsers= {activeChat.typingUsers}\r\n                                />\r\n                                <MessageInput\r\n                                    sendMessage= {\r\n                                        (message) => {\r\n                                            this.sendMessage(activeChat.id, message)\r\n                                        }\r\n                                    }\r\n                                    sendTyping= {\r\n                                        (isTyping) => {\r\n                                            this.sendTyping(activeChat.id, isTyping)\r\n                                        }\r\n                                    }\r\n                                    />\r\n\r\n                            </div>\r\n                        ) : <div className=\"chat-room-choose\">\r\n                                <h3>Choose a chat to start chat</h3>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}