{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\sections\\\\FeedbackForm.js\";\nimport React, { useContext } from \"react\";\nimport { // FormControl,\nTextField, Button, Grid // CircularProgress,\n, LinearProgress } from \"@material-ui/core\";\nimport { loadReCaptcha, ReCaptcha } from \"react-recaptcha-v3\";\nimport axios from \"../apis/axios\";\nimport { GlobalContext } from \"../GlobalState\";\nlet captchaToken;\n\nconst FeedbackForm = () => {\n  const [{}, dispatch] = useContext(GlobalContext);\n  const setSnackbarMsg = React.useCallback(data => {\n    dispatch({\n      type: \"setSnackbarMsg\",\n      snippet: data\n    });\n  }, [dispatch]);\n  const [isSending, setIsSending] = React.useState(false);\n  const formEl = React.useRef(null);\n\n  const submitForm = async e => {\n    // set state to sending\n    setIsSending(true);\n    const formData = new FormData(formEl.current);\n    const name = formData.get(\"name\");\n    const email = formData.get(\"email\");\n    const message = formData.get(\"message\");\n    e.preventDefault();\n    const post = {\n      name: name,\n      email: email,\n      message: message,\n      token: captchaToken,\n      timestamp: new Date()\n    };\n    await axios.post('/ndsapi/feedback', post).then(function (response) {\n      // console.log(response.data.status);\n      console.log(response.data.message); // also clear the form\n\n      formEl.current.reset();\n      setSnackbarMsg(`Sent your message: ${response.data.message}`);\n      setIsSending(false);\n    }).catch(function (error) {\n      // console.log(error.response.status);\n      if (error.response) {\n        if (error.response.status === 429) {\n          formEl.current.reset();\n          setSnackbarMsg(\"We accept limited feedback!\");\n        }\n      }\n\n      setIsSending(false);\n    });\n  };\n\n  React.useEffect(() => {\n    loadReCaptcha(\"6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN\");\n  }, []);\n\n  const verifyCallback = token => {\n    console.log(token);\n    captchaToken = token;\n    const captchaBox = document.querySelector(\".grecaptcha-badge\");\n    captchaBox.remove(); // remove captcha badge\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    component: \"form\",\n    ref: formEl,\n    onSubmit: submitForm,\n    container: true,\n    required: true,\n    justify: \"center\",\n    style: {\n      width: \"90%\",\n      maxWidth: \"500px\",\n      margin: \"0 auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReCaptcha, {\n    sitekey: \"6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN\",\n    action: \"action_name\",\n    verifyCallback: verifyCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-email-input\",\n    label: \"Name\",\n    type: \"text\",\n    name: \"name\",\n    autoComplete: \"name\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-email-input\",\n    label: \"Email\",\n    type: \"email\",\n    name: \"email\",\n    autoComplete: \"email\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-email-input\",\n    label: \"Feedback\",\n    multiline: true,\n    rows: \"4\",\n    type: \"text\",\n    name: \"message\",\n    autoComplete: \"feedback\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), isSending ? /*#__PURE__*/React.createElement(LinearProgress, {\n    style: {\n      width: \"100%\",\n      transform: \"translateY(-12px)\",\n      borderRadius: \"2px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }) : null, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginTop: \"10px\"\n    },\n    variant: \"outlined\",\n    color: \"primary\",\n    type: \"submit\",\n    disabled: isSending ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, isSending ? \"Sending Feedback\" : \"Send Feedback\"));\n};\n\nexport default FeedbackForm;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/sections/FeedbackForm.js"],"names":["React","useContext","TextField","Button","Grid","LinearProgress","loadReCaptcha","ReCaptcha","axios","GlobalContext","captchaToken","FeedbackForm","dispatch","setSnackbarMsg","useCallback","data","type","snippet","isSending","setIsSending","useState","formEl","useRef","submitForm","e","formData","FormData","current","name","get","email","message","preventDefault","post","token","timestamp","Date","then","response","console","log","reset","catch","error","status","useEffect","verifyCallback","captchaBox","document","querySelector","remove","width","maxWidth","margin","transform","borderRadius","marginTop"],"mappings":"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","sourcesContent":["import React, {useContext} from \"react\";\r\nimport {\r\n  // FormControl,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  // CircularProgress,\r\n  LinearProgress\r\n} from \"@material-ui/core\";\r\nimport { loadReCaptcha, ReCaptcha } from \"react-recaptcha-v3\";\r\nimport axios from \"../apis/axios\";\r\nimport { GlobalContext } from \"../GlobalState\";\r\n\r\nlet captchaToken;\r\nconst FeedbackForm = () => {\r\n  const [{}, dispatch] = useContext(GlobalContext);\r\n\r\n  const setSnackbarMsg = React.useCallback(\r\n    data => {\r\n      dispatch({ type: \"setSnackbarMsg\", snippet: data });\r\n    },\r\n    [dispatch]\r\n  );\r\n  const [isSending, setIsSending] = React.useState(false);\r\n  const formEl = React.useRef(null);\r\n\r\n  const submitForm = async (e) => {\r\n    // set state to sending\r\n    setIsSending(true);\r\n    const formData = new FormData(formEl.current);\r\n    const name = formData.get(\"name\");\r\n    const email = formData.get(\"email\");\r\n    const message = formData.get(\"message\");\r\n\r\n    e.preventDefault();\r\n\r\n    const post = {\r\n      name: name,\r\n      email: email,\r\n      message: message,\r\n      token: captchaToken,\r\n      timestamp: new Date(),\r\n      }\r\n\r\n    await axios\r\n          .post('/ndsapi/feedback', post)\r\n          .then(function(response) {\r\n            // console.log(response.data.status);\r\n            console.log(response.data.message);\r\n            // also clear the form\r\n            formEl.current.reset();\r\n            setSnackbarMsg(`Sent your message: ${response.data.message}`);\r\n            setIsSending(false);\r\n          })\r\n          .catch(function(error) {\r\n            // console.log(error.response.status);\r\n            if (error.response) {\r\n              if (error.response.status === 429) {\r\n                formEl.current.reset();\r\n\r\n                setSnackbarMsg(\"We accept limited feedback!\");\r\n              }\r\n            }\r\n            setIsSending(false);\r\n          });\r\n      };\r\n\r\n  React.useEffect(() => {\r\n    loadReCaptcha(\"6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN\");\r\n  }, []);\r\n\r\n  const verifyCallback = token => {\r\n    console.log(token);\r\n    captchaToken = token;\r\n    const captchaBox = document.querySelector(\".grecaptcha-badge\");\r\n    captchaBox.remove();\r\n    // remove captcha badge\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      component=\"form\"\r\n      ref={formEl}\r\n      onSubmit={submitForm}\r\n      container\r\n      required\r\n      justify=\"center\"\r\n      style={{ width: \"90%\", maxWidth: \"500px\", margin: \"0 auto\" }}\r\n    >\r\n      <ReCaptcha\r\n        sitekey=\"6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN\"\r\n        action=\"action_name\"\r\n        verifyCallback={verifyCallback}\r\n      />\r\n      <TextField\r\n        id=\"outlined-email-input\"\r\n        label=\"Name\"\r\n        type=\"text\"\r\n        name=\"name\"\r\n        autoComplete=\"name\"\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"outlined-email-input\"\r\n        label=\"Email\"\r\n        type=\"email\"\r\n        name=\"email\"\r\n        autoComplete=\"email\"\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"outlined-email-input\"\r\n        label=\"Feedback\"\r\n        multiline\r\n        rows=\"4\"\r\n        type=\"text\"\r\n        name=\"message\"\r\n        autoComplete=\"feedback\"\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        required\r\n      />\r\n      {isSending ? (\r\n        <LinearProgress\r\n          style={{\r\n            width: \"100%\",\r\n            transform: \"translateY(-12px)\",\r\n            borderRadius: \"2px\"\r\n          }}\r\n        />\r\n      ) : null}\r\n      <Button\r\n        style={{ marginTop: \"10px\" }}\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        disabled={isSending ? true : false}\r\n      >\r\n        {/* if sending is true then show circular progress */}\r\n        {isSending ? \"Sending Feedback\" : \"Send Feedback\"}\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default FeedbackForm;\r\n"]},"metadata":{},"sourceType":"module"}