{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\Draggable.js\";\nimport React, { useState, useEffect, useRef } from 'react';\n\nvar Draggable = props => {\n  const [pressed, setPressed] = useState(false);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const ref = useRef(); // Monitor changes to position state and update DOM\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.style.transform = `translate(${position.x}px, ${position.y}px)`;\n    }\n  }, [position]); // Update the current position if mouse is down\n\n  const onMouseMove = event => {\n    if (pressed) {\n      setPosition({\n        x: position.x + event.movementX,\n        y: position.y + event.movementY\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: props.style,\n    ref: ref,\n    onMouseMove: onMouseMove,\n    onMouseDown: () => setPressed(true),\n    onMouseUp: () => setPressed(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default Draggable;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/Draggable.js"],"names":["React","useState","useEffect","useRef","Draggable","props","pressed","setPressed","position","setPosition","x","y","ref","current","style","transform","onMouseMove","event","movementX","movementY","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,IAAIC,SAAS,GAAGC,KAAK,IAAI;AACvB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC;AAACS,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GAAD,CAAxC;AACA,QAAMC,GAAG,GAAGT,MAAM,EAAlB,CAHuB,CAKvB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,GAAG,CAACC,OAAR,EAAiB;AACfD,MAAAA,GAAG,CAACC,OAAJ,CAAYC,KAAZ,CAAkBC,SAAlB,GAA+B,aAAYP,QAAQ,CAACE,CAAE,OAAMF,QAAQ,CAACG,CAAE,KAAvE;AACD;AACF,GAJQ,EAIN,CAACH,QAAD,CAJM,CAAT,CANuB,CAYvB;;AACA,QAAMQ,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAIX,OAAJ,EAAa;AACXG,MAAAA,WAAW,CAAC;AACVC,QAAAA,CAAC,EAAEF,QAAQ,CAACE,CAAT,GAAaO,KAAK,CAACC,SADZ;AAEVP,QAAAA,CAAC,EAAEH,QAAQ,CAACG,CAAT,GAAaM,KAAK,CAACE;AAFZ,OAAD,CAAX;AAID;AACF,GAPD;;AASA,sBACE;AACE,IAAA,KAAK,EAAEd,KAAK,CAACS,KADf;AAEE,IAAA,GAAG,EAAGF,GAFR;AAGE,IAAA,WAAW,EAAGI,WAHhB;AAIE,IAAA,WAAW,EAAG,MAAMT,UAAU,CAAC,IAAD,CAJhC;AAKE,IAAA,SAAS,EAAG,MAAMA,UAAU,CAAC,KAAD,CAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGF,KAAK,CAACe,QANT,CADF;AAUD,CAhCD;;AAkCA,eAAehB,SAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nvar Draggable = props => {\r\n  const [pressed, setPressed] = useState(false)\r\n  const [position, setPosition] = useState({x: 0, y: 0})\r\n  const ref = useRef()\r\n\r\n  // Monitor changes to position state and update DOM\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      ref.current.style.transform = `translate(${position.x}px, ${position.y}px)`\r\n    }\r\n  }, [position])\r\n\r\n  // Update the current position if mouse is down\r\n  const onMouseMove = (event) => {\r\n    if (pressed) {\r\n      setPosition({\r\n        x: position.x + event.movementX,\r\n        y: position.y + event.movementY\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={props.style}\r\n      ref={ ref }\r\n      onMouseMove={ onMouseMove }\r\n      onMouseDown={ () => setPressed(true) }\r\n      onMouseUp={ () => setPressed(false) }>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Draggable"]},"metadata":{},"sourceType":"module"}