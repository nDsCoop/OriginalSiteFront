{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\RainAmina.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport * as THREE from 'three';\nimport smokeImg from '../images/smoke.png';\n\nconst RainAmina = () => {\n  const cubeRef = useRef(null);\n  let scene,\n      camera,\n      renderer,\n      cloudParticles = [],\n      flash,\n      rain,\n      rainGeo,\n      rainCount = 15000;\n  useEffect(() => {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);\n    camera.position.z = 1;\n    camera.rotation.x = 1.16;\n    camera.rotation.y = -0.12;\n    camera.rotation.z = 0.27;\n    const ambient = new THREE.AmbientLight(0x555555);\n    scene.add(ambient);\n    const directionalLight = new THREE.DirectionalLight(0xffeedd);\n    directionalLight.position.set(0, 0, 1);\n    scene.add(directionalLight);\n    flash = new THREE.PointLight(0x062d89, 30, 500, 1.7);\n    flash.position.set(200, 300, 100);\n    scene.add(flash);\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(cubeRef.current.clientWidth, cubeRef.current.clientHeight);\n    scene.fog = new THREE.FogExp2(0x11111f, 0.002);\n    renderer.setClearColor(scene.fog.color); // renderer.setSize(window.innerWidth, window.innerHeight);\n\n    cubeRef.current.appendChild(renderer.domElement);\n    rainGeo = new THREE.Geometry();\n\n    for (let i = 0; i < rainCount; i++) {\n      const rainDrop = new THREE.Vector3(Math.random() * 400 - 200, Math.random() * 500 - 250, Math.random() * 400 - 200);\n      rainDrop.velocity = {};\n      rainDrop.velocity = 0;\n      rainGeo.vertices.push(rainDrop);\n    }\n\n    const rainMaterial = new THREE.PointsMaterial({\n      color: 0xfffff,\n      size: 0.1,\n      transparent: true\n    });\n    rain = new THREE.Points(rainGeo, rainMaterial);\n    scene.add(rain);\n    let loader = new THREE.TextureLoader();\n    loader.load(\"smoke.png\", function (texture) {\n      const cloudGeo = new THREE.PlaneBufferGeometry(500, 500);\n      const cloudMaterial = new THREE.MeshLambertMaterial({\n        map: texture,\n        transparent: true\n      });\n\n      for (let p = 0; p < 25; p++) {\n        let cloud = new THREE.Mesh(cloudGeo, cloudMaterial);\n        cloud.position.set(Math.random() * 800 - 400, 500, Math.random() * 500 - 450);\n        cloud.rotation.x = 1.16;\n        cloud.rotation.y = -0.12;\n        cloud.rotation.z = Math.random() * 360;\n        cloud.material.opacity = 0.6;\n        cloudParticles.push(cloud);\n        scene.add(cloud);\n      }\n\n      animate();\n    });\n\n    function animate() {\n      cloudParticles.forEach(p => {\n        p.rotation.z -= 0.002;\n      });\n      rainGeo.vertices.forEach(p => {\n        p.velocity -= 0.1 + Math.random() * 0.1;\n        p.y += p.velocity;\n\n        if (p.y < -200) {\n          p.y = 200;\n          p.velocity = 0;\n        }\n      });\n      rainGeo.verticesNeedUpdate = true;\n      rain.rotation.y += 0.002;\n\n      if (Math.random() > 0.93 || flash.power > 100) {\n        if (flash.power < 100) flash.position.set(Math.random() * 400, 300 + Math.random() * 200, 100);\n        flash.power = 50 + Math.random() * 500;\n      }\n\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"90%\",\n      height: \"600px\",\n      margin: \"40px\"\n    },\n    ref: cubeRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default RainAmina;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/RainAmina.js"],"names":["React","useEffect","useRef","THREE","smokeImg","RainAmina","cubeRef","scene","camera","renderer","cloudParticles","flash","rain","rainGeo","rainCount","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","z","rotation","x","y","ambient","AmbientLight","add","directionalLight","DirectionalLight","set","PointLight","WebGLRenderer","setSize","current","clientWidth","clientHeight","fog","FogExp2","setClearColor","color","appendChild","domElement","Geometry","i","rainDrop","Vector3","Math","random","velocity","vertices","push","rainMaterial","PointsMaterial","size","transparent","Points","loader","TextureLoader","load","texture","cloudGeo","PlaneBufferGeometry","cloudMaterial","MeshLambertMaterial","map","p","cloud","Mesh","material","opacity","animate","forEach","verticesNeedUpdate","power","render","requestAnimationFrame","width","height","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,OAAO,GAAGJ,MAAM,CAAC,IAAD,CAAtB;AAEA,MAAIK,KAAJ;AAAA,MAAUC,MAAV;AAAA,MAAkBC,QAAlB;AAAA,MAA4BC,cAAc,GAAG,EAA7C;AAAA,MAAiDC,KAAjD;AAAA,MAAwDC,IAAxD;AAAA,MAA8DC,OAA9D;AAAA,MAAuEC,SAAS,GAAG,KAAnF;AAGAb,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,KAAK,GAAG,IAAIJ,KAAK,CAACY,KAAV,EAAR;AACAP,IAAAA,MAAM,GAAG,IAAIL,KAAK,CAACa,iBAAV,CAA4B,EAA5B,EAA+BC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA1D,EAAuE,CAAvE,EAA0E,IAA1E,CAAT;AACAX,IAAAA,MAAM,CAACY,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AACAb,IAAAA,MAAM,CAACc,QAAP,CAAgBC,CAAhB,GAAoB,IAApB;AACAf,IAAAA,MAAM,CAACc,QAAP,CAAgBE,CAAhB,GAAoB,CAAC,IAArB;AACAhB,IAAAA,MAAM,CAACc,QAAP,CAAgBD,CAAhB,GAAoB,IAApB;AACA,UAAMI,OAAO,GAAG,IAAItB,KAAK,CAACuB,YAAV,CAAuB,QAAvB,CAAhB;AACAnB,IAAAA,KAAK,CAACoB,GAAN,CAAUF,OAAV;AACA,UAAMG,gBAAgB,GAAG,IAAIzB,KAAK,CAAC0B,gBAAV,CAA2B,QAA3B,CAAzB;AACAD,IAAAA,gBAAgB,CAACR,QAAjB,CAA0BU,GAA1B,CAA8B,CAA9B,EAAgC,CAAhC,EAAkC,CAAlC;AACAvB,IAAAA,KAAK,CAACoB,GAAN,CAAUC,gBAAV;AACAjB,IAAAA,KAAK,GAAG,IAAIR,KAAK,CAAC4B,UAAV,CAAqB,QAArB,EAA+B,EAA/B,EAAmC,GAAnC,EAAwC,GAAxC,CAAR;AACApB,IAAAA,KAAK,CAACS,QAAN,CAAeU,GAAf,CAAmB,GAAnB,EAAuB,GAAvB,EAA2B,GAA3B;AACAvB,IAAAA,KAAK,CAACoB,GAAN,CAAUhB,KAAV;AACAF,IAAAA,QAAQ,GAAG,IAAIN,KAAK,CAAC6B,aAAV,EAAX;AACAvB,IAAAA,QAAQ,CAACwB,OAAT,CACE3B,OAAO,CAAC4B,OAAR,CAAgBC,WADlB,EAEE7B,OAAO,CAAC4B,OAAR,CAAgBE,YAFlB;AAIA7B,IAAAA,KAAK,CAAC8B,GAAN,GAAY,IAAIlC,KAAK,CAACmC,OAAV,CAAkB,QAAlB,EAA4B,KAA5B,CAAZ;AACA7B,IAAAA,QAAQ,CAAC8B,aAAT,CAAuBhC,KAAK,CAAC8B,GAAN,CAAUG,KAAjC,EArBY,CAsBZ;;AACAlC,IAAAA,OAAO,CAAC4B,OAAR,CAAgBO,WAAhB,CAA4BhC,QAAQ,CAACiC,UAArC;AACA7B,IAAAA,OAAO,GAAG,IAAIV,KAAK,CAACwC,QAAV,EAAV;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC9B,SAAd,EAAwB8B,CAAC,EAAzB,EAA6B;AAC3B,YAAMC,QAAQ,GAAG,IAAI1C,KAAK,CAAC2C,OAAV,CACfC,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAqB,GADN,EAEfD,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB,GAFP,EAGfD,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB,GAHP,CAAjB;AAKAH,MAAAA,QAAQ,CAACI,QAAT,GAAoB,EAApB;AACAJ,MAAAA,QAAQ,CAACI,QAAT,GAAoB,CAApB;AACApC,MAAAA,OAAO,CAACqC,QAAR,CAAiBC,IAAjB,CAAsBN,QAAtB;AACD;;AACD,UAAMO,YAAY,GAAG,IAAIjD,KAAK,CAACkD,cAAV,CAAyB;AAC5Cb,MAAAA,KAAK,EAAE,OADqC;AAE5Cc,MAAAA,IAAI,EAAE,GAFsC;AAG5CC,MAAAA,WAAW,EAAE;AAH+B,KAAzB,CAArB;AAKA3C,IAAAA,IAAI,GAAG,IAAIT,KAAK,CAACqD,MAAV,CAAiB3C,OAAjB,EAAyBuC,YAAzB,CAAP;AACA7C,IAAAA,KAAK,CAACoB,GAAN,CAAUf,IAAV;AACA,QAAI6C,MAAM,GAAG,IAAItD,KAAK,CAACuD,aAAV,EAAb;AACAD,IAAAA,MAAM,CAACE,IAAP,CAAY,WAAZ,EAAyB,UAASC,OAAT,EAAiB;AACxC,YAAMC,QAAQ,GAAG,IAAI1D,KAAK,CAAC2D,mBAAV,CAA8B,GAA9B,EAAkC,GAAlC,CAAjB;AACA,YAAMC,aAAa,GAAG,IAAI5D,KAAK,CAAC6D,mBAAV,CAA8B;AAClDC,QAAAA,GAAG,EAAEL,OAD6C;AAElDL,QAAAA,WAAW,EAAE;AAFqC,OAA9B,CAAtB;;AAIA,WAAI,IAAIW,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,EAAf,EAAmBA,CAAC,EAApB,EAAwB;AACtB,YAAIC,KAAK,GAAG,IAAIhE,KAAK,CAACiE,IAAV,CAAeP,QAAf,EAAwBE,aAAxB,CAAZ;AACAI,QAAAA,KAAK,CAAC/C,QAAN,CAAeU,GAAf,CACEiB,IAAI,CAACC,MAAL,KAAc,GAAd,GAAmB,GADrB,EAEE,GAFF,EAGED,IAAI,CAACC,MAAL,KAAc,GAAd,GAAoB,GAHtB;AAKAmB,QAAAA,KAAK,CAAC7C,QAAN,CAAeC,CAAf,GAAmB,IAAnB;AACA4C,QAAAA,KAAK,CAAC7C,QAAN,CAAeE,CAAf,GAAmB,CAAC,IAApB;AACA2C,QAAAA,KAAK,CAAC7C,QAAN,CAAeD,CAAf,GAAmB0B,IAAI,CAACC,MAAL,KAAc,GAAjC;AACAmB,QAAAA,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,GAAzB;AACA5D,QAAAA,cAAc,CAACyC,IAAf,CAAoBgB,KAApB;AACA5D,QAAAA,KAAK,CAACoB,GAAN,CAAUwC,KAAV;AACD;;AACDI,MAAAA,OAAO;AACR,KArBD;;AAsBA,aAASA,OAAT,GAAmB;AACjB7D,MAAAA,cAAc,CAAC8D,OAAf,CAAuBN,CAAC,IAAI;AAC1BA,QAAAA,CAAC,CAAC5C,QAAF,CAAWD,CAAX,IAAe,KAAf;AACD,OAFD;AAGAR,MAAAA,OAAO,CAACqC,QAAR,CAAiBsB,OAAjB,CAAyBN,CAAC,IAAI;AAC5BA,QAAAA,CAAC,CAACjB,QAAF,IAAc,MAAMF,IAAI,CAACC,MAAL,KAAgB,GAApC;AACAkB,QAAAA,CAAC,CAAC1C,CAAF,IAAO0C,CAAC,CAACjB,QAAT;;AACA,YAAIiB,CAAC,CAAC1C,CAAF,GAAM,CAAC,GAAX,EAAgB;AACd0C,UAAAA,CAAC,CAAC1C,CAAF,GAAM,GAAN;AACA0C,UAAAA,CAAC,CAACjB,QAAF,GAAa,CAAb;AACD;AACF,OAPD;AAQApC,MAAAA,OAAO,CAAC4D,kBAAR,GAA6B,IAA7B;AACA7D,MAAAA,IAAI,CAACU,QAAL,CAAcE,CAAd,IAAkB,KAAlB;;AACA,UAAGuB,IAAI,CAACC,MAAL,KAAgB,IAAhB,IAAwBrC,KAAK,CAAC+D,KAAN,GAAc,GAAzC,EAA8C;AAC5C,YAAG/D,KAAK,CAAC+D,KAAN,GAAc,GAAjB,EACE/D,KAAK,CAACS,QAAN,CAAeU,GAAf,CACEiB,IAAI,CAACC,MAAL,KAAc,GADhB,EAEE,MAAMD,IAAI,CAACC,MAAL,KAAe,GAFvB,EAGE,GAHF;AAKFrC,QAAAA,KAAK,CAAC+D,KAAN,GAAc,KAAK3B,IAAI,CAACC,MAAL,KAAgB,GAAnC;AACD;;AACDvC,MAAAA,QAAQ,CAACkE,MAAT,CAAgBpE,KAAhB,EAAuBC,MAAvB;AACAoE,MAAAA,qBAAqB,CAACL,OAAD,CAArB;AACD;AAEP,GA5FW,EA4FT,EA5FS,CAAT;AA6FH,sBACG,uDACA;AAAM,IAAA,KAAK,EAAE;AAAEM,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,MAAM,EAAE,OAAxB;AAAiCC,MAAAA,MAAM,EAAE;AAAzC,KAAb;AAAgE,IAAA,GAAG,EAAEzE,OAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADH;AAMA,CAzGD;;AA2GA,eAAeD,SAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as THREE from 'three'\r\nimport smokeImg from '../images/smoke.png';\r\n \r\nconst RainAmina = () => {\r\n    const cubeRef = useRef(null);\r\n    \r\n    let scene,camera, renderer, cloudParticles = [], flash, rain, rainGeo, rainCount = 15000;\r\n    \r\n  \r\n    useEffect(() => {\r\n        scene = new THREE.Scene();\r\n        camera = new THREE.PerspectiveCamera(60,window.innerWidth / window.innerHeight, 1, 1000);\r\n        camera.position.z = 1;\r\n        camera.rotation.x = 1.16;\r\n        camera.rotation.y = -0.12;\r\n        camera.rotation.z = 0.27;\r\n        const ambient = new THREE.AmbientLight(0x555555);\r\n        scene.add(ambient);\r\n        const directionalLight = new THREE.DirectionalLight(0xffeedd);\r\n        directionalLight.position.set(0,0,1);\r\n        scene.add(directionalLight);\r\n        flash = new THREE.PointLight(0x062d89, 30, 500 ,1.7);\r\n        flash.position.set(200,300,100);\r\n        scene.add(flash);\r\n        renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(\r\n          cubeRef.current.clientWidth,\r\n          cubeRef.current.clientHeight\r\n        );\r\n        scene.fog = new THREE.FogExp2(0x11111f, 0.002);\r\n        renderer.setClearColor(scene.fog.color);\r\n        // renderer.setSize(window.innerWidth, window.innerHeight);\r\n        cubeRef.current.appendChild(renderer.domElement);\r\n        rainGeo = new THREE.Geometry();\r\n        for(let i=0;i<rainCount;i++) {\r\n          const rainDrop = new THREE.Vector3(\r\n            Math.random() * 400 -200,\r\n            Math.random() * 500 - 250,\r\n            Math.random() * 400 - 200\r\n          );\r\n          rainDrop.velocity = {};\r\n          rainDrop.velocity = 0;\r\n          rainGeo.vertices.push(rainDrop);\r\n        }\r\n        const rainMaterial = new THREE.PointsMaterial({\r\n          color: 0xfffff,\r\n          size: 0.1,\r\n          transparent: true\r\n        });\r\n        rain = new THREE.Points(rainGeo,rainMaterial);\r\n        scene.add(rain);\r\n        let loader = new THREE.TextureLoader();\r\n        loader.load(\"smoke.png\", function(texture){\r\n          const cloudGeo = new THREE.PlaneBufferGeometry(500,500);\r\n          const cloudMaterial = new THREE.MeshLambertMaterial({\r\n            map: texture,\r\n            transparent: true\r\n          });\r\n          for(let p=0; p<25; p++) {\r\n            let cloud = new THREE.Mesh(cloudGeo,cloudMaterial);\r\n            cloud.position.set(\r\n              Math.random()*800 -400,\r\n              500,\r\n              Math.random()*500 - 450\r\n            );\r\n            cloud.rotation.x = 1.16;\r\n            cloud.rotation.y = -0.12;\r\n            cloud.rotation.z = Math.random()*360;\r\n            cloud.material.opacity = 0.6;\r\n            cloudParticles.push(cloud);\r\n            scene.add(cloud);\r\n          }\r\n          animate();\r\n        })\r\n        function animate() {\r\n          cloudParticles.forEach(p => {\r\n            p.rotation.z -=0.002;\r\n          });\r\n          rainGeo.vertices.forEach(p => {\r\n            p.velocity -= 0.1 + Math.random() * 0.1;\r\n            p.y += p.velocity;\r\n            if (p.y < -200) {\r\n              p.y = 200;\r\n              p.velocity = 0;\r\n            }\r\n          });\r\n          rainGeo.verticesNeedUpdate = true;\r\n          rain.rotation.y +=0.002;\r\n          if(Math.random() > 0.93 || flash.power > 100) {\r\n            if(flash.power < 100) \r\n              flash.position.set(\r\n                Math.random()*400,\r\n                300 + Math.random() *200,\r\n                100\r\n              );\r\n            flash.power = 50 + Math.random() * 500;\r\n          }\r\n          renderer.render(scene, camera);\r\n          requestAnimationFrame(animate);\r\n        }\r\n   \r\n }, []);\r\n return (\r\n    <>\r\n    <div  style={{ width: \"90%\", height: \"600px\", margin: \"40px\" }} ref={cubeRef}></div>\r\n   \r\n    </>\r\n )\r\n};\r\n \r\nexport default RainAmina;"]},"metadata":{},"sourceType":"module"}