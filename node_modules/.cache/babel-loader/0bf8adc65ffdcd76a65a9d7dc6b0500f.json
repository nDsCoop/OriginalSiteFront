{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\GetAudio.js\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport { string, number, bool, func } from 'prop-types';\nimport { MicrophoneRecorder } from './library/MicrophoneRecorder';\nimport AudioPlayer from './library/AudioPlayer';\nimport Visualizer from './library/Visualizer';\nexport default class GetAudio extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickOutSide = e => {\n      if (this.ref && !this.ref.contains(e.target)) {\n        console.log(\"Here click out side login form!\");\n        this.setState({\n          showUserFrom: false\n        });\n      }\n    };\n\n    this.visualize = () => {\n      const {\n        backgroundColor,\n        strokeColor,\n        width,\n        height,\n        visualSetting\n      } = this.props;\n      const {\n        canvas,\n        canvasCtx\n      } = this.state;\n\n      if (visualSetting === 'sinewave') {\n        Visualizer.visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      } else if (visualSetting === 'frequencyBars') {\n        Visualizer.visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      } else if (visualSetting === 'frequencyCircles') {\n        Visualizer.visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      }\n    };\n\n    this.visualizerRef = React.createRef();\n    this.state = {\n      microphoneRecorder: null,\n      canvas: null,\n      canvasCtx: null\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      record,\n      onStop\n    } = this.props;\n    const {\n      microphoneRecorder\n    } = this.state;\n\n    if (prevProps.record !== record) {\n      if (record) {\n        if (microphoneRecorder) {\n          microphoneRecorder.startRecording();\n        }\n      } else if (microphoneRecorder) {\n        microphoneRecorder.stopRecording(onStop);\n        this.clear();\n      }\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('mousedown', this.onClickOutSide);\n    const {\n      onSave,\n      onStop,\n      onStart,\n      onData,\n      audioElem,\n      audioBitsPerSecond,\n      echoCancellation,\n      autoGainControl,\n      noiseSuppression,\n      channelCount,\n      mimeType\n    } = this.props;\n    const visualizer = this.visualizerRef.current;\n    const canvas = visualizer;\n    const canvasCtx = canvas.getContext('2d');\n    const options = {\n      audioBitsPerSecond,\n      mimeType\n    };\n    const soundOptions = {\n      echoCancellation,\n      autoGainControl,\n      noiseSuppression\n    };\n\n    if (audioElem) {\n      AudioPlayer.create(audioElem);\n      this.setState({\n        canvas,\n        canvasCtx\n      }, () => {\n        this.visualize();\n      });\n    } else {\n      this.setState({\n        microphoneRecorder: new MicrophoneRecorder(onStart, onStop, onSave, onData, options, soundOptions),\n        canvas,\n        canvasCtx\n      }, () => {\n        this.visualize();\n      });\n    }\n  }\n\n  clear() {\n    const {\n      width,\n      height\n    } = this.props;\n    const {\n      canvasCtx\n    } = this.state;\n    canvasCtx.clearRect(0, 0, width, height);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('mousedown', this.onClickOutSide);\n    console.log('Unmount');\n  }\n\n  render() {\n    // const { } = this.state;\n    const {\n      store\n    } = this.props;\n    const {\n      width,\n      height\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.visualizerRef,\n      height: height,\n      width: width,\n      className: this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\nGetAudio.propTypes = {\n  backgroundColor: string,\n  strokeColor: string,\n  className: string,\n  audioBitsPerSecond: number,\n  mimeType: string,\n  height: number,\n  record: bool.isRequired,\n  onStop: func,\n  onData: func,\n  onSave: func\n};\nGetAudio.defaultProps = {\n  backgroundColor: 'rgba(255, 255, 255, 0.5)',\n  strokeColor: '#000000',\n  className: 'visualizer',\n  audioBitsPerSecond: 128000,\n  mimeType: 'audio/webm;codecs=opus',\n  record: false,\n  width: 640,\n  height: 100,\n  visualSetting: 'sinewave',\n  echoCancellation: false,\n  autoGainControl: false,\n  noiseSuppression: false,\n  channelCount: 2\n};","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/GetAudio.js"],"names":["React","Component","_","string","number","bool","func","MicrophoneRecorder","AudioPlayer","Visualizer","GetAudio","constructor","props","onClickOutSide","e","ref","contains","target","console","log","setState","showUserFrom","visualize","backgroundColor","strokeColor","width","height","visualSetting","canvas","canvasCtx","state","visualizeSineWave","visualizeFrequencyBars","visualizeFrequencyCircles","visualizerRef","createRef","microphoneRecorder","componentDidUpdate","prevProps","record","onStop","startRecording","stopRecording","clear","componentDidMount","window","addEventListener","onSave","onStart","onData","audioElem","audioBitsPerSecond","echoCancellation","autoGainControl","noiseSuppression","channelCount","mimeType","visualizer","current","getContext","options","soundOptions","create","clearRect","componentWillUnmount","removeEventListener","render","store","className","propTypes","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport {\r\n    string, number, bool, func\r\n  } from 'prop-types';\r\n  import { MicrophoneRecorder } from './library/MicrophoneRecorder'\r\n  import AudioPlayer            from './library/AudioPlayer'\r\n  import Visualizer             from './library/Visualizer'\r\n\r\nexport default class GetAudio extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.visualizerRef = React.createRef()\r\n        this.state = {\r\n            microphoneRecorder: null,\r\n            canvas: null,\r\n            canvasCtx: null\r\n    }\r\n}\r\n\r\nonClickOutSide = (e) => {\r\n    if(this.ref && !this.ref.contains(e.target)){\r\n        console.log(\"Here click out side login form!\");\r\n        this.setState({\r\n            showUserFrom: false\r\n        })\r\n    }\r\n}\r\ncomponentDidUpdate(prevProps) {\r\n    const { record, onStop } = this.props\r\n    const { microphoneRecorder } = this.state\r\n    if (prevProps.record !== record) {\r\n      if (record) {\r\n        if (microphoneRecorder) {\r\n          microphoneRecorder.startRecording()\r\n        }\r\n      } else if (microphoneRecorder) {\r\n        microphoneRecorder.stopRecording(onStop)\r\n        this.clear()\r\n      }\r\n    }\r\n  }\r\n\r\ncomponentDidMount() {\r\n    window.addEventListener('mousedown', this.onClickOutSide);\r\n    const {\r\n      onSave,\r\n      onStop,\r\n      onStart,\r\n      onData,\r\n      audioElem,\r\n      audioBitsPerSecond,\r\n      echoCancellation,\r\n      autoGainControl,\r\n      noiseSuppression,\r\n      channelCount,\r\n      mimeType\r\n    } = this.props\r\n    const visualizer = this.visualizerRef.current\r\n    const canvas = visualizer\r\n    const canvasCtx = canvas.getContext('2d')\r\n    const options = {\r\n      audioBitsPerSecond,\r\n      mimeType\r\n    }\r\n    const soundOptions = {\r\n      echoCancellation,\r\n      autoGainControl,\r\n      noiseSuppression\r\n    }\r\n\r\n    if (audioElem) {\r\n      AudioPlayer.create(audioElem)\r\n\r\n      this.setState({\r\n        canvas,\r\n        canvasCtx\r\n      }, () => {\r\n        this.visualize()\r\n      })\r\n    } else {\r\n      this.setState({\r\n        microphoneRecorder: new MicrophoneRecorder(\r\n          onStart,\r\n          onStop,\r\n          onSave,\r\n          onData,\r\n          options,\r\n          soundOptions\r\n        ),\r\n        canvas,\r\n        canvasCtx\r\n      }, () => {\r\n        this.visualize()\r\n      })\r\n    }\r\n  }\r\n  visualize = () => {\r\n    const {\r\n      backgroundColor, strokeColor, width, height, visualSetting\r\n    } = this.props\r\n    const { canvas, canvasCtx } = this.state\r\n\r\n    if (visualSetting === 'sinewave') {\r\n      Visualizer.visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor)\r\n    } else if (visualSetting === 'frequencyBars') {\r\n      Visualizer.visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor)\r\n    } else if (visualSetting === 'frequencyCircles') {\r\n      Visualizer.visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor)\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    const { width, height } = this.props\r\n    const { canvasCtx } = this.state\r\n    canvasCtx.clearRect(0, 0, width, height)\r\n  }\r\ncomponentWillUnmount(){\r\n    window.removeEventListener('mousedown', this.onClickOutSide);\r\n    console.log('Unmount');\r\n}\r\n\r\n\r\n\r\n    render() {\r\n        // const { } = this.state;\r\n        const { store } = this.props;\r\n        const { width, height } = this.props\r\n      \r\n        return (\r\n            <canvas\r\n                ref={this.visualizerRef}\r\n                height={height}\r\n                width={width}\r\n                className={this.props.className}\r\n            />\r\n        )\r\n    }\r\n}\r\nGetAudio.propTypes = {\r\n    backgroundColor: string,\r\n    strokeColor: string,\r\n    className: string,\r\n    audioBitsPerSecond: number,\r\n    mimeType: string,\r\n    height: number,\r\n    record: bool.isRequired,\r\n    onStop: func,\r\n    onData: func,\r\n    onSave: func\r\n  }\r\n  \r\n  GetAudio.defaultProps = {\r\n    backgroundColor: 'rgba(255, 255, 255, 0.5)',\r\n    strokeColor: '#000000',\r\n    className: 'visualizer',\r\n    audioBitsPerSecond: 128000,\r\n    mimeType: 'audio/webm;codecs=opus',\r\n    record: false,\r\n    width: 640,\r\n    height: 100,\r\n    visualSetting: 'sinewave',\r\n    echoCancellation: false,\r\n    autoGainControl: false,\r\n    noiseSuppression: false,\r\n    channelCount: 2\r\n  }"]},"metadata":{},"sourceType":"module"}