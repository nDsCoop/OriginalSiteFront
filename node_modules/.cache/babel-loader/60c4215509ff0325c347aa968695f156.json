{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\MainVideo.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nexport class MainVideo extends Component {\n  constructor(props) {\n    super(props); // https://reactjs.org/docs/refs-and-the-dom.html\n\n    this.componentDidMount = () => {\n      this.socket = io('/webrtcPeer', {\n        path: '/webrtc',\n        query: {}\n      });\n      this.socket.on('connection-success', success => {\n        console.log(success);\n      });\n      this.socket.on('offerOrAnswer', sdp => {\n        this.textref.value = JSON.stringify(sdp); // set sdp as remote description\n\n        this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n      });\n      this.socket.on('candidate', candidate => {\n        // console.log('From Peer... ', JSON.stringify(candidate))\n        // this.candidates = [...this.candidates, candidate]\n        this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n      }); // const pc_config = null\n\n      const pc_config = {\n        \"iceServers\": [// {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls: 'stun:stun.l.google.com:19302'\n        }]\n      }; // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n      // create an instance of RTCPeerConnection\n\n      this.pc = new RTCPeerConnection(pc_config); // triggered when a new candidate is returned\n\n      this.pc.onicecandidate = e => {\n        // send the candidates to the remote peer\n        // see addCandidate below to be triggered on the remote peer\n        if (e.candidate) {\n          // console.log(JSON.stringify(e.candidate))\n          this.sendToPeer('candidate', e.candidate);\n        }\n      }; // triggered when there is a change in connection state\n\n\n      this.pc.oniceconnectionstatechange = e => {\n        console.log(e);\n      }; // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n\n\n      this.pc.ontrack = e => {\n        this.remoteVideoref.current.srcObject = e.streams[0];\n      }; // called when getUserMedia() successfully returns - see below\n      // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n\n\n      const success = stream => {\n        window.localStream = stream;\n        this.localVideoref.current.srcObject = stream;\n        this.pc.addStream(stream);\n      }; // called when getUserMedia() fails - see below\n\n\n      const failure = e => {\n        console.log('getUserMedia Error: ', e);\n      }; // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n      // see the above link for more constraint options\n\n\n      const constraints = {\n        audio: false,\n        video: true // video: {\n        //   width: 1280,\n        //   height: 720\n        // },\n        // video: {\n        //   width: { min: 1280 },\n        // }\n\n      }; // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n\n      navigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);\n    };\n\n    this.sendToPeer = (messageType, payload) => {\n      this.socket.emit(messageType, {\n        socketID: this.socket.id,\n        payload\n      });\n    };\n\n    this.createOffer = () => {\n      console.log('Offer'); // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n      // initiates the creation of SDP\n\n      this.pc.createOffer({\n        offerToReceiveVideo: 1\n      }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer('offerOrAnswer', sdp);\n      });\n    };\n\n    this.createAnswer = () => {\n      console.log('Answer');\n      this.pc.createAnswer({\n        offerToReceiveVideo: 1\n      }).then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp);\n        this.sendToPeer('offerOrAnswer', sdp);\n      });\n    };\n\n    this.setRemoteDescription = () => {\n      // retrieve and parse the SDP copied from the remote peer\n      const desc = JSON.parse(this.textref.value); // set sdp as remote description\n\n      this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n    };\n\n    this.addCandidate = () => {\n      // retrieve and parse the Candidate copied from the remote peer\n      // const candidate = JSON.parse(this.textref.value)\n      // console.log('Adding candidate:', candidate)\n      // add the candidate to the peer connection\n      // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n      this.candidates.forEach(candidate => {\n        console.log(JSON.stringify(candidate));\n        this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n      });\n    };\n\n    this.localVideoref = React.createRef();\n    this.remoteVideoref = React.createRef();\n    this.socket = null;\n    this.candidates = [];\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      style: {\n        width: 240,\n        height: 240,\n        margin: 5,\n        backgroundColor: 'black'\n      },\n      ref: this.localVideoref,\n      autoPlay: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"video\", {\n      style: {\n        width: 240,\n        height: 240,\n        margin: 5,\n        backgroundColor: 'black'\n      },\n      ref: this.remoteVideoref,\n      autoPlay: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.createOffer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, \"Offer\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.createAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, \"Answer\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      style: {\n        width: 450,\n        height: 40\n      },\n      ref: ref => {\n        this.textref = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\nexport default MainVideo;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/MainVideo.js"],"names":["React","Component","io","MainVideo","constructor","props","componentDidMount","socket","path","query","on","success","console","log","sdp","textref","value","JSON","stringify","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","pc_config","urls","RTCPeerConnection","onicecandidate","e","sendToPeer","oniceconnectionstatechange","ontrack","remoteVideoref","current","srcObject","streams","stream","window","localStream","localVideoref","addStream","failure","constraints","audio","video","navigator","mediaDevices","getUserMedia","then","catch","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","desc","parse","addCandidate","candidates","forEach","createRef","render","width","height","margin","backgroundColor","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport io from 'socket.io-client';\r\n\r\nexport class MainVideo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        // https://reactjs.org/docs/refs-and-the-dom.html\r\n        this.localVideoref = React.createRef()\r\n        this.remoteVideoref = React.createRef()\r\n    \r\n        this.socket = null\r\n        this.candidates = []\r\n      }\r\n    \r\n      componentDidMount = () => {\r\n    \r\n        this.socket = io(\r\n          '/webrtcPeer',\r\n          {\r\n            path: '/webrtc',\r\n            query: {}\r\n          }\r\n        )\r\n    \r\n        this.socket.on('connection-success', success => {\r\n          console.log(success)\r\n        })\r\n    \r\n        this.socket.on('offerOrAnswer', (sdp) => {\r\n          this.textref.value = JSON.stringify(sdp)\r\n    \r\n          // set sdp as remote description\r\n          this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\r\n        })\r\n    \r\n        this.socket.on('candidate', (candidate) => {\r\n          // console.log('From Peer... ', JSON.stringify(candidate))\r\n          // this.candidates = [...this.candidates, candidate]\r\n          this.pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n        })\r\n    \r\n        // const pc_config = null\r\n    \r\n        const pc_config = {\r\n          \"iceServers\": [\r\n            // {\r\n            //   urls: 'stun:[STUN_IP]:[PORT]',\r\n            //   'credentials': '[YOR CREDENTIALS]',\r\n            //   'username': '[USERNAME]'\r\n            // },\r\n            {\r\n              urls : 'stun:stun.l.google.com:19302'\r\n            }\r\n          ]\r\n        }\r\n    \r\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\r\n        // create an instance of RTCPeerConnection\r\n        this.pc = new RTCPeerConnection(pc_config)\r\n    \r\n        // triggered when a new candidate is returned\r\n        this.pc.onicecandidate = (e) => {\r\n          // send the candidates to the remote peer\r\n          // see addCandidate below to be triggered on the remote peer\r\n          if (e.candidate) {\r\n            // console.log(JSON.stringify(e.candidate))\r\n            this.sendToPeer('candidate', e.candidate)\r\n          }\r\n        }\r\n    \r\n        // triggered when there is a change in connection state\r\n        this.pc.oniceconnectionstatechange = (e) => {\r\n          console.log(e)\r\n        }\r\n    \r\n        // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\r\n        this.pc.ontrack = (e) => {\r\n            this.remoteVideoref.current.srcObject = e.streams[0]\r\n        }\r\n    \r\n        // called when getUserMedia() successfully returns - see below\r\n        // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\r\n        const success = (stream) => {\r\n          window.localStream = stream\r\n          this.localVideoref.current.srcObject = stream\r\n          this.pc.addStream(stream)\r\n        }\r\n    \r\n        // called when getUserMedia() fails - see below\r\n        const failure = (e) => {\r\n          console.log('getUserMedia Error: ', e)\r\n        }\r\n    \r\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n        // see the above link for more constraint options\r\n        const constraints = {\r\n          audio: false,\r\n          video: true,\r\n          // video: {\r\n          //   width: 1280,\r\n          //   height: 720\r\n          // },\r\n          // video: {\r\n          //   width: { min: 1280 },\r\n          // }\r\n        }\r\n    \r\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n        navigator.mediaDevices.getUserMedia(constraints)\r\n          .then(success)\r\n          .catch(failure)\r\n      }\r\n    \r\n      sendToPeer = (messageType, payload) => {\r\n        this.socket.emit(messageType, {\r\n          socketID: this.socket.id,\r\n          payload\r\n        })\r\n      }\r\n    \r\n      /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\r\n    \r\n      createOffer = () => {\r\n        console.log('Offer')\r\n    \r\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\r\n        // initiates the creation of SDP\r\n        this.pc.createOffer({ offerToReceiveVideo: 1 })\r\n          .then(sdp => {\r\n            // console.log(JSON.stringify(sdp))\r\n    \r\n            // set offer sdp as local description\r\n            this.pc.setLocalDescription(sdp)\r\n    \r\n            this.sendToPeer('offerOrAnswer', sdp)\r\n        })\r\n      }\r\n    \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\r\n      // creates an SDP answer to an offer received from remote peer\r\n      createAnswer = () => {\r\n        console.log('Answer')\r\n        this.pc.createAnswer({ offerToReceiveVideo: 1 })\r\n          .then(sdp => {\r\n            // console.log(JSON.stringify(sdp))\r\n    \r\n            // set answer sdp as local description\r\n            this.pc.setLocalDescription(sdp)\r\n    \r\n            this.sendToPeer('offerOrAnswer', sdp)\r\n        })\r\n      }\r\n    \r\n      setRemoteDescription = () => {\r\n        // retrieve and parse the SDP copied from the remote peer\r\n        const desc = JSON.parse(this.textref.value)\r\n    \r\n        // set sdp as remote description\r\n        this.pc.setRemoteDescription(new RTCSessionDescription(desc))\r\n      }\r\n    \r\n      addCandidate = () => {\r\n        // retrieve and parse the Candidate copied from the remote peer\r\n        // const candidate = JSON.parse(this.textref.value)\r\n        // console.log('Adding candidate:', candidate)\r\n    \r\n        // add the candidate to the peer connection\r\n        // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n    \r\n        this.candidates.forEach(candidate => {\r\n          console.log(JSON.stringify(candidate))\r\n          this.pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n        });\r\n      }\r\n    \r\n      render() {\r\n    \r\n        return (\r\n          <div>\r\n            <video\r\n              style={{\r\n                width: 240,\r\n                height: 240,\r\n                margin: 5,\r\n                backgroundColor: 'black'\r\n              }}\r\n              ref={ this.localVideoref }\r\n              autoPlay>\r\n            </video>\r\n            <video\r\n              style={{\r\n                width: 240,\r\n                height: 240,\r\n                margin: 5,\r\n                backgroundColor: 'black'\r\n              }}\r\n              ref={ this.remoteVideoref }\r\n              autoPlay>\r\n            </video>\r\n            <br />\r\n    \r\n            <button onClick={this.createOffer}>Offer</button>\r\n            <button onClick={this.createAnswer}>Answer</button>\r\n    \r\n            <br />\r\n            <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\r\n    \r\n            {/* <br />\r\n            <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\r\n            <button onClick={this.addCandidate}>Add Candidate</button> */}\r\n          </div>\r\n        )\r\n      }\r\n    }\r\nexport default MainVideo\r\n"]},"metadata":{},"sourceType":"module"}