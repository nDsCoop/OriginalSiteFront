{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\MainVideo.js\";\nimport React, { Component, Fragment } from 'react';\nimport io from 'socket.io-client';\nimport './VideoCall.css';\nimport Video from './Video';\nimport Videos from './Videos';\nimport Draggable from './Draggable';\nimport Chat from './Chat';\nimport { CgCloseO } from 'react-icons/cg';\nimport { Redirect } from \"react-router-dom\";\nimport { MdPeople } from 'react-icons/md';\nimport _ from 'lodash';\nexport class MainVideo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getLocalStream = () => {\n      // called when getUserMedia() successfully returns - see below\n      // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n      const success = stream => {\n        window.localStream = stream; // this.localVideoref.current.srcObject = stream\n        // this.pc.addStream(stream);\n\n        this.setState({\n          localStream: stream\n        });\n        this.whoisOnline();\n      }; // called when getUserMedia() fails - see below\n\n\n      const failure = e => {\n        console.log('getUserMedia Error: ', e);\n      }; // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n      // see the above link for more constraint options\n\n\n      const constraints = {\n        audio: true,\n        video: true,\n        // video: {\n        //   width: 1280,\n        //   height: 720\n        // },\n        // video: {\n        //   width: { min: 1280 },\n        // }\n        options: {\n          mirror: true\n        }\n      }; // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n\n      navigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);\n    };\n\n    this.whoisOnline = () => {\n      // let all peers know I am joining\n      this.sendToPeer('onlinePeers', null, {\n        local: this.socket.id\n      });\n    };\n\n    this.sendToPeer = (messageType, payload, socketID) => {\n      this.socket.emit(messageType, {\n        socketID,\n        payload\n      });\n    };\n\n    this.createPeerConnection = (socketID, callback) => {\n      try {\n        let pc = new RTCPeerConnection(this.state.pc_config); // add pc to peerConnections object\n\n        const peerConnections = { ...this.state.peerConnections,\n          [socketID]: pc\n        };\n        this.setState({\n          peerConnections\n        });\n\n        pc.onicecandidate = e => {\n          if (e.candidate) {\n            this.sendToPeer('candidate', e.candidate, {\n              local: this.socket.id,\n              remote: socketID\n            });\n          }\n        };\n\n        pc.oniceconnectionstatechange = e => {// if (pc.iceConnectionState === 'disconnected') {\n          //   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n          //   this.setState({\n          //     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n          //   })\n          // }\n        };\n\n        pc.ontrack = e => {\n          let _remoteStream = null;\n          let remoteStreams = this.state.remoteStreams;\n          let remoteVideo = {}; // 1. check if stream already exists in remoteStreams\n\n          const rVideos = this.state.remoteStreams.filter(stream => stream.id === socketID); // 2. if it does exist then add track\n\n          if (rVideos.length) {\n            _remoteStream = rVideos[0].stream;\n\n            _remoteStream.addTrack(e.track, _remoteStream);\n\n            remoteVideo = { ...rVideos[0],\n              stream: _remoteStream\n            };\n            remoteStreams = this.state.remoteStreams.map(_remoteVideo => {\n              return _remoteVideo.id === remoteVideo.id && remoteVideo || _remoteVideo;\n            });\n          } else {\n            // 3. if not, then create new stream and add track\n            _remoteStream = new MediaStream();\n\n            _remoteStream.addTrack(e.track, _remoteStream);\n\n            remoteVideo = {\n              id: socketID.code,\n              name: socketID.user,\n              stream: _remoteStream\n            };\n            remoteStreams = [...this.state.remoteStreams, remoteVideo];\n          } // const remoteVideo = {\n          //   id: socketID,\n          //   name: socketID,\n          //   stream: e.streams[0]\n          // }\n\n\n          this.setState(prevState => {\n            // If we already have a stream in display let it stay the same, otherwise use the latest stream\n            // const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: e.streams[0] }\n            const remoteStream = prevState.remoteStreams.length > 0 ? {} : {\n              remoteStream: _remoteStream\n            }; // get currently selected video\n\n            let selectedVideo = prevState.remoteStreams.filter(stream => stream.id === prevState.selectedVideo.id); // if the video is still in the list, then do nothing, otherwise set to new video stream\n\n            selectedVideo = selectedVideo.length ? {} : {\n              selectedVideo: remoteVideo\n            };\n            return { // selectedVideo: remoteVideo,\n              ...selectedVideo,\n              // remoteStream: e.streams[0],\n              ...remoteStream,\n              remoteStreams //: [...prevState.remoteStreams, remoteVideo]\n\n            };\n          });\n        };\n\n        pc.close = () => {\n          // alert('GONE')\n          console.log(\"pc closed\");\n        };\n\n        if (this.state.localStream) // pc.addStream(this.state.localStream)\n          this.state.localStream.getTracks().forEach(track => {\n            pc.addTrack(track, this.state.localStream);\n          }); // return pc\n\n        callback(pc);\n      } catch (e) {\n        console.log('Something went wrong! pc not created!!', e); // return;\n\n        callback(null);\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.socket = io.connect(this.serviceIP, {\n        path: '/io/webrtc',\n        query: {\n          room: window.location.pathname\n        }\n      });\n      this.socket.on('connection-success', data => {\n        this.getLocalStream(); // console.log(data.success)\n\n        const status = data.peerCount > 1 ? /*#__PURE__*/React.createElement(MdPeople, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 45\n          }\n        }, \"$\", data.peerCount) : 'Waiting for other peers to connect';\n        this.setState({\n          status: status,\n          messages: data.messages\n        });\n      });\n      this.socket.on('joined-peers', data => {\n        this.setState({\n          status: data.peerCount > 1 ? /*#__PURE__*/React.createElement(MdPeople, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 40\n            }\n          }, \"$\", data.peerCount) : 'Waiting for other peers to connect'\n        });\n      }); //************ ************//\n\n      this.socket.on('peer-disconnected', data => {\n        try {\n          // close peer-connection with this peer\n          this.state.peerConnections[data.socketID].close(); // get and stop remote audio and video tracks of the disconnected peer\n\n          const rVideo = this.state.remoteStreams.filter(stream => stream.id === data.socketID);\n          rVideo && this.stopTracks(rVideo[0].stream);\n        } catch (err) {\n          console.error(err);\n        } // filter out the disconnected peer stream\n\n\n        const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== data.socketID);\n        this.setState(prevState => {\n          // check if disconnected peer is the selected video and if there still connected peers, then select the first\n          const selectedVideo = prevState.selectedVideo.id === data.socketID && remoteStreams.length ? {\n            selectedVideo: remoteStreams[0]\n          } : null;\n          return {\n            // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n            remoteStreams,\n            ...selectedVideo,\n            status: data.peerCount > 1 ? `Number of matches to ${window.location.pathname}: ${data.peerCount}` : 'Waiting for your friends to connect'\n          };\n        });\n      }); // this.socket.on('offerOrAnswer', (sdp) => {\n      //   this.textref.value = JSON.stringify(sdp)\n      //   // set sdp as remote description\n      //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n      // })\n\n      this.socket.on('online-peer', socketID => {\n        const {\n          store\n        } = this.props;\n        const me = store.getCurrentUser(); // const meObj = JSON.stringify(me); \n\n        const email = _.get(me, 'email');\n\n        const name = email.substring(0, email.lastIndexOf(\"@\")); // console.log('connected peers ...', socketID)\n        // create and send offer to the peer (data.socketID)\n        // 1. Create new pc\n\n        this.createPeerConnection(socketID, pc => {\n          // 2. Create Offer\n          if (pc) {\n            // Send Channel\n            const handleSendChannelStatusChange = event => {\n              console.log('send channel status: ' + this.state.sendChannels[0].readyState);\n            };\n\n            const sendChannel = pc.createDataChannel('sendChannel');\n            sendChannel.onopen = handleSendChannelStatusChange;\n            sendChannel.onclose = handleSendChannelStatusChange;\n            this.setState(prevState => {\n              return {\n                sendChannels: [...prevState.sendChannels, sendChannel]\n              };\n            }); // Receive Channels\n\n            const handleReceiveMessage = event => {\n              const message = JSON.parse(event.data); // console.log(message)\n\n              this.setState(prevState => {\n                return {\n                  messages: [...prevState.messages, message]\n                };\n              });\n            };\n\n            const handleReceiveChannelStatusChange = event => {\n              if (this.receiveChannel) {\n                console.log(\"receive channel's status has changed to \" + this.receiveChannel.readyState);\n              }\n            };\n\n            const receiveChannelCallback = event => {\n              const receiveChannel = event.channel;\n              receiveChannel.onmessage = handleReceiveMessage;\n              receiveChannel.onopen = handleReceiveChannelStatusChange;\n              receiveChannel.onclose = handleReceiveChannelStatusChange;\n            };\n\n            pc.ondatachannel = receiveChannelCallback;\n            pc.createOffer(this.state.sdpConstraints).then(sdp => {\n              pc.setLocalDescription(sdp); // console.log(meObj);\n\n              this.sendToPeer('offer', sdp, {\n                local: {\n                  code: this.socket.id,\n                  user: name\n                },\n                remote: socketID\n              });\n            });\n          }\n        });\n      });\n      this.socket.on('offer', data => {\n        this.createPeerConnection(data.socketID, pc => {\n          pc.addStream(this.state.localStream); // Send Channel\n\n          const handleSendChannelStatusChange = event => {\n            console.log('send channel status: ' + this.state.sendChannels[0].readyState);\n          };\n\n          const sendChannel = pc.createDataChannel('sendChannel');\n          sendChannel.onopen = handleSendChannelStatusChange;\n          sendChannel.onclose = handleSendChannelStatusChange;\n          this.setState(prevState => {\n            return {\n              sendChannels: [...prevState.sendChannels, sendChannel]\n            };\n          }); // Receive Channels\n\n          const handleReceiveMessage = event => {\n            const message = JSON.parse(event.data); // console.log(message)\n\n            this.setState(prevState => {\n              return {\n                messages: [...prevState.messages, message]\n              };\n            });\n          };\n\n          const handleReceiveChannelStatusChange = event => {\n            if (this.receiveChannel) {\n              console.log(\"receive channel's status has changed to \" + this.receiveChannel.readyState);\n            }\n          };\n\n          const receiveChannelCallback = event => {\n            const receiveChannel = event.channel;\n            receiveChannel.onmessage = handleReceiveMessage;\n            receiveChannel.onopen = handleReceiveChannelStatusChange;\n            receiveChannel.onclose = handleReceiveChannelStatusChange;\n          };\n\n          pc.ondatachannel = receiveChannelCallback;\n          pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\n            // 2. Create Answer\n            pc.createAnswer(this.state.sdpConstraints).then(sdp => {\n              pc.setLocalDescription(sdp);\n              this.sendToPeer('answer', sdp, {\n                local: this.socket.id,\n                remote: data.socketID\n              });\n            });\n          });\n        });\n      });\n      this.socket.on('answer', data => {\n        // get remote's peerConnection\n        const pc = this.state.peerConnections[data.socketID]; // console.log(data.sdp)\n\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {});\n      });\n      this.socket.on('candidate', data => {\n        // get remote's peerConnection\n        const pc = this.state.peerConnections[data.socketID];\n        if (pc) pc.addIceCandidate(new RTCIceCandidate(data.candidate));\n      }); // const pc_config = null\n      // const pc_config = {\n      //   \"iceServers\": [\n      //     // {\n      //     //   urls: 'stun:[STUN_IP]:[PORT]',\n      //     //   'credentials': '[YOR CREDENTIALS]',\n      //     //   'username': '[USERNAME]'\n      //     // },\n      //     {\n      //       urls : 'stun:stun.l.google.com:19302'\n      //     }\n      //   ]\n      // }\n      // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n      // create an instance of RTCPeerConnection\n      // this.pc = new RTCPeerConnection(this.state.pc_config)\n      // triggered when a new candidate is returned\n      // this.pc.onicecandidate = (e) => {\n      //   // send the candidates to the remote peer\n      //   // see addCandidate below to be triggered on the remote peer\n      //   if (e.candidate) {\n      //     // console.log(JSON.stringify(e.candidate))\n      //     this.sendToPeer('candidate', e.candidate)\n      //   }\n      // }\n      // triggered when there is a change in connection state\n      // this.pc.oniceconnectionstatechange = (e) => {\n      //   console.log(e)\n      // }\n      // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n      // this.pc.onaddstream = (e) => {\n      //   this.remoteVideoref.current.srcObject = e.stream\n      // }\n      // this.pc.ontrack = (e) => {\n      //   debugger\n      //   // this.remoteVideoref.current.srcObject = e.streams[0]\n      //   this.setState({\n      //     remoteStream: e.streams[0]\n      //   })\n      // }\n    };\n\n    this.disconnectSocket = socketToDisconnect => {\n      this.sendToPeer('socket-to-disconnect', null, {\n        local: this.socket.id,\n        remote: socketToDisconnect\n      });\n    };\n\n    this.switchVideo = _video => {\n      // console.log(_video)\n      this.setState({\n        selectedVideo: _video\n      });\n    };\n\n    this.stopTracks = stream => {\n      stream.getTracks().forEach(track => track.stop());\n    };\n\n    this.state = {\n      localStream: null,\n      // used to hold local stream object to avoid recreating the stream everytime a new offer comes\n      remoteStream: null,\n      // used to hold remote stream object that is displayed in the main screen\n      remoteStreams: [],\n      // holds all Video Streams (all remote streams)\n      peerConnections: {},\n      // holds all Peer Connections\n      selectedVideo: null,\n      status: 'Please wait...',\n      pc_config: {\n        \"iceServers\": [{\n          urls: 'stun:stun.l.google.com:19302'\n        }]\n      },\n      sdpConstraints: {\n        'mandatory': {\n          'OfferToReceiveAudio': true,\n          'OfferToReceiveVideo': true\n        }\n      },\n      messages: [],\n      sendChannels: [],\n      disconnected: false\n    }; // DONT FORGET TO CHANGE TO YOUR URL\n\n    this.serviceIP = 'http://localhost:9150/webrtcPeer'; // https://reactjs.org/docs/refs-and-the-dom.html\n    // this.localVideoref = React.createRef()\n    // this.remoteVideoref = React.createRef()\n\n    this.socket = null; // this.candidates = []\n  }\n\n  render() {\n    const {\n      status,\n      messages,\n      disconnected,\n      localStream,\n      peerConnections,\n      remoteStreams\n    } = this.state;\n    const {\n      store\n    } = this.props;\n    const me = store.getCurrentUser();\n\n    const name = _.get(me, 'name'); // if(disconnected || !me){\n    //   return (\n    //     <Redirect to=\"/page3\" />\n    //   )\n    // } \n\n\n    if (disconnected) {\n      // disconnect socket\n      this.socket.close(); // stop local audio & video tracks\n\n      this.stopTracks(localStream); // stop all remote audio & video tracks\n\n      remoteStreams.forEach(rVideo => this.stopTracks(rVideo.stream)); // stop all remote peerconnections\n\n      peerConnections && Object.values(peerConnections).forEach(pc => pc.close());\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/page3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }\n      });\n    }\n\n    const statusText = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: 'rgba(199, 36, 199, 0.9)',\n        padding: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 26\n      }\n    }, status);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Draggable, {\n      style: {\n        zIndex: 101,\n        position: 'absolute',\n        right: 0,\n        cursor: 'move'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Video, {\n      videoType: \"localVideo\",\n      videoStyles: {\n        width: 200,\n        marginTop: '-3.5rem',\n        marginRight: '.5rem'\n      },\n      frameStyle: {\n        width: 200,\n        margin: 5,\n        borderRadius: '.2rem',\n        backgroundColor: 'rgba(0,0,0,0.9)'\n      },\n      showMuteControls: true // ref={this.localVideoref}\n      ,\n      videoStream: localStream,\n      autoPlay: true,\n      muted: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        zIndex: 3,\n        position: 'absolute',\n        marginTop: '-4.2rem' // margin: 10,\n        // backgroundColor: '#cdc4ff4f',\n        // padding: 10,\n        // borderRadius: 5,\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      onClick: e => {\n        this.setState({\n          disconnected: true\n        });\n      },\n      style: {\n        cursor: 'pointer',\n        paddingLeft: 15,\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CgCloseO, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 132\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'rgba(0, 0, 0, 0.07)',\n        padding: 10,\n        borderRadius: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 13\n      }\n    }, statusText)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Videos, {\n      switchVideo: this.switchVideo,\n      remoteStreams: remoteStreams // videoStream={this.state.selectedVideo && this.state.selectedVideo.stream}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Chat, {\n      user: {\n        uid: this.socket && this.socket.id || '',\n        name: name || 'ndsbug'\n      },\n      messages: messages,\n      sendMessage: message => {\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, message]\n          };\n        });\n        this.state.sendChannels.map(sendChannel => {\n          sendChannel.readyState === 'open' && sendChannel.send(JSON.stringify(message));\n        });\n        this.sendToPeer('new-message', JSON.stringify(message), {\n          local: this.socket.id\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\nexport default MainVideo;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/MainVideo.js"],"names":["React","Component","Fragment","io","Video","Videos","Draggable","Chat","CgCloseO","Redirect","MdPeople","_","MainVideo","constructor","props","getLocalStream","success","stream","window","localStream","setState","whoisOnline","failure","e","console","log","constraints","audio","video","options","mirror","navigator","mediaDevices","getUserMedia","then","catch","sendToPeer","local","socket","id","messageType","payload","socketID","emit","createPeerConnection","callback","pc","RTCPeerConnection","state","pc_config","peerConnections","onicecandidate","candidate","remote","oniceconnectionstatechange","ontrack","_remoteStream","remoteStreams","remoteVideo","rVideos","filter","length","addTrack","track","map","_remoteVideo","MediaStream","code","name","user","prevState","remoteStream","selectedVideo","close","getTracks","forEach","componentDidMount","connect","serviceIP","path","query","room","location","pathname","on","data","status","peerCount","messages","rVideo","stopTracks","err","error","store","me","getCurrentUser","email","get","substring","lastIndexOf","handleSendChannelStatusChange","event","sendChannels","readyState","sendChannel","createDataChannel","onopen","onclose","handleReceiveMessage","message","JSON","parse","handleReceiveChannelStatusChange","receiveChannel","receiveChannelCallback","channel","onmessage","ondatachannel","createOffer","sdpConstraints","sdp","setLocalDescription","addStream","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","disconnectSocket","socketToDisconnect","switchVideo","_video","stop","urls","disconnected","render","Object","values","statusText","color","padding","zIndex","position","right","cursor","width","marginTop","marginRight","margin","borderRadius","backgroundColor","paddingLeft","uid","send","stringify"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\r\n\r\nimport io from 'socket.io-client';\r\nimport './VideoCall.css';\r\nimport Video from './Video';\r\nimport Videos from './Videos';\r\nimport Draggable from './Draggable';\r\nimport Chat from './Chat'; \r\nimport { CgCloseO } from 'react-icons/cg';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { MdPeople } from 'react-icons/md';\r\nimport _ from 'lodash';\r\n \r\n\r\nexport class MainVideo extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n      this.state = {\r\n        localStream: null,    // used to hold local stream object to avoid recreating the stream everytime a new offer comes\r\n        remoteStream: null,    // used to hold remote stream object that is displayed in the main screen\r\n  \r\n        remoteStreams: [],    // holds all Video Streams (all remote streams)\r\n        peerConnections: {},  // holds all Peer Connections\r\n        selectedVideo: null,\r\n  \r\n        status: 'Please wait...',\r\n  \r\n        pc_config: {\r\n          \"iceServers\": [\r\n            {\r\n              urls : 'stun:stun.l.google.com:19302'\r\n            }\r\n          ]\r\n        },\r\n  \r\n        sdpConstraints: {\r\n          'mandatory': {\r\n              'OfferToReceiveAudio': true,\r\n              'OfferToReceiveVideo': true\r\n          }\r\n        },\r\n  \r\n        messages: [],\r\n        sendChannels: [],\r\n        disconnected: false,\r\n      }\r\n  \r\n      // DONT FORGET TO CHANGE TO YOUR URL\r\n      this.serviceIP = 'http://localhost:9150/webrtcPeer'\r\n  \r\n      // https://reactjs.org/docs/refs-and-the-dom.html\r\n      // this.localVideoref = React.createRef()\r\n      // this.remoteVideoref = React.createRef()\r\n  \r\n      this.socket = null\r\n      // this.candidates = []\r\n    }\r\n  \r\n    getLocalStream = () => {\r\n      // called when getUserMedia() successfully returns - see below\r\n      // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\r\n      const success = (stream) => {\r\n        window.localStream = stream\r\n        // this.localVideoref.current.srcObject = stream\r\n        // this.pc.addStream(stream);\r\n        this.setState({\r\n          localStream: stream\r\n        })\r\n  \r\n        this.whoisOnline()\r\n      }\r\n  \r\n      // called when getUserMedia() fails - see below\r\n      const failure = (e) => {\r\n        console.log('getUserMedia Error: ', e)\r\n      }\r\n  \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n      // see the above link for more constraint options\r\n      const constraints = {\r\n        audio: true,\r\n        video: true,\r\n        // video: {\r\n        //   width: 1280,\r\n        //   height: 720\r\n        // },\r\n        // video: {\r\n        //   width: { min: 1280 },\r\n        // }\r\n        options: {\r\n          mirror: true,\r\n        }\r\n      }\r\n  \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n      navigator.mediaDevices.getUserMedia(constraints)\r\n        .then(success)\r\n        .catch(failure)\r\n    }\r\n  \r\n    whoisOnline = () => {\r\n      // let all peers know I am joining\r\n      this.sendToPeer('onlinePeers', null, {local: this.socket.id})\r\n    }\r\n  \r\n    sendToPeer = (messageType, payload, socketID) => {\r\n      this.socket.emit(messageType, {\r\n        socketID,\r\n        payload\r\n      })\r\n    }\r\n  \r\n    createPeerConnection = (socketID, callback) => {\r\n  \r\n      try {\r\n        let pc = new RTCPeerConnection(this.state.pc_config)\r\n  \r\n        // add pc to peerConnections object\r\n        const peerConnections = { ...this.state.peerConnections, [socketID]: pc }\r\n        this.setState({\r\n          peerConnections\r\n        })\r\n  \r\n        pc.onicecandidate = (e) => {\r\n          if (e.candidate) {\r\n            this.sendToPeer('candidate', e.candidate, {\r\n              local: this.socket.id,\r\n              remote: socketID\r\n            })\r\n          }\r\n        }\r\n  \r\n        pc.oniceconnectionstatechange = (e) => {\r\n          // if (pc.iceConnectionState === 'disconnected') {\r\n          //   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\r\n  \r\n          //   this.setState({\r\n          //     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\r\n          //   })\r\n          // }\r\n  \r\n        }\r\n  \r\n        pc.ontrack = (e) => {\r\n          let _remoteStream = null\r\n          let remoteStreams = this.state.remoteStreams\r\n          let remoteVideo = {}\r\n  \r\n  \r\n          // 1. check if stream already exists in remoteStreams\r\n          const rVideos = this.state.remoteStreams.filter(stream => stream.id === socketID)\r\n  \r\n          // 2. if it does exist then add track\r\n          if (rVideos.length) {\r\n            _remoteStream = rVideos[0].stream\r\n            _remoteStream.addTrack(e.track, _remoteStream)\r\n  \r\n            remoteVideo = {\r\n              ...rVideos[0],\r\n              stream: _remoteStream,\r\n            }\r\n            remoteStreams = this.state.remoteStreams.map(_remoteVideo => {\r\n              return _remoteVideo.id === remoteVideo.id && remoteVideo || _remoteVideo\r\n            })\r\n          } else {\r\n            // 3. if not, then create new stream and add track\r\n            _remoteStream = new MediaStream()\r\n            _remoteStream.addTrack(e.track, _remoteStream)\r\n  \r\n            remoteVideo = {\r\n              id: socketID.code,\r\n              name: socketID.user,\r\n              stream: _remoteStream,\r\n            }\r\n            remoteStreams = [...this.state.remoteStreams, remoteVideo]\r\n          }\r\n  \r\n          // const remoteVideo = {\r\n          //   id: socketID,\r\n          //   name: socketID,\r\n          //   stream: e.streams[0]\r\n          // }\r\n  \r\n          this.setState(prevState => {\r\n  \r\n            // If we already have a stream in display let it stay the same, otherwise use the latest stream\r\n            // const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: e.streams[0] }\r\n            const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: _remoteStream }\r\n  \r\n            // get currently selected video\r\n            let selectedVideo = prevState.remoteStreams.filter(stream => stream.id === prevState.selectedVideo.id)\r\n            // if the video is still in the list, then do nothing, otherwise set to new video stream\r\n            selectedVideo = selectedVideo.length ? {} : { selectedVideo: remoteVideo }\r\n  \r\n            return {\r\n              // selectedVideo: remoteVideo,\r\n              ...selectedVideo,\r\n              // remoteStream: e.streams[0],\r\n              ...remoteStream,\r\n              remoteStreams, //: [...prevState.remoteStreams, remoteVideo]\r\n            }\r\n          })\r\n        }\r\n  \r\n        pc.close = () => {\r\n          // alert('GONE')\r\n          console.log(\"pc closed\");\r\n        }\r\n  \r\n        if (this.state.localStream)\r\n          // pc.addStream(this.state.localStream)\r\n  \r\n          this.state.localStream.getTracks().forEach(track => {\r\n            pc.addTrack(track, this.state.localStream)\r\n          })\r\n  \r\n        // return pc\r\n        callback(pc)\r\n  \r\n      } catch(e) {\r\n        console.log('Something went wrong! pc not created!!', e)\r\n        // return;\r\n        callback(null)\r\n      }\r\n    }\r\n  \r\n    componentDidMount = () => {\r\n  \r\n      this.socket = io.connect(\r\n        this.serviceIP,\r\n        {\r\n          path: '/io/webrtc',\r\n          query: {\r\n            room: window.location.pathname,\r\n          }\r\n        }\r\n      )\r\n  \r\n      this.socket.on('connection-success', data => {\r\n  \r\n        this.getLocalStream()\r\n  \r\n        // console.log(data.success)\r\n        const status = data.peerCount > 1 ? <MdPeople>${data.peerCount}</MdPeople> : 'Waiting for other peers to connect'\r\n  \r\n        this.setState({\r\n          status: status,\r\n          messages: data.messages\r\n        })\r\n      })\r\n  \r\n      this.socket.on('joined-peers', data => {\r\n  \r\n        this.setState({\r\n          status: data.peerCount > 1 ? <MdPeople>${data.peerCount}</MdPeople>  : 'Waiting for other peers to connect'\r\n        })\r\n      })\r\n      //************ ************//\r\n      this.socket.on('peer-disconnected', data => {\r\n        try {\r\n            // close peer-connection with this peer\r\n        this.state.peerConnections[data.socketID].close()\r\n  \r\n        // get and stop remote audio and video tracks of the disconnected peer\r\n        const rVideo = this.state.remoteStreams.filter(stream => stream.id === data.socketID)\r\n        rVideo && this.stopTracks(rVideo[0].stream)\r\n        }\r\n        catch (err) {\r\n          console.error(err)\r\n        }\r\n        // filter out the disconnected peer stream\r\n        const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== data.socketID)\r\n  \r\n        this.setState(prevState => {\r\n          // check if disconnected peer is the selected video and if there still connected peers, then select the first\r\n          const selectedVideo = prevState.selectedVideo.id === data.socketID && remoteStreams.length ? { selectedVideo: remoteStreams[0] } : null\r\n  \r\n          return {\r\n            // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\r\n            remoteStreams,\r\n            ...selectedVideo,\r\n            status: data.peerCount > 1 ? `Number of matches to ${window.location.pathname}: ${data.peerCount}` : 'Waiting for your friends to connect'\r\n          }\r\n          }\r\n        )\r\n      })\r\n  \r\n      // this.socket.on('offerOrAnswer', (sdp) => {\r\n  \r\n      //   this.textref.value = JSON.stringify(sdp)\r\n  \r\n      //   // set sdp as remote description\r\n      //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\r\n      // })\r\n  \r\n      this.socket.on('online-peer', socketID => {\r\n        const {store} = this.props;\r\n        const me = store.getCurrentUser();\r\n        // const meObj = JSON.stringify(me); \r\n        const email = _.get(me, 'email');\r\n        const name   = email.substring(0, email.lastIndexOf(\"@\"));\r\n        // console.log('connected peers ...', socketID)\r\n  \r\n        // create and send offer to the peer (data.socketID)\r\n        // 1. Create new pc\r\n        this.createPeerConnection(socketID, pc => {\r\n          // 2. Create Offer\r\n          if (pc) {\r\n        \r\n            // Send Channel\r\n            const handleSendChannelStatusChange = (event) => {\r\n              console.log('send channel status: ' + this.state.sendChannels[0].readyState)\r\n            }\r\n  \r\n            const sendChannel = pc.createDataChannel('sendChannel')\r\n            sendChannel.onopen = handleSendChannelStatusChange\r\n            sendChannel.onclose = handleSendChannelStatusChange\r\n          \r\n            this.setState(prevState => {\r\n              return {\r\n                sendChannels: [...prevState.sendChannels, sendChannel]\r\n              }\r\n            })\r\n  \r\n  \r\n            // Receive Channels\r\n            const handleReceiveMessage = (event) => {\r\n              const message = JSON.parse(event.data)\r\n              // console.log(message)\r\n              this.setState(prevState => {\r\n                return {\r\n                  messages: [...prevState.messages, message]\r\n                }\r\n              })\r\n            }\r\n  \r\n            const handleReceiveChannelStatusChange = (event) => {\r\n              if (this.receiveChannel) {\r\n                console.log(\"receive channel's status has changed to \" + this.receiveChannel.readyState);\r\n              }\r\n            }\r\n  \r\n            const receiveChannelCallback = (event) => {\r\n              const receiveChannel = event.channel\r\n              receiveChannel.onmessage = handleReceiveMessage\r\n              receiveChannel.onopen = handleReceiveChannelStatusChange\r\n              receiveChannel.onclose = handleReceiveChannelStatusChange\r\n            }\r\n  \r\n            pc.ondatachannel = receiveChannelCallback\r\n  \r\n  \r\n            pc.createOffer(this.state.sdpConstraints)\r\n              .then(sdp => {\r\n                pc.setLocalDescription(sdp)\r\n                // console.log(meObj);\r\n                this.sendToPeer('offer', sdp, {\r\n                  local:{\r\n                    code: this.socket.id,\r\n                    user: name\r\n                  },\r\n                  remote: socketID,\r\n                })\r\n              })\r\n          }\r\n        })\r\n      })\r\n  \r\n      this.socket.on('offer', data => {\r\n        this.createPeerConnection(data.socketID, pc => {\r\n          pc.addStream(this.state.localStream)\r\n  \r\n          // Send Channel\r\n          const handleSendChannelStatusChange = (event) => {\r\n            console.log('send channel status: ' + this.state.sendChannels[0].readyState)\r\n          }\r\n  \r\n          const sendChannel = pc.createDataChannel('sendChannel')\r\n          sendChannel.onopen = handleSendChannelStatusChange\r\n          sendChannel.onclose = handleSendChannelStatusChange\r\n          \r\n          this.setState(prevState => {\r\n            return {\r\n              sendChannels: [...prevState.sendChannels, sendChannel]\r\n            }\r\n          })\r\n  \r\n          // Receive Channels\r\n          const handleReceiveMessage = (event) => {\r\n            const message = JSON.parse(event.data)\r\n            // console.log(message)\r\n            this.setState(prevState => {\r\n              return {\r\n                messages: [...prevState.messages, message]\r\n              }\r\n            })\r\n          }\r\n  \r\n          const handleReceiveChannelStatusChange = (event) => {\r\n            if (this.receiveChannel) {\r\n              console.log(\"receive channel's status has changed to \" + this.receiveChannel.readyState);\r\n            }\r\n          }\r\n  \r\n          const receiveChannelCallback = (event) => {\r\n            const receiveChannel = event.channel\r\n            receiveChannel.onmessage = handleReceiveMessage\r\n            receiveChannel.onopen = handleReceiveChannelStatusChange\r\n            receiveChannel.onclose = handleReceiveChannelStatusChange\r\n          }\r\n  \r\n          pc.ondatachannel = receiveChannelCallback\r\n  \r\n          pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\r\n            // 2. Create Answer\r\n            pc.createAnswer(this.state.sdpConstraints)\r\n              .then(sdp => {\r\n                pc.setLocalDescription(sdp)\r\n  \r\n                this.sendToPeer('answer', sdp, {\r\n                  local: this.socket.id,\r\n                  remote: data.socketID,\r\n                })\r\n              })\r\n          })\r\n        })\r\n      })\r\n  \r\n      this.socket.on('answer', data => {\r\n        // get remote's peerConnection\r\n        const pc = this.state.peerConnections[data.socketID]\r\n        // console.log(data.sdp)\r\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(()=>{})\r\n      })\r\n  \r\n      this.socket.on('candidate', (data) => {\r\n        // get remote's peerConnection\r\n        const pc = this.state.peerConnections[data.socketID]\r\n  \r\n        if (pc)\r\n          pc.addIceCandidate(new RTCIceCandidate(data.candidate))\r\n      })\r\n  \r\n      // const pc_config = null\r\n  \r\n      // const pc_config = {\r\n      //   \"iceServers\": [\r\n      //     // {\r\n      //     //   urls: 'stun:[STUN_IP]:[PORT]',\r\n      //     //   'credentials': '[YOR CREDENTIALS]',\r\n      //     //   'username': '[USERNAME]'\r\n      //     // },\r\n      //     {\r\n      //       urls : 'stun:stun.l.google.com:19302'\r\n      //     }\r\n      //   ]\r\n      // }\r\n  \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\r\n      // create an instance of RTCPeerConnection\r\n      // this.pc = new RTCPeerConnection(this.state.pc_config)\r\n  \r\n      // triggered when a new candidate is returned\r\n      // this.pc.onicecandidate = (e) => {\r\n      //   // send the candidates to the remote peer\r\n      //   // see addCandidate below to be triggered on the remote peer\r\n      //   if (e.candidate) {\r\n      //     // console.log(JSON.stringify(e.candidate))\r\n      //     this.sendToPeer('candidate', e.candidate)\r\n      //   }\r\n      // }\r\n  \r\n      // triggered when there is a change in connection state\r\n      // this.pc.oniceconnectionstatechange = (e) => {\r\n      //   console.log(e)\r\n      // }\r\n  \r\n      // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\r\n      // this.pc.onaddstream = (e) => {\r\n      //   this.remoteVideoref.current.srcObject = e.stream\r\n      // }\r\n  \r\n      // this.pc.ontrack = (e) => {\r\n      //   debugger\r\n      //   // this.remoteVideoref.current.srcObject = e.streams[0]\r\n  \r\n      //   this.setState({\r\n      //     remoteStream: e.streams[0]\r\n      //   })\r\n      // }\r\n  \r\n    }\r\n  \r\n    // ************************************* //\r\n    // NOT REQUIRED\r\n    // ************************************* //\r\n    disconnectSocket = (socketToDisconnect) => {\r\n      this.sendToPeer('socket-to-disconnect', null, {\r\n        local: this.socket.id,\r\n        remote: socketToDisconnect\r\n      })\r\n    }\r\n  \r\n    switchVideo = (_video) => {\r\n      // console.log(_video)\r\n      this.setState({\r\n        selectedVideo: _video\r\n      })\r\n    }\r\n  \r\n    // ************************************* //\r\n    // ************************************* //\r\n\r\n    stopTracks = (stream) => {\r\n      stream.getTracks().forEach(track => track.stop())\r\n    }\r\n        \r\n  \r\n    render() {\r\n      const {\r\n        status,\r\n        messages,\r\n        disconnected,\r\n        localStream,\r\n        peerConnections,\r\n        remoteStreams,\r\n      } = this.state\r\n      const {store} = this.props;\r\n      const me = store.getCurrentUser();\r\n      const name = _.get(me, 'name');\r\n      // if(disconnected || !me){\r\n      //   return (\r\n      //     <Redirect to=\"/page3\" />\r\n      //   )\r\n      // } \r\n      if (disconnected) {\r\n        // disconnect socket\r\n        this.socket.close()\r\n        // stop local audio & video tracks\r\n        this.stopTracks(localStream)\r\n  \r\n        // stop all remote audio & video tracks\r\n        remoteStreams.forEach(rVideo => this.stopTracks(rVideo.stream))\r\n  \r\n        // stop all remote peerconnections\r\n        peerConnections && Object.values(peerConnections).forEach(pc => pc.close())\r\n  \r\n        return (\r\n          <Redirect to=\"/page3\" />\r\n        )\r\n      }\r\n  \r\n      const statusText = <div style={{ color: 'rgba(199, 36, 199, 0.9)', padding: 5 }}>{status}</div>\r\n  \r\n      return (\r\n        <div>\r\n        <Draggable style={{\r\n          zIndex: 101,\r\n          position: 'absolute',\r\n          right: 0,\r\n          cursor: 'move',\r\n        }}>\r\n          <Video\r\n            videoType='localVideo'\r\n            videoStyles={{\r\n              width: 200,\r\n              marginTop: '-3.5rem',\r\n              marginRight: '.5rem',\r\n            }}\r\n            frameStyle={{\r\n              width: 200,\r\n              margin: 5,\r\n              borderRadius: '.2rem',\r\n              backgroundColor: 'rgba(0,0,0,0.9)',\r\n            }}\r\n            showMuteControls={true}\r\n            // ref={this.localVideoref}\r\n            videoStream={localStream}\r\n            autoPlay muted>\r\n          </Video>\r\n        </Draggable>\r\n        <br />\r\n          <div style={{\r\n            zIndex: 3,\r\n            position: 'absolute',\r\n            marginTop: '-4.2rem',\r\n            // margin: 10,\r\n            // backgroundColor: '#cdc4ff4f',\r\n            // padding: 10,\r\n            // borderRadius: 5,\r\n          }}>\r\n           \r\n            <i  onClick={(e) => {this.setState({disconnected: true})}} style={{cursor: 'pointer', paddingLeft: 15, color: 'red' }}><CgCloseO /></i>\r\n            <div style={{\r\n              backgroundColor: 'rgba(0, 0, 0, 0.07)',\r\n              padding: 10,\r\n              borderRadius: 5,\r\n            }}>{ statusText }</div>\r\n          </div>\r\n          <div>\r\n            <Videos\r\n              switchVideo={this.switchVideo}\r\n              remoteStreams={remoteStreams}\r\n              // videoStream={this.state.selectedVideo && this.state.selectedVideo.stream}\r\n            ></Videos>\r\n          </div>\r\n          <br />\r\n  \r\n          <Chat\r\n              user={{\r\n                uid: this.socket && this.socket.id || '',\r\n                name: name || 'ndsbug',\r\n            }}\r\n            messages={messages}\r\n            sendMessage={(message) => {\r\n              this.setState(prevState => {\r\n                return {messages: [...prevState.messages, message]}\r\n              })\r\n              this.state.sendChannels.map(sendChannel => {\r\n                sendChannel.readyState === 'open' && sendChannel.send(JSON.stringify(message))\r\n              })\r\n              this.sendToPeer('new-message', JSON.stringify(message), {local: this.socket.id})\r\n            }}\r\n          />\r\n  \r\n          {/* <div style={{zIndex: 1, position: 'fixed'}} >\r\n            <button onClick={this.createOffer}>Offer</button>\r\n            <button onClick={this.createAnswer}>Answer</button>\r\n            <br />\r\n            <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\r\n          </div> */}\r\n          {/* <br />\r\n          <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\r\n          <button onClick={this.addCandidate}>Add Candidate</button> */}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  export default MainVideo"]},"metadata":{},"sourceType":"module"}