{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\ContentChat.js\";\nimport React, { Component } from 'react';\nimport Sidebar from './Sidebar';\nimport { MESSAGE_SENT, TYPING, COMMUNITY_CHAT, MESSAGE_RECIEVED, PRIVATE_MESSAGE, USER_CONNECTED, USER_DISCONNECTED } from '../Events';\nimport ChatHeading from \"../messages/ChatHeading\";\nimport Messages from \"../messages/Messages\";\nimport MessageInput from \"../messages/MessageInput\";\nexport default class ContentChat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendOpenPrivateMessage = reciever => {\n      const {\n        socket,\n        user\n      } = this.props;\n      const {\n        activeChat\n      } = this.state;\n      socket.emit(PRIVATE_MESSAGE, {\n        reciever,\n        sender: user.name,\n        activeChat\n      });\n    };\n\n    this.resetChat = chat => {\n      return this.addChat(chat, true);\n    };\n\n    this.addChat = (chat, reset = false) => {\n      const {\n        socket\n      } = this.props;\n      const {\n        chats\n      } = this.state;\n      const newChats = reset ? [chat] : [...chats, chat];\n      this.setState({\n        chats: newChats,\n        activeChat: reset ? chat : this.state.activeChat\n      });\n      const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`;\n      const typingEvent = `${TYPING}-${chat.id}`;\n      socket.on(typingEvent, this.updateTypingInChat(chat.id));\n      socket.on(messageEvent, this.addMessageToChat(chat.id));\n    };\n\n    this.addMessageToChat = chatId => {\n      return message => {\n        const {\n          chats\n        } = this.state;\n        let newChats = chats.map(chat => {\n          if (chat.id === chatId) chat.messages.push(message);\n          return chat;\n        });\n        this.setState({\n          chats: newChats\n        });\n      };\n    };\n\n    this.updateTypingInChat = chatId => {\n      return ({\n        isTyping,\n        user\n      }) => {\n        if (user !== this.props.user.name) {\n          const {\n            chats\n          } = this.state;\n          let newChats = chats.map(chat => {\n            if (chat.id === chatId) {\n              if (isTyping && !chat.typingUsers.includes(user)) {\n                chat.typingUsers.push(user);\n              } else if (!isTyping && chat.typingUsers.includes(user)) {\n                chat.typingUsers = chat.typingUsers.filter(u => u !== user);\n              }\n            }\n\n            return chat;\n          });\n          this.setState({\n            chats: newChats\n          });\n        }\n      };\n    };\n\n    this.sendMessage = (chatId, message) => {\n      const {\n        socket\n      } = this.props;\n      socket.emit(MESSAGE_SENT, {\n        chatId,\n        message\n      });\n    };\n\n    this.sendTyping = (chatId, isTyping) => {\n      const {\n        socket\n      } = this.props;\n      socket.emit(TYPING, {\n        chatId,\n        isTyping\n      });\n    };\n\n    this.setActiveChat = activeChat => {\n      this.setState({\n        activeChat\n      });\n    };\n\n    this.state = {\n      chats: [],\n      users: [],\n      activeChat: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      socket\n    } = this.props;\n    this.initSocket(socket);\n  }\n\n  componentWillMount() {\n    const {\n      socket\n    } = this.props;\n    socket.off(PRIVATE_MESSAGE);\n    socket.off(USER_DISCONNECTED);\n    socket.off(USER_CONNECTED);\n  }\n\n  initSocket(socket) {\n    socket.emit(COMMUNITY_CHAT, this.resetChat);\n    socket.on(PRIVATE_MESSAGE, this.addChat);\n    socket.on('connect', () => {\n      socket.emit(COMMUNITY_CHAT, this.resetChat);\n    });\n    socket.on(USER_CONNECTED, users => {\n      this.setState({\n        users: values(users)\n      });\n    });\n    socket.on(USER_DISCONNECTED, users => {\n      this.setState({\n        users: values(users)\n      });\n    });\n  }\n\n  render() {\n    const {\n      user,\n      logout\n    } = this.props;\n    const {\n      chats,\n      activeChat,\n      users\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      logout: logout,\n      chats: chats,\n      user: user,\n      activeChat: activeChat,\n      setActiveChat: this.setActiveChat,\n      onSendPrivateMessage: this.sendOpenPrivateMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, activeChat !== null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_room\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChatHeading, {\n      name: activeChat.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Messages, {\n      messages: activeChat.messages,\n      user: user,\n      typingUsers: activeChat.typingUsers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(MessageInput, {\n      sendMessage: message => {\n        this.sendMessage(activeChat.id, message);\n      },\n      sendTyping: isTyping => {\n        this.sendTyping(activeChat.id, isTyping);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-room-choose\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 33\n      }\n    }, \"Choose a chat to start chat\"))));\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/ContentChat.js"],"names":["React","Component","Sidebar","MESSAGE_SENT","TYPING","COMMUNITY_CHAT","MESSAGE_RECIEVED","PRIVATE_MESSAGE","USER_CONNECTED","USER_DISCONNECTED","ChatHeading","Messages","MessageInput","ContentChat","constructor","props","sendOpenPrivateMessage","reciever","socket","user","activeChat","state","emit","sender","name","resetChat","chat","addChat","reset","chats","newChats","setState","messageEvent","id","typingEvent","on","updateTypingInChat","addMessageToChat","chatId","message","map","messages","push","isTyping","typingUsers","includes","filter","u","sendMessage","sendTyping","setActiveChat","users","componentDidMount","initSocket","componentWillMount","off","values","render","logout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,YAAT,EAAuBC,MAAvB,EAA+BC,cAA/B,EAA+CC,gBAA/C,EAAiEC,eAAjE,EACQC,cADR,EACwBC,iBADxB,QACiD,WADjD;AAEA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,eAAe,MAAMC,WAAN,SAA0BZ,SAA1B,CAAoC;AAC/Ca,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAoCfC,sBApCe,GAoCWC,QAAD,IAAc;AACnC,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAmB,KAAKJ,KAA9B;AACA,YAAM;AAAEK,QAAAA;AAAF,UAAiB,KAAKC,KAA5B;AACAH,MAAAA,MAAM,CAACI,IAAP,CAAYf,eAAZ,EAA6B;AAACU,QAAAA,QAAD;AAAWM,QAAAA,MAAM,EAACJ,IAAI,CAACK,IAAvB;AAA6BJ,QAAAA;AAA7B,OAA7B;AACH,KAxCc;;AAAA,SA0CjBK,SA1CiB,GA0CJC,IAAD,IAAQ;AAChB,aAAO,KAAKC,OAAL,CAAaD,IAAb,EAAmB,IAAnB,CAAP;AACH,KA5CgB;;AAAA,SA8CjBC,OA9CiB,GA8CP,CAACD,IAAD,EAAOE,KAAK,GAAG,KAAf,KAAuB;AAC7B,YAAM;AAAEV,QAAAA;AAAF,UAAa,KAAKH,KAAxB;AACA,YAAM;AAAEc,QAAAA;AAAF,UAAY,KAAKR,KAAvB;AAEA,YAAMS,QAAQ,GAAGF,KAAK,GAAG,CAACF,IAAD,CAAH,GAAY,CAAC,GAAGG,KAAJ,EAAWH,IAAX,CAAlC;AACA,WAAKK,QAAL,CAAc;AAACF,QAAAA,KAAK,EAACC,QAAP;AAAiBV,QAAAA,UAAU,EAACQ,KAAK,GAAGF,IAAH,GAAU,KAAKL,KAAL,CAAWD;AAAtD,OAAd;AAEA,YAAMY,YAAY,GAAI,GAAE1B,gBAAiB,IAAGoB,IAAI,CAACO,EAAG,EAApD;AACA,YAAMC,WAAW,GAAI,GAAE9B,MAAO,IAAGsB,IAAI,CAACO,EAAG,EAAzC;AAEAf,MAAAA,MAAM,CAACiB,EAAP,CAAUD,WAAV,EAAuB,KAAKE,kBAAL,CAAwBV,IAAI,CAACO,EAA7B,CAAvB;AACAf,MAAAA,MAAM,CAACiB,EAAP,CAAUH,YAAV,EAAwB,KAAKK,gBAAL,CAAsBX,IAAI,CAACO,EAA3B,CAAxB;AACH,KA1DgB;;AAAA,SA4DjBI,gBA5DiB,GA4DGC,MAAD,IAAU;AACzB,aAAOC,OAAO,IAAI;AACd,cAAM;AAAEV,UAAAA;AAAF,YAAY,KAAKR,KAAvB;AACA,YAAIS,QAAQ,GAAGD,KAAK,CAACW,GAAN,CAAWd,IAAD,IAAQ;AAC7B,cAAGA,IAAI,CAACO,EAAL,KAAYK,MAAf,EACIZ,IAAI,CAACe,QAAL,CAAcC,IAAd,CAAmBH,OAAnB;AACJ,iBAAOb,IAAP;AACH,SAJc,CAAf;AAMA,aAAKK,QAAL,CAAc;AAACF,UAAAA,KAAK,EAACC;AAAP,SAAd;AACH,OATD;AAUH,KAvEgB;;AAAA,SA0EjBM,kBA1EiB,GA0EKE,MAAD,IAAW;AACpC,aAAO,CAAC;AAACK,QAAAA,QAAD;AAAWxB,QAAAA;AAAX,OAAD,KAAoB;AAC1B,YAAGA,IAAI,KAAK,KAAKJ,KAAL,CAAWI,IAAX,CAAgBK,IAA5B,EAAiC;AAEhC,gBAAM;AAAEK,YAAAA;AAAF,cAAY,KAAKR,KAAvB;AAEA,cAAIS,QAAQ,GAAGD,KAAK,CAACW,GAAN,CAAWd,IAAD,IAAQ;AAChC,gBAAGA,IAAI,CAACO,EAAL,KAAYK,MAAf,EAAsB;AACrB,kBAAGK,QAAQ,IAAI,CAACjB,IAAI,CAACkB,WAAL,CAAiBC,QAAjB,CAA0B1B,IAA1B,CAAhB,EAAgD;AAC/CO,gBAAAA,IAAI,CAACkB,WAAL,CAAiBF,IAAjB,CAAsBvB,IAAtB;AACA,eAFD,MAEM,IAAG,CAACwB,QAAD,IAAajB,IAAI,CAACkB,WAAL,CAAiBC,QAAjB,CAA0B1B,IAA1B,CAAhB,EAAgD;AACrDO,gBAAAA,IAAI,CAACkB,WAAL,GAAmBlB,IAAI,CAACkB,WAAL,CAAiBE,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,KAAK5B,IAAnC,CAAnB;AACA;AACD;;AACD,mBAAOO,IAAP;AACA,WATc,CAAf;AAUA,eAAKK,QAAL,CAAc;AAACF,YAAAA,KAAK,EAACC;AAAP,WAAd;AACA;AACD,OAjBD;AAkBA,KA7FqB;;AAAA,SA+FjBkB,WA/FiB,GA+FH,CAACV,MAAD,EAASC,OAAT,KAAmB;AAC7B,YAAM;AAAErB,QAAAA;AAAF,UAAa,KAAKH,KAAxB;AACAG,MAAAA,MAAM,CAACI,IAAP,CAAYnB,YAAZ,EAA0B;AAACmC,QAAAA,MAAD;AAASC,QAAAA;AAAT,OAA1B;AACH,KAlGgB;;AAAA,SAoGjBU,UApGiB,GAoGJ,CAACX,MAAD,EAASK,QAAT,KAAoB;AAC7B,YAAM;AAAEzB,QAAAA;AAAF,UAAa,KAAKH,KAAxB;AACAG,MAAAA,MAAM,CAACI,IAAP,CAAYlB,MAAZ,EAAoB;AAACkC,QAAAA,MAAD;AAASK,QAAAA;AAAT,OAApB;AACH,KAvGgB;;AAAA,SAyGjBO,aAzGiB,GAyGA9B,UAAD,IAAc;AAC1B,WAAKW,QAAL,CAAc;AAACX,QAAAA;AAAD,OAAd;AACH,KA3GgB;;AAGf,SAAKC,KAAL,GAAa;AACTQ,MAAAA,KAAK,EAAC,EADG;AAETsB,MAAAA,KAAK,EAAC,EAFG;AAGT/B,MAAAA,UAAU,EAAC;AAHF,KAAb;AAKD;;AAEDgC,EAAAA,iBAAiB,GAAG;AACd,UAAM;AAAElC,MAAAA;AAAF,QAAa,KAAKH,KAAxB;AACA,SAAKsC,UAAL,CAAgBnC,MAAhB;AACL;;AACDoC,EAAAA,kBAAkB,GAAE;AACd,UAAM;AAAEpC,MAAAA;AAAF,QAAa,KAAKH,KAAxB;AACAG,IAAAA,MAAM,CAACqC,GAAP,CAAYhD,eAAZ;AACAW,IAAAA,MAAM,CAACqC,GAAP,CAAY9C,iBAAZ;AACAS,IAAAA,MAAM,CAACqC,GAAP,CAAY/C,cAAZ;AACL;;AACC6C,EAAAA,UAAU,CAACnC,MAAD,EAAS;AACfA,IAAAA,MAAM,CAACI,IAAP,CAAYjB,cAAZ,EAA4B,KAAKoB,SAAjC;AACAP,IAAAA,MAAM,CAACiB,EAAP,CAAU5B,eAAV,EAA2B,KAAKoB,OAAhC;AACAT,IAAAA,MAAM,CAACiB,EAAP,CAAU,SAAV,EAAqB,MAAK;AACtBjB,MAAAA,MAAM,CAACI,IAAP,CAAYjB,cAAZ,EAA4B,KAAKoB,SAAjC;AACH,KAFD;AAGAP,IAAAA,MAAM,CAACiB,EAAP,CAAU3B,cAAV,EAA2B2C,KAAD,IAAW;AACjC,WAAKpB,QAAL,CAAc;AAAEoB,QAAAA,KAAK,EAAEK,MAAM,CAACL,KAAD;AAAf,OAAd;AACH,KAFD;AAGAjC,IAAAA,MAAM,CAACiB,EAAP,CAAU1B,iBAAV,EAA8B0C,KAAD,IAAW;AACpC,WAAKpB,QAAL,CAAc;AAAEoB,QAAAA,KAAK,EAACK,MAAM,CAACL,KAAD;AAAd,OAAd;AACH,KAFD;AAIH;;AA2ELM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEtC,MAAAA,IAAF;AAAQuC,MAAAA;AAAR,QAAmB,KAAK3C,KAA9B;AACA,UAAM;AAAEc,MAAAA,KAAF;AAAST,MAAAA,UAAT;AAAqB+B,MAAAA;AAArB,QAA+B,KAAK9B,KAA1C;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,OAAD;AACA,MAAA,MAAM,EAAIqC,MADV;AAEA,MAAA,KAAK,EAAI7B,KAFT;AAGA,MAAA,IAAI,EAAIV,IAHR;AAIA,MAAA,UAAU,EAAIC,UAJd;AAKA,MAAA,aAAa,EAAI,KAAK8B,aALtB;AAMA,MAAA,oBAAoB,EAAG,KAAKlC,sBAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eASI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQI,UAAU,KAAK,IAAf,gBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAEA,UAAU,CAACI,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,QAAD;AACI,MAAA,QAAQ,EAAGJ,UAAU,CAACqB,QAD1B;AAEI,MAAA,IAAI,EAAGtB,IAFX;AAGI,MAAA,WAAW,EAAGC,UAAU,CAACwB,WAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAOI,oBAAC,YAAD;AACI,MAAA,WAAW,EACNL,OAAD,IAAa;AACT,aAAKS,WAAL,CAAiB5B,UAAU,CAACa,EAA5B,EAAgCM,OAAhC;AACH,OAJT;AAMI,MAAA,UAAU,EACLI,QAAD,IAAc;AACV,aAAKM,UAAL,CAAgB7B,UAAU,CAACa,EAA3B,EAA+BU,QAA/B;AACH,OATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ,gBAsBI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,CAxBZ,CATJ,CADJ;AAyCH;;AAzJ8C","sourcesContent":["import React, { Component } from 'react'\r\nimport Sidebar from './Sidebar';\r\nimport { MESSAGE_SENT, TYPING, COMMUNITY_CHAT, MESSAGE_RECIEVED, PRIVATE_MESSAGE,\r\n        USER_CONNECTED, USER_DISCONNECTED } from '../Events';\r\nimport ChatHeading from \"../messages/ChatHeading\";\r\nimport Messages from \"../messages/Messages\";\r\nimport MessageInput from \"../messages/MessageInput\";\r\n\r\nexport default class ContentChat extends Component {\r\n    constructor(props) {\r\n        super(props);\t\r\n      \r\n        this.state = {\r\n            chats:[],\r\n            users:[],\r\n            activeChat:null\r\n        };\r\n      }\r\n  \r\n      componentDidMount() {\r\n            const { socket } = this.props\r\n            this.initSocket(socket)\r\n      }\r\n      componentWillMount(){\r\n            const { socket } = this.props\r\n            socket.off( PRIVATE_MESSAGE )\r\n            socket.off( USER_DISCONNECTED )\r\n            socket.off( USER_CONNECTED )\r\n      }\r\n        initSocket(socket) {\r\n            socket.emit(COMMUNITY_CHAT, this.resetChat)\r\n            socket.on(PRIVATE_MESSAGE, this.addChat)\r\n            socket.on('connect', () =>{\r\n                socket.emit(COMMUNITY_CHAT, this.resetChat)\r\n            })\r\n            socket.on(USER_CONNECTED, (users) => {\r\n                this.setState({ users: values(users) })\r\n            })\r\n            socket.on(USER_DISCONNECTED, (users) => {\r\n                this.setState({ users:values(users) }) \r\n            })\r\n\r\n        }\r\n                \r\n\r\n        sendOpenPrivateMessage = (reciever) => {\r\n            const { socket, user } = this.props\r\n            const { activeChat } = this.state\r\n            socket.emit(PRIVATE_MESSAGE, {reciever, sender:user.name, activeChat })\r\n        }\r\n     \r\n      resetChat = (chat)=>{\r\n          return this.addChat(chat, true)\r\n      }\r\n  \r\n      addChat = (chat, reset = false)=>{\r\n          const { socket } = this.props\r\n          const { chats } = this.state\r\n  \r\n          const newChats = reset ? [chat] : [...chats, chat]\r\n          this.setState({chats:newChats, activeChat:reset ? chat : this.state.activeChat})\r\n  \r\n          const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`\r\n          const typingEvent = `${TYPING}-${chat.id}`\r\n  \r\n          socket.on(typingEvent, this.updateTypingInChat(chat.id))\r\n          socket.on(messageEvent, this.addMessageToChat(chat.id))\r\n      }\r\n  \r\n      addMessageToChat = (chatId)=>{\r\n          return message => {\r\n              const { chats } = this.state\r\n              let newChats = chats.map((chat)=>{\r\n                  if(chat.id === chatId)\r\n                      chat.messages.push(message)\r\n                  return chat\r\n              })\r\n  \r\n              this.setState({chats:newChats})\r\n          }\r\n      }\r\n  \r\n     \r\n      updateTypingInChat = (chatId) =>{\r\n\t\treturn ({isTyping, user})=>{\r\n\t\t\tif(user !== this.props.user.name){\r\n\r\n\t\t\t\tconst { chats } = this.state\r\n\r\n\t\t\t\tlet newChats = chats.map((chat)=>{\r\n\t\t\t\t\tif(chat.id === chatId){\r\n\t\t\t\t\t\tif(isTyping && !chat.typingUsers.includes(user)){\r\n\t\t\t\t\t\t\tchat.typingUsers.push(user)\r\n\t\t\t\t\t\t}else if(!isTyping && chat.typingUsers.includes(user)){\r\n\t\t\t\t\t\t\tchat.typingUsers = chat.typingUsers.filter(u => u !== user)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn chat\r\n\t\t\t\t})\r\n\t\t\t\tthis.setState({chats:newChats})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  \r\n      sendMessage = (chatId, message)=>{\r\n          const { socket } = this.props\r\n          socket.emit(MESSAGE_SENT, {chatId, message} )\r\n      }\r\n  \r\n      sendTyping = (chatId, isTyping)=>{\r\n          const { socket } = this.props\r\n          socket.emit(TYPING, {chatId, isTyping})\r\n      }\r\n  \r\n      setActiveChat = (activeChat)=>{\r\n          this.setState({activeChat})\r\n      }\r\n    render() {\r\n        const { user, logout } = this.props\r\n        const { chats, activeChat, users } = this.state\r\n        return (\r\n            <div className=\"app3\">\r\n                <Sidebar\r\n                logout= { logout }\r\n                chats= { chats }\r\n                user= { user }\r\n                activeChat= { activeChat }\r\n                setActiveChat= { this.setActiveChat }\r\n                onSendPrivateMessage={ this.sendOpenPrivateMessage}\r\n                />\r\n                <div className=\"chat\">\r\n                    {\r\n                        activeChat !== null ? (\r\n                            <div className=\"chat_room\">\r\n                                <ChatHeading name={activeChat.name} />\r\n                                <Messages\r\n                                    messages= {activeChat.messages}\r\n                                    user= {user}\r\n                                    typingUsers= {activeChat.typingUsers}\r\n                                />\r\n                                <MessageInput\r\n                                    sendMessage= {\r\n                                        (message) => {\r\n                                            this.sendMessage(activeChat.id, message)\r\n                                        }\r\n                                    }\r\n                                    sendTyping= {\r\n                                        (isTyping) => {\r\n                                            this.sendTyping(activeChat.id, isTyping)\r\n                                        }\r\n                                    }\r\n                                    />\r\n\r\n                            </div>\r\n                        ) : <div className=\"chat-room-choose\">\r\n                                <h3>Choose a chat to start chat</h3>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}