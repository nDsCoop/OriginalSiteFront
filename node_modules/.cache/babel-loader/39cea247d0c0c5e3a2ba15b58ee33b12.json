{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nimport Service from './service';\nimport Realtime from './realtime';\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.service = new Service();\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = this.getUserFromLocalStorage();\n    this.token = this.getTokenFromLocalStorage();\n    this.users = new OrderedMap();\n    this.realtime = new Realtime(this);\n    this.search = {\n      users: new OrderedMap()\n    };\n  }\n\n  getUserTokenId() {\n    return _.get(this.token, '_id', null);\n  }\n\n  loadUserAvatar(user) {\n    return `https://api.adorable.io/avatars/100/${user._id}.png`;\n  }\n\n  startSearchUsers(q = \"\") {\n    this.search.users = this.search.users.clear(); //query to backend server and get list of users\n\n    const data = {\n      search: q\n    };\n    this.service.post('api/users/search', data).then(res => {\n      //list off users match\n      const users = _.get(res, 'data', []); // console.log(\"Get from server: \", users);\n\n\n      _.each(users, user => {\n        //cache to this.users\n        //add user to this.search.users\n        user.avatar = this.loadUserAvatar(user);\n        const userId = `${user._id}`;\n        this.users = this.users.set(userId, user);\n        this.search.users = this.search.users.set(userId, user);\n      });\n\n      this.update();\n    }).catch(err => {\n      console.log(\" searching error\", err);\n    });\n  }\n\n  setUserToken(accessToken) {\n    if (!accessToken) {\n      this.localStorage.removeItem('token');\n      this.token = null;\n      return;\n    }\n\n    this.token = accessToken;\n    localStorage.setItem('token', JSON.stringify(accessToken));\n  }\n\n  signOut() {\n    const userId = `${_.get(this.user, '_id', null)}`;\n    this.user = null;\n    localStorage.removeItem('me');\n    localStorage.removeItem('token');\n\n    if (userId) {\n      this.users = this.users.remove(userId);\n    }\n\n    this.update();\n  }\n\n  getTokenFromLocalStorage() {\n    if (this.token) {\n      return this.token;\n    }\n\n    let token = null;\n    const data = localStorage.getItem('token');\n\n    if (data) {\n      try {\n        token = JSON.parse(data);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    return token;\n  }\n\n  getUserFromLocalStorage() {\n    let user = null;\n    const data = localStorage.getItem('me');\n\n    try {\n      user = JSON.parse(data);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (user) {\n      //connect to backend server verify this user\n      const token = this.getTokenFromLocalStorage();\n\n      const tokenId = _.get(token, '_id');\n\n      const options = {\n        headers: {\n          authorization: tokenId\n        }\n      };\n      this.service.get('api/users/me', options).then(res => {\n        //user login with token id\n        const accessToken = res.data;\n\n        const user = _.get(accessToken, 'user');\n\n        this.setCurrentUser(user);\n        this.setUserToken(accessToken);\n      }).catch(err => {\n        this.signOut();\n      });\n    }\n\n    return user;\n  }\n\n  setCurrentUser(user) {\n    user.avatar = this.loadUserAvatar(user);\n    this.user = user;\n\n    if (user) {\n      localStorage.setItem('me', JSON.stringify(user)); //save to local store\n\n      const userId = `${user._id}`;\n      this.users = this.users.set(userId, user);\n    }\n\n    this.update();\n  }\n\n  login(email = null, password = null) {\n    const userEmail = _.toLower(email);\n\n    const user = {\n      email: userEmail,\n      password: password\n    };\n    console.log(\"Try login with\", user);\n    return new Promise((resolve, reject) => {\n      this.service.post('api/users/login', user).then(res => {\n        //that mean successful login\n        const accessToken = _.get(res, 'data');\n\n        const user = _.get(accessToken, 'user');\n\n        this.setCurrentUser(user);\n        this.setUserToken(accessToken);\n      }).catch(err => {\n        const message = _.get(err, 'res.data.err.message', 'Login Error');\n\n        return reject(message);\n      });\n    }); // const _this = this;\n    // return new Promise((resolve, reject) => {\n    //     const user = users.find((user) => user.email === userEmail);\n    //     if( user ) {\n    //         _this.setCurrentUser(user);\n    //     }\n    //     return user ? resolve(user) : reject(\"User not found!\")\n    // });\n  }\n\n  addUserToChannel(channelId, userId) {\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      channel.members = channel.members.set(userId, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  getSearchUsers() {\n    // const keyword = _.toLower(search);\n    // let searchItems = new OrderedMap();\n    // const currentUser =this.getCurrentUser();\n    // const currentUserId = _.get(currentUser, '_id');\n    // if(_.trim(search).length){\n    //    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n    // }\n    return this.search.users.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, \"_id\");\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId);\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    const user = this.getCurrentUser();\n    message.user = user;\n    this.messages = this.messages.set(`${id}`, message); //add new message to \n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      channel.lastMessage = _.get(message, 'body', '');\n      let channel = this.channels.get(channelId); //now i send this channel to the server\n\n      const obj = {\n        action: 'create_channel',\n        payload: channel\n      };\n      this.realtime.send(obj);\n      channel.messages = channel.messages.set(id, true);\n      channel.isNew = false;\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  removeMemberFromChannel(channel = null, user = null) {\n    if (!channel || !user) {\n      return;\n    }\n\n    const channelId = _.get(channel, '_id');\n\n    const userId = _.get(user, '_id');\n\n    channel.members = channel.members.remove(userId);\n    this.channels = this.channels.set(channelId, channel);\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = new OrderedMap();\n\n    if (channel) {\n      channel.messages.forEach((value, key) => {\n        const message = this.messages.get(key);\n        messages = messages.set(key, message);\n      });\n    }\n\n    return messages.valueSeq();\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.forEach((value, key) => {\n        const userId = `${key}`;\n        const user = this.users.get(userId);\n        console.log(\"User from Channel: \", user);\n        const loggedUser = this.getCurrentUser();\n\n        if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n          members = members.set(key, user);\n        }\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    this.channels = this.channels.sort((a, b) => b.created - a.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/store.js"],"names":["OrderedMap","_","Service","Realtime","Store","constructor","appComponent","app","service","messages","channels","activeChannelId","user","getUserFromLocalStorage","token","getTokenFromLocalStorage","users","realtime","search","getUserTokenId","get","loadUserAvatar","_id","startSearchUsers","q","clear","data","post","then","res","each","avatar","userId","set","update","catch","err","console","log","setUserToken","accessToken","localStorage","removeItem","setItem","JSON","stringify","signOut","remove","getItem","parse","tokenId","options","headers","authorization","setCurrentUser","login","email","password","userEmail","toLower","Promise","resolve","reject","message","addUserToChannel","channelId","channel","members","getSearchUsers","valueSeq","onCreateNewChannel","addChannel","setActiveChannelId","getCurrentUser","id","getActiveChannel","first","addMessage","lastMessage","obj","action","payload","send","isNew","removeMemberFromChannel","getMessages","getMessagesFromChannel","forEach","value","key","getMembersFromChannel","loggedUser","index","getChannels","sort","a","b","created","forceUpdate"],"mappings":"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","sourcesContent":["import { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\nimport Service from './service';\r\nimport Realtime from './realtime';\r\n\r\n\r\n\r\nexport default class Store {\r\n    constructor(appComponent){\r\n        this.app = appComponent;\r\n        this.service = new Service();\r\n        this.messages = new OrderedMap();\r\n        this.channels = new OrderedMap();\r\n        this.activeChannelId = null;\r\n\r\n        this.user = this.getUserFromLocalStorage();\r\n        this.token = this.getTokenFromLocalStorage();\r\n        this.users = new OrderedMap();\r\n\r\n        this.realtime = new Realtime(this);\r\n\r\n        this.search = {\r\n            users: new OrderedMap(),\r\n        }\r\n\r\n    }\r\n\r\n    getUserTokenId(){\r\n        return _.get(this.token, '_id', null);\r\n    }\r\n    loadUserAvatar(user){\r\n        return `https://api.adorable.io/avatars/100/${user._id}.png`\r\n    }\r\n    startSearchUsers(q = \"\"){\r\n        this.search.users = this.search.users.clear();\r\n        //query to backend server and get list of users\r\n        const data = {search : q};\r\n        \r\n        this.service.post('api/users/search', data).then((res) => {\r\n            //list off users match\r\n            const users = _.get(res, 'data', []);\r\n            // console.log(\"Get from server: \", users);\r\n            _.each(users, (user) => {\r\n               //cache to this.users\r\n               //add user to this.search.users\r\n               user.avatar = this.loadUserAvatar(user);\r\n               const userId = `${user._id}`;\r\n               this.users = this.users.set(userId, user);\r\n               this.search.users = this.search.users.set(userId, user);\r\n\r\n           });\r\n           this.update();\r\n\r\n        }).catch((err) => {\r\n            console.log(\" searching error\", err);\r\n        }); \r\n    }\r\n\r\n\r\n    setUserToken(accessToken){\r\n        if(!accessToken){\r\n            this.localStorage.removeItem('token');\r\n            this.token = null;\r\n            return;\r\n        }\r\n        this.token = accessToken;\r\n        localStorage.setItem('token', JSON.stringify(accessToken));\r\n    }\r\n    signOut(){\r\n        \r\n        const userId = `${_.get(this.user, '_id', null)}`;\r\n        this.user = null;\r\n        localStorage.removeItem('me');\r\n        localStorage.removeItem('token');\r\n        if(userId){\r\n            this.users = this.users.remove(userId);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    getTokenFromLocalStorage(){\r\n\r\n        if(this.token){\r\n            return this.token;\r\n        }\r\n\r\n        let token = null;\r\n        const data = localStorage.getItem('token');\r\n        if(data){\r\n            try{\r\n                token = JSON.parse(data);\r\n            }\r\n            catch (err){\r\n                console.log(err);\r\n            }\r\n            \r\n        }\r\n        return token;\r\n    }\r\n\r\n    getUserFromLocalStorage(){\r\n\r\n        let user = null;\r\n        const data = localStorage.getItem('me');\r\n         try {\r\n                user = JSON.parse(data);\r\n         }\r\n         catch(err) {\r\n             console.log(err);\r\n         }\r\n         if(user){\r\n            //connect to backend server verify this user\r\n            const token = this.getTokenFromLocalStorage();\r\n            const tokenId = _.get(token, '_id');\r\n            const options = {\r\n                headers: {\r\n                    authorization: tokenId,\r\n                }\r\n            }\r\n            \r\n            this.service.get('api/users/me', options).then((res) => {\r\n                //user login with token id\r\n                const accessToken = res.data;\r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n\r\n            }).catch(err => {\r\n                this.signOut();\r\n            });\r\n        }\r\n\r\n         return user;\r\n    }    \r\n        \r\n    \r\n    setCurrentUser(user){\r\n        user.avatar = this.loadUserAvatar(user);\r\n        this.user = user;\r\n        if(user){\r\n            localStorage.setItem('me', JSON.stringify(user));\r\n            //save to local store\r\n            const userId =`${user._id}`;\r\n            this.users = this.users.set(userId, user);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n\r\n    login(email = null, password = null){\r\n\r\n        const userEmail = _.toLower(email);\r\n        const user = {\r\n            email: userEmail,\r\n            password: password,\r\n        }\r\n        console.log(\"Try login with\", user);\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this.service.post('api/users/login', user).then((res) => {\r\n                //that mean successful login\r\n                const accessToken = _.get(res, 'data'); \r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n\r\n            }).catch((err) => {\r\n                \r\n                const message = _.get(err, 'res.data.err.message', 'Login Error');\r\n                return reject(message);\r\n            })\r\n        });\r\n        // const _this = this;\r\n        // return new Promise((resolve, reject) => {\r\n        //     const user = users.find((user) => user.email === userEmail);\r\n        //     if( user ) {\r\n        //         _this.setCurrentUser(user);\r\n        //     }\r\n        //     return user ? resolve(user) : reject(\"User not found!\")\r\n        // });\r\n    }\r\n\r\n    addUserToChannel(channelId, userId) {\r\n        const channel = this.channels.get(channelId);\r\n        if(channel) {\r\n            channel.members = channel.members.set(userId, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n    getSearchUsers(){\r\n        // const keyword = _.toLower(search);\r\n\r\n        // let searchItems = new OrderedMap();\r\n        // const currentUser =this.getCurrentUser();\r\n        // const currentUserId = _.get(currentUser, '_id');\r\n       \r\n        // if(_.trim(search).length){\r\n        //    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\r\n        // }\r\n\r\n        return this.search.users.valueSeq();\r\n    }\r\n\r\n    onCreateNewChannel(channel = {}){\r\n        const channelId = _.get(channel, \"_id\");\r\n        this.addChannel(channelId, channel );\r\n        this.setActiveChannelId(channelId);\r\n    \r\n    }\r\n\r\n    getCurrentUser(){\r\n        return this.user;\r\n    }\r\n\r\n    setActiveChannelId(id) {\r\n        this.activeChannelId = id;\r\n        this.update();\r\n    }\r\n    getActiveChannel(){\r\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\r\n        return channel;\r\n    }\r\n\r\n    addMessage(id, message = {}){\r\n\r\n        const user = this.getCurrentUser();\r\n        message.user = user;\r\n        this.messages = this.messages.set(`${id}`, message);\r\n        //add new message to \r\n        const channelId = _.get(message, 'channelId');\r\n        if(channelId){\r\n\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            let channel = this.channels.get(channelId);\r\n            //now i send this channel to the server\r\n            const obj = {\r\n                action: 'create_channel',\r\n                payload: channel,\r\n            }\r\n           this.realtime.send(obj);\r\n           \r\n            channel.messages = channel.messages.set(id, true);\r\n\r\n\r\n            channel.isNew = false;\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeMemberFromChannel( channel = null, user = null){\r\n        if(!channel || !user ){\r\n            return;\r\n        }\r\n        const channelId = _.get(channel, '_id')\r\n        const userId = _.get(user, '_id');\r\n        channel.members = channel.members.remove(userId);\r\n        this.channels = this.channels.set(channelId, channel);\r\n        this.update();\r\n    }\r\n\r\n    getMessages(){\r\n        return this.messages.valueSeq();\r\n    }\r\n    getMessagesFromChannel(channel){\r\n        let messages = new OrderedMap();\r\n\r\n        if(channel){\r\n            channel.messages.forEach((value, key) => {\r\n\r\n                const message = this.messages.get(key);\r\n                messages = messages.set( key, message);\r\n    \r\n            });\r\n        }\r\n        return messages.valueSeq();\r\n        \r\n    }\r\n\r\n    getMembersFromChannel(channel){\r\n        let members = new OrderedMap();\r\n        if(channel){\r\n            channel.members.forEach((value, key) => {\r\n\r\n                const userId = `${key}`\r\n                const user = this.users.get(userId);\r\n                console.log(\"User from Channel: \", user);\r\n                const loggedUser = this.getCurrentUser();\r\n                if( _.get(loggedUser, '_id') !== _.get(user, '_id')){\r\n                    members = members.set(key, user);\r\n                   \r\n                }\r\n            });\r\n               \r\n        }\r\n        return members.valueSeq();\r\n    }\r\n\r\n\r\n    addChannel(index, channel = {}){\r\n        this.channels = this.channels.set(`${index}`, channel);\r\n        this.update();\r\n    }\r\n\r\n    getChannels(){\r\n        this.channels = this.channels.sort((a, b) => b.created - a.created);\r\n        return this.channels.valueSeq();\r\n    }\r\n    update(){\r\n        this.app.forceUpdate();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}