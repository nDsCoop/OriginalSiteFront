{"ast":null,"code":"import _slicedToArray from\"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useCallback}from\"react\";import{Container,FormControl,Select,MenuItem,FormGroup,FormControlLabel,Box,Typography}from\"@material-ui/core\";import{GlobalContext}from\"../GlobalState\";export var useCheckDarkmode=function useCheckDarkmode(){var _useContext=useContext(GlobalContext),_useContext2=_slicedToArray(_useContext,2),dispatch=_useContext2[1];var setThemeSelectValue=useCallback(function(data){dispatch({type:\"setThemeSelectValue\",snippet:data});},[dispatch]);var checkDarkMode=function checkDarkMode(){var selectedTheme=localStorage.getItem(\"selectedTheme\");// we will check if system dark mode is enabled or not\n// const colorScheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\n// colorScheme.addEventListener(\"change\", e => {\n//   if (e.matches) {\n//     // if it matches we will set it to dark else default\n//     setThemeSelectValue(\"Dark\");\n//   } else {\n//     setThemeSelectValue(\"Default\");\n//   }\n// });\nif(selectedTheme){console.log(selectedTheme);setThemeSelectValue(selectedTheme);var date=new Date();var hrs=date.getHours();// if the theme is auto then only do it\nif(selectedTheme===\"Auto\"){if(hrs>=18||hrs<=6){setThemeSelectValue(\"Dark\");}else{setThemeSelectValue(\"Default\");}}}};return{checkDarkMode:checkDarkMode};};var SettingsPage=function SettingsPage(){var _useContext3=useContext(GlobalContext),_useContext4=_slicedToArray(_useContext3,2),themeSelectValue=_useContext4[0].themeSelectValue,dispatch=_useContext4[1];var setThemeSelectValue=useCallback(function(data){dispatch({type:\"setThemeSelectValue\",snippet:data});},[dispatch]);var handleThemeChange=function handleThemeChange(e){setThemeSelectValue(e.target.value);localStorage.setItem(\"selectedTheme\",e.target.value);};useEffect(function(){console.log(themeSelectValue);},[themeSelectValue]);var selectComp=/*#__PURE__*/React.createElement(Box,{m:1},/*#__PURE__*/React.createElement(Select,{value:themeSelectValue,onChange:handleThemeChange,displayEmpty:true,name:\"age\"},/*#__PURE__*/React.createElement(MenuItem,{value:\"Default\"},\"Default\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"Dark\"},\"Dark\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"Auto\"},\"Auto\")));return/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(Typography,{variant:\"h5\",align:\"center\",gutterBottom:true},\"Settings\"),/*#__PURE__*/React.createElement(FormControl,{component:\"fieldset\"},/*#__PURE__*/React.createElement(FormGroup,{row:true},/*#__PURE__*/React.createElement(FormControlLabel,{labelPlacement:\"start\",label:\"Select Theme \",value:\"top\",control:selectComp}))));};export default SettingsPage;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/sections/SettingsPage.js"],"names":["React","useContext","useEffect","useCallback","Container","FormControl","Select","MenuItem","FormGroup","FormControlLabel","Box","Typography","GlobalContext","useCheckDarkmode","dispatch","setThemeSelectValue","data","type","snippet","checkDarkMode","selectedTheme","localStorage","getItem","console","log","date","Date","hrs","getHours","SettingsPage","themeSelectValue","handleThemeChange","e","target","value","setItem","selectComp"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useCallback } from \"react\";\r\nimport {\r\n  Container,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  FormGroup,\r\n  FormControlLabel,\r\n  Box,\r\n  Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport { GlobalContext } from \"../GlobalState\";\r\n\r\nexport const useCheckDarkmode = () => {\r\n  const [, dispatch] = useContext(GlobalContext);\r\n  const setThemeSelectValue = useCallback(\r\n    data => {\r\n      dispatch({ type: \"setThemeSelectValue\", snippet: data });\r\n    },\r\n    [dispatch]\r\n  );\r\n  const checkDarkMode = () => {\r\n    const selectedTheme = localStorage.getItem(\"selectedTheme\");\r\n\r\n    // we will check if system dark mode is enabled or not\r\n\r\n    // const colorScheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n    // colorScheme.addEventListener(\"change\", e => {\r\n    //   if (e.matches) {\r\n    //     // if it matches we will set it to dark else default\r\n    //     setThemeSelectValue(\"Dark\");\r\n    //   } else {\r\n    //     setThemeSelectValue(\"Default\");\r\n    //   }\r\n    // });\r\n    if (selectedTheme) {\r\n      console.log(selectedTheme);\r\n      setThemeSelectValue(selectedTheme);\r\n\r\n      const date = new Date();\r\n      const hrs = date.getHours();\r\n\r\n      // if the theme is auto then only do it\r\n      if (selectedTheme === \"Auto\") {\r\n        if (hrs >= 18 || hrs <= 6) {\r\n          setThemeSelectValue(\"Dark\");\r\n        } else {\r\n          setThemeSelectValue(\"Default\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return { checkDarkMode };\r\n};\r\n\r\nconst SettingsPage = () => {\r\n  const [{ themeSelectValue }, dispatch] = useContext(GlobalContext);\r\n  const setThemeSelectValue = useCallback(\r\n    data => {\r\n      dispatch({ type: \"setThemeSelectValue\", snippet: data });\r\n    },\r\n    [dispatch]\r\n  );\r\n  const handleThemeChange = e => {\r\n    setThemeSelectValue(e.target.value);\r\n    localStorage.setItem(\"selectedTheme\", e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(themeSelectValue);\r\n  }, [themeSelectValue]);\r\n\r\n  const selectComp = (\r\n    <Box m={1}>\r\n      \r\n      <Select\r\n        value={themeSelectValue}\r\n        onChange={handleThemeChange}\r\n        displayEmpty\r\n        name=\"age\"\r\n      >\r\n        <MenuItem value=\"Default\">Default</MenuItem>\r\n        <MenuItem value=\"Dark\">Dark</MenuItem>\r\n        <MenuItem value=\"Auto\">Auto</MenuItem>\r\n      </Select>\r\n    </Box>\r\n  );\r\n  return (\r\n    <Container>\r\n      <br />\r\n      <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n        Settings\r\n      </Typography>\r\n      <FormControl component=\"fieldset\">\r\n        <FormGroup row>\r\n          <FormControlLabel\r\n            labelPlacement=\"start\"\r\n            label=\"Select Theme \"\r\n            value=\"top\"\r\n            control={selectComp}\r\n          />\r\n        </FormGroup>\r\n      </FormControl>\r\n    </Container>\r\n  );\r\n};\r\nexport default SettingsPage;\r\n"]},"metadata":{},"sourceType":"module"}