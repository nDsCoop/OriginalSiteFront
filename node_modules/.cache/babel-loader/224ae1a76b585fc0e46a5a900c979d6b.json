{"ast":null,"code":"'use strict';\n\nimport React from \"react\";\nimport ReactNative, { NativeModules, NativeAppEventEmitter, DeviceEventEmitter, PermissionsAndroid, Platform } from \"react-native\";\nvar AudioRecorderManager = NativeModules.AudioRecorderManager;\nvar AudioRecorder = {\n  prepareRecordingAtPath: function (path, options) {\n    if (this.progressSubscription) this.progressSubscription.remove();\n    this.progressSubscription = NativeAppEventEmitter.addListener('recordingProgress', data => {\n      if (this.onProgress) {\n        this.onProgress(data);\n      }\n    });\n    if (this.finishedSubscription) this.finishedSubscription.remove();\n    this.finishedSubscription = NativeAppEventEmitter.addListener('recordingFinished', data => {\n      if (this.onFinished) {\n        this.onFinished(data);\n      }\n    });\n    var defaultOptions = {\n      SampleRate: 44100.0,\n      Channels: 2,\n      AudioQuality: 'High',\n      AudioEncoding: 'ima4',\n      OutputFormat: 'mpeg_4',\n      MeteringEnabled: false,\n      MeasurementMode: false,\n      AudioEncodingBitRate: 32000,\n      IncludeBase64: false,\n      AudioSource: 0\n    };\n    var recordingOptions = { ...defaultOptions,\n      ...options\n    };\n\n    if (Platform.OS === 'ios') {\n      AudioRecorderManager.prepareRecordingAtPath(path, recordingOptions.SampleRate, recordingOptions.Channels, recordingOptions.AudioQuality, recordingOptions.AudioEncoding, recordingOptions.MeteringEnabled, recordingOptions.MeasurementMode, recordingOptions.IncludeBase64);\n    } else {\n      return AudioRecorderManager.prepareRecordingAtPath(path, recordingOptions);\n    }\n  },\n  startRecording: function () {\n    return AudioRecorderManager.startRecording();\n  },\n  pauseRecording: function () {\n    return AudioRecorderManager.pauseRecording();\n  },\n  resumeRecording: function () {\n    return AudioRecorderManager.resumeRecording();\n  },\n  stopRecording: function () {\n    return AudioRecorderManager.stopRecording();\n  },\n  checkAuthorizationStatus: AudioRecorderManager.checkAuthorizationStatus,\n  requestAuthorization: () => {\n    if (Platform.OS === 'ios') return AudioRecorderManager.requestAuthorization();else return new Promise((resolve, reject) => {\n      PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.RECORD_AUDIO).then(result => {\n        if (result == PermissionsAndroid.RESULTS.GRANTED || result == true) resolve(true);else resolve(false);\n      });\n    });\n  },\n  removeListeners: function () {\n    if (this.progressSubscription) this.progressSubscription.remove();\n    if (this.finishedSubscription) this.finishedSubscription.remove();\n  }\n};\nlet AudioUtils = {};\nlet AudioSource = {};\n\nif (Platform.OS === 'ios') {\n  AudioUtils = {\n    MainBundlePath: AudioRecorderManager.MainBundlePath,\n    CachesDirectoryPath: AudioRecorderManager.NSCachesDirectoryPath,\n    DocumentDirectoryPath: AudioRecorderManager.NSDocumentDirectoryPath,\n    LibraryDirectoryPath: AudioRecorderManager.NSLibraryDirectoryPath\n  };\n} else if (Platform.OS === 'android') {\n  AudioUtils = {\n    MainBundlePath: AudioRecorderManager.MainBundlePath,\n    CachesDirectoryPath: AudioRecorderManager.CachesDirectoryPath,\n    DocumentDirectoryPath: AudioRecorderManager.DocumentDirectoryPath,\n    LibraryDirectoryPath: AudioRecorderManager.LibraryDirectoryPath,\n    PicturesDirectoryPath: AudioRecorderManager.PicturesDirectoryPath,\n    MusicDirectoryPath: AudioRecorderManager.MusicDirectoryPath,\n    DownloadsDirectoryPath: AudioRecorderManager.DownloadsDirectoryPath\n  };\n  AudioSource = {\n    DEFAULT: 0,\n    MIC: 1,\n    VOICE_UPLINK: 2,\n    VOICE_DOWNLINK: 3,\n    VOICE_CALL: 4,\n    CAMCORDER: 5,\n    VOICE_RECOGNITION: 6,\n    VOICE_COMMUNICATION: 7,\n    REMOTE_SUBMIX: 8,\n    // added in API 19\n    UNPROCESSED: 9 // added in API 24\n\n  };\n}\n\nmodule.exports = {\n  AudioRecorder,\n  AudioUtils,\n  AudioSource\n};","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/node_modules/react-native-audio/index.js"],"names":["React","ReactNative","NativeModules","NativeAppEventEmitter","DeviceEventEmitter","PermissionsAndroid","Platform","AudioRecorderManager","AudioRecorder","prepareRecordingAtPath","path","options","progressSubscription","remove","addListener","data","onProgress","finishedSubscription","onFinished","defaultOptions","SampleRate","Channels","AudioQuality","AudioEncoding","OutputFormat","MeteringEnabled","MeasurementMode","AudioEncodingBitRate","IncludeBase64","AudioSource","recordingOptions","OS","startRecording","pauseRecording","resumeRecording","stopRecording","checkAuthorizationStatus","requestAuthorization","Promise","resolve","reject","request","PERMISSIONS","RECORD_AUDIO","then","result","RESULTS","GRANTED","removeListeners","AudioUtils","MainBundlePath","CachesDirectoryPath","NSCachesDirectoryPath","DocumentDirectoryPath","NSDocumentDirectoryPath","LibraryDirectoryPath","NSLibraryDirectoryPath","PicturesDirectoryPath","MusicDirectoryPath","DownloadsDirectoryPath","DEFAULT","MIC","VOICE_UPLINK","VOICE_DOWNLINK","VOICE_CALL","CAMCORDER","VOICE_RECOGNITION","VOICE_COMMUNICATION","REMOTE_SUBMIX","UNPROCESSED","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React from \"react\";\n\nimport ReactNative, {\n  NativeModules,\n  NativeAppEventEmitter,\n  DeviceEventEmitter,\n  PermissionsAndroid,\n  Platform\n} from \"react-native\";\n\nvar AudioRecorderManager = NativeModules.AudioRecorderManager;\n\nvar AudioRecorder = {\n  prepareRecordingAtPath: function(path, options) {\n    if (this.progressSubscription) this.progressSubscription.remove();\n    this.progressSubscription = NativeAppEventEmitter.addListener('recordingProgress',\n      (data) => {\n        if (this.onProgress) {\n          this.onProgress(data);\n        }\n      }\n    );\n\n    if (this.finishedSubscription) this.finishedSubscription.remove();\n    this.finishedSubscription = NativeAppEventEmitter.addListener('recordingFinished',\n      (data) => {\n        if (this.onFinished) {\n          this.onFinished(data);\n        }\n      }\n    );\n\n    var defaultOptions = {\n      SampleRate: 44100.0,\n      Channels: 2,\n      AudioQuality: 'High',\n      AudioEncoding: 'ima4',\n      OutputFormat: 'mpeg_4',\n      MeteringEnabled: false,\n      MeasurementMode: false,\n      AudioEncodingBitRate: 32000,\n      IncludeBase64: false,\n      AudioSource: 0\n    };\n\n    var recordingOptions = {...defaultOptions, ...options};\n\n    if (Platform.OS === 'ios') {\n      AudioRecorderManager.prepareRecordingAtPath(\n        path,\n        recordingOptions.SampleRate,\n        recordingOptions.Channels,\n        recordingOptions.AudioQuality,\n        recordingOptions.AudioEncoding,\n        recordingOptions.MeteringEnabled,\n        recordingOptions.MeasurementMode,\n        recordingOptions.IncludeBase64\n      );\n    } else {\n      return AudioRecorderManager.prepareRecordingAtPath(path, recordingOptions);\n    }\n  },\n  startRecording: function() {\n    return AudioRecorderManager.startRecording();\n  },\n  pauseRecording: function() {\n    return AudioRecorderManager.pauseRecording();\n  },\n  resumeRecording: function() {\n    return AudioRecorderManager.resumeRecording();\n  },\n  stopRecording: function() {\n    return AudioRecorderManager.stopRecording();\n  },\n  checkAuthorizationStatus: AudioRecorderManager.checkAuthorizationStatus,\n  requestAuthorization: () => {\n    if (Platform.OS === 'ios')\n      return AudioRecorderManager.requestAuthorization();\n    else\n      return new Promise((resolve, reject) => {\n        PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.RECORD_AUDIO\n        ).then(result => {\n          if (result == PermissionsAndroid.RESULTS.GRANTED || result == true)\n            resolve(true);\n          else\n            resolve(false)\n        })\n      });\n  },\n  removeListeners: function() {\n    if (this.progressSubscription) this.progressSubscription.remove();\n    if (this.finishedSubscription) this.finishedSubscription.remove();\n  },\n};\n\nlet AudioUtils = {};\nlet AudioSource = {};\n\nif (Platform.OS === 'ios') {\n  AudioUtils = {\n    MainBundlePath: AudioRecorderManager.MainBundlePath,\n    CachesDirectoryPath: AudioRecorderManager.NSCachesDirectoryPath,\n    DocumentDirectoryPath: AudioRecorderManager.NSDocumentDirectoryPath,\n    LibraryDirectoryPath: AudioRecorderManager.NSLibraryDirectoryPath,\n  };\n} else if (Platform.OS === 'android') {\n  AudioUtils = {\n    MainBundlePath: AudioRecorderManager.MainBundlePath,\n    CachesDirectoryPath: AudioRecorderManager.CachesDirectoryPath,\n    DocumentDirectoryPath: AudioRecorderManager.DocumentDirectoryPath,\n    LibraryDirectoryPath: AudioRecorderManager.LibraryDirectoryPath,\n    PicturesDirectoryPath: AudioRecorderManager.PicturesDirectoryPath,\n    MusicDirectoryPath: AudioRecorderManager.MusicDirectoryPath,\n    DownloadsDirectoryPath: AudioRecorderManager.DownloadsDirectoryPath\n  };\n  AudioSource = {\n    DEFAULT: 0,\n    MIC: 1,\n    VOICE_UPLINK: 2,\n    VOICE_DOWNLINK: 3,\n    VOICE_CALL: 4,\n    CAMCORDER: 5,\n    VOICE_RECOGNITION: 6,\n    VOICE_COMMUNICATION: 7,\n    REMOTE_SUBMIX: 8, // added in API 19\n    UNPROCESSED: 9, // added in API 24\n  };\n}\n\nmodule.exports = {AudioRecorder, AudioUtils, AudioSource};\n"]},"metadata":{},"sourceType":"module"}