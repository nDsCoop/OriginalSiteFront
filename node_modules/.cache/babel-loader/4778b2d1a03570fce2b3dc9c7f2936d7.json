{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\player\\\\SleepTimer.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Dialog, Switch, DialogActions, Button, FormControlLabel, FormControl, DialogTitle, Typography } from \"@material-ui/core\";\nimport { TimerOff, Timer } from \"@material-ui/icons\";\nimport { CircleSlider } from \"react-circle-slider\";\nimport \"./SleepTimerStyle.css\";\n\nconst setSleepTimeToLocalStorage = (time, alwaysOn) => {\n  const sleepTimerSettings = JSON.stringify({\n    time: time,\n    alwaysOn: alwaysOn\n  });\n  localStorage.setItem(\"sleepTimerSettings\", sleepTimerSettings);\n};\n\nconst getSleepTimeFromLocalStoarge = () => {\n  const sleepTimerSettings = localStorage.getItem(\"sleepTimerSettings\");\n  return JSON.parse(sleepTimerSettings);\n};\n\nconst removeSleepTimer = () => {\n  localStorage.removeItem(\"sleepTimerSettings\");\n};\n\nlet timerTimeout;\n\nfunction SleepTimer({\n  player\n}) {\n  const [sliderValue, changeSliderValue] = useState(20);\n  const [open, setOpen] = useState(false);\n  const [checkbox, setCheckbox] = useState(false);\n  const [isTimerSet, setIsTimerSet] = useState(false);\n\n  const setTimer = time => {\n    console.log(\"timer has been set with time\", time);\n    clearTimeout(timerTimeout);\n    setIsTimerSet(true);\n    timerTimeout = setTimeout(() => {\n      player.pause(); //pause after music finished\n    }, time * 60 * 1000);\n  };\n\n  useEffect(() => {\n    const sleepTimerObj = getSleepTimeFromLocalStoarge();\n\n    if (sleepTimerObj) {\n      changeSliderValue(sleepTimerObj.time);\n      setCheckbox(sleepTimerObj.alwaysOn);\n    } //only set timer when there is no timer\n\n\n    if (sleepTimerObj && sleepTimerObj.alwaysOn) {\n      console.log(sleepTimerObj);\n      setTimer(sleepTimerObj.time);\n    }\n\n    console.log(sleepTimerObj);\n  }, []);\n\n  const handleSetTimer = () => {\n    setSleepTimeToLocalStorage(sliderValue, checkbox); //   then also set a set timeout\n    // if there is any timer already clear it\n\n    setOpen(false);\n    setTimer(sliderValue);\n  };\n\n  const handleRemove = () => {\n    removeSleepTimer();\n    setIsTimerSet(false);\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, isTimerSet ? /*#__PURE__*/React.createElement(Timer, {\n    color: \"primary\",\n    onClick: () => setOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(TimerOff, {\n    color: \"primary\",\n    onClick: () => setOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Dialog, {\n    style: {\n      zIndex: 1400\n    },\n    open: open,\n    onClose: () => setOpen(false),\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    color: \"primary\",\n    align: \"center\",\n    style: {\n      marginTop: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Pause Music After\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"textContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, sliderValue, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"minute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"MINUTES\")), /*#__PURE__*/React.createElement(CircleSlider, {\n    value: sliderValue,\n    stepSize: 5,\n    onChange: value => changeSliderValue(value),\n    size: 300,\n    max: 120,\n    gradientColorFrom: \"#ec008c\",\n    gradientColorTo: \"#fc6767\",\n    knobRadius: 25,\n    progressWidth: 30,\n    circleWidth: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"Always On\",\n    control: /*#__PURE__*/React.createElement(Switch, {\n      checked: checkbox,\n      onChange: e => setCheckbox(e.target.checked),\n      value: \"checked always on\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }),\n    label: \"ALWAYS\",\n    labelPlacement: \"end\",\n    style: {\n      color: \"#e91e63\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: handleRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \"Remove\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: handleSetTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, \"Set\"))));\n}\n\nexport default SleepTimer;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/player/SleepTimer.js"],"names":["React","useState","useEffect","useCallback","Dialog","Switch","DialogActions","Button","FormControlLabel","FormControl","DialogTitle","Typography","TimerOff","Timer","CircleSlider","setSleepTimeToLocalStorage","time","alwaysOn","sleepTimerSettings","JSON","stringify","localStorage","setItem","getSleepTimeFromLocalStoarge","getItem","parse","removeSleepTimer","removeItem","timerTimeout","SleepTimer","player","sliderValue","changeSliderValue","open","setOpen","checkbox","setCheckbox","isTimerSet","setIsTimerSet","setTimer","console","log","clearTimeout","setTimeout","pause","sleepTimerObj","handleSetTimer","handleRemove","zIndex","marginTop","value","e","target","checked","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Switch,\r\n  DialogActions,\r\n  Button,\r\n  FormControlLabel,\r\n  FormControl,\r\n  DialogTitle,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport { TimerOff, Timer } from \"@material-ui/icons\";\r\nimport { CircleSlider } from \"react-circle-slider\";\r\n\r\nimport \"./SleepTimerStyle.css\";\r\n\r\nconst setSleepTimeToLocalStorage = (time, alwaysOn) => {\r\n  const sleepTimerSettings = JSON.stringify({ time: time, alwaysOn: alwaysOn });\r\n\r\n  localStorage.setItem(\"sleepTimerSettings\", sleepTimerSettings);\r\n};\r\n\r\nconst getSleepTimeFromLocalStoarge = () => {\r\n  const sleepTimerSettings = localStorage.getItem(\"sleepTimerSettings\");\r\n  return JSON.parse(sleepTimerSettings);\r\n};\r\n\r\nconst removeSleepTimer = () => {\r\n  localStorage.removeItem(\"sleepTimerSettings\");\r\n};\r\n\r\nlet timerTimeout;\r\n\r\nfunction SleepTimer({ player }) {\r\n  const [sliderValue, changeSliderValue] = useState(20);\r\n  const [open, setOpen] = useState(false);\r\n  const [checkbox, setCheckbox] = useState(false);\r\n  const [isTimerSet, setIsTimerSet] = useState(false);\r\n\r\n  const setTimer = time => {\r\n    console.log(\"timer has been set with time\", time);\r\n    clearTimeout(timerTimeout);\r\n    setIsTimerSet(true);\r\n    timerTimeout = setTimeout(() => {\r\n      player.pause(); //pause after music finished\r\n    }, time * 60 * 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sleepTimerObj = getSleepTimeFromLocalStoarge();\r\n    if (sleepTimerObj) {\r\n      changeSliderValue(sleepTimerObj.time);\r\n      setCheckbox(sleepTimerObj.alwaysOn);\r\n    }\r\n\r\n    //only set timer when there is no timer\r\n    if (sleepTimerObj && sleepTimerObj.alwaysOn) {\r\n      console.log(sleepTimerObj);\r\n      setTimer(sleepTimerObj.time);\r\n    }\r\n    console.log(sleepTimerObj);\r\n  }, []);\r\n\r\n  const handleSetTimer = () => {\r\n    setSleepTimeToLocalStorage(sliderValue, checkbox);\r\n    //   then also set a set timeout\r\n    // if there is any timer already clear it\r\n    setOpen(false);\r\n    setTimer(sliderValue);\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    removeSleepTimer();\r\n    setIsTimerSet(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isTimerSet ? (\r\n        <Timer color=\"primary\" onClick={() => setOpen(true)} />\r\n      ) : (\r\n        <TimerOff color=\"primary\" onClick={() => setOpen(true)} />\r\n      )}\r\n      <Dialog\r\n        style={{ zIndex: 1400 }}\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <Typography\r\n          variant=\"h5\"\r\n          color=\"primary\"\r\n          align=\"center\"\r\n          style={{ marginTop: \"10px\" }}\r\n        >\r\n          Pause Music After\r\n        </Typography>\r\n        <div className=\"container\">\r\n          <div className=\"textContainer\">\r\n            {sliderValue}\r\n            <div className=\"minute\">MINUTES</div>\r\n          </div>\r\n          <CircleSlider\r\n            value={sliderValue}\r\n            stepSize={5}\r\n            onChange={value => changeSliderValue(value)}\r\n            size={300}\r\n            max={120}\r\n            gradientColorFrom=\"#ec008c\"\r\n            gradientColorTo=\"#fc6767\"\r\n            knobRadius={25}\r\n            progressWidth={30}\r\n            circleWidth={30}\r\n          />\r\n        </div>\r\n\r\n        <DialogActions>\r\n          <FormControlLabel\r\n            value=\"Always On\"\r\n            control={\r\n              <Switch\r\n                checked={checkbox}\r\n                onChange={e => setCheckbox(e.target.checked)}\r\n                value=\"checked always on\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"ALWAYS\"\r\n            labelPlacement=\"end\"\r\n            style={{ color: \"#e91e63\" }}\r\n          />\r\n          <Button color=\"primary\" onClick={handleRemove}>\r\n            Remove\r\n          </Button>\r\n\r\n          <Button color=\"primary\" onClick={handleSetTimer}>\r\n            Set\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SleepTimer;\r\n"]},"metadata":{},"sourceType":"module"}