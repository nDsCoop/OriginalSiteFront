{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nimport Service from './service';\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.service = new Service();\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = this.getUserFromLocalStorage();\n    this.token = this.getTokenFromLocalStorage();\n    this.users = new OrderedMap();\n    this.search = {\n      users: new OrderedMap()\n    };\n  }\n\n  startSearchUsers(q = \"\") {\n    //query to backend server and get list of users\n    const data = {\n      search: q\n    };\n    this.search.users = this.search.users.clear();\n    this.service.post('api/users/search', data).then(res => {\n      //list off users match\n      const users = _.get(res, 'data', []);\n\n      _.each(users, user => {\n        //cache to this.users\n        //add user to this.search.users\n        const userId = `${users._id}`;\n        this.users = this.users.set(userId, user);\n        this.search.users = this.search.user.set(userId);\n      });\n\n      this.update();\n    }).catch(err => {\n      console.log(\" searching error\", err);\n    });\n  }\n\n  setUserToken(accessToken) {\n    if (!accessToken) {\n      this.localStorage.removeItem('token');\n      this.token = null;\n      return;\n    }\n\n    this.token = accessToken;\n    localStorage.setItem('token', JSON.stringify(accessToken));\n  }\n\n  signOut() {\n    const userId = `${_.get(this.user, '_id', null)}`;\n    this.user = null;\n    localStorage.removeItem('me');\n    localStorage.removeItem('token');\n\n    if (userId) {\n      this.users = this.users.remove(userId);\n    }\n\n    this.update();\n  }\n\n  getTokenFromLocalStorage() {\n    if (this.token) {\n      return this.token;\n    }\n\n    let token = null;\n    const data = localStorage.getItem('token');\n\n    if (data) {\n      try {\n        token = JSON.parse(data);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    return token;\n  }\n\n  getUserFromLocalStorage() {\n    let user = null;\n    const data = localStorage.getItem('me');\n\n    try {\n      user = JSON.parse(data);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (user) {\n      //connect to backend server verify this user\n      const token = this.getTokenFromLocalStorage();\n\n      const tokenId = _.get(token, '_id');\n\n      const options = {\n        headers: {\n          authorization: tokenId\n        }\n      };\n      this.service.get('api/users/me', options).then(res => {\n        //user login with token id\n        const accessToken = res.data;\n\n        const user = _.get(accessToken, 'user');\n\n        this.setCurrentUser(user);\n        this.setUserToken(accessToken);\n      }).catch(err => {\n        this.signOut();\n      });\n    }\n\n    return user;\n  }\n\n  setCurrentUser(user) {\n    this.user = user;\n\n    if (user) {\n      localStorage.setItem('me', JSON.stringify(user)); //save to local store\n\n      const userId = `${user._id}`;\n      this.users = this.users.set(userId, user);\n    }\n\n    this.update();\n  }\n\n  login(email = null, password = null) {\n    const userEmail = _.toLower(email);\n\n    const user = {\n      email: userEmail,\n      password: password\n    };\n    console.log(\"Try login with\", user);\n    return new Promise((resolve, reject) => {\n      this.service.post('api/users/login', user).then(res => {\n        //that mean successful login\n        const accessToken = _.get(res, 'data');\n\n        const user = _.get(accessToken, 'user');\n\n        this.setCurrentUser(user);\n        this.setUserToken(accessToken);\n      }).catch(err => {\n        const message = _.get(err, 'res.data.err.message', 'Login Error');\n\n        return reject(message);\n      });\n    }); // const _this = this;\n    // return new Promise((resolve, reject) => {\n    //     const user = users.find((user) => user.email === userEmail);\n    //     if( user ) {\n    //         _this.setCurrentUser(user);\n    //     }\n    //     return user ? resolve(user) : reject(\"User not found!\")\n    // });\n  }\n\n  addUserToChannel(channelId, userId) {\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      channel.members = channel.members.set(userId, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  getSearchUsers() {\n    // const keyword = _.toLower(search);\n    // let searchItems = new OrderedMap();\n    // const currentUser =this.getCurrentUser();\n    // const currentUserId = _.get(currentUser, '_id');\n    // if(_.trim(search).length){\n    //    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n    // }\n    return this.search.users.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, \"_id\");\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId);\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    const user = this.getCurrentUser();\n    message.user = user;\n    this.messages = this.messages.set(`${id}`, message); //add new message to \n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      let channel = this.channels.get(channelId);\n      channel.isNew = false;\n      channel.lastMessage = _.get(message, 'body', '');\n      channel.messages = channel.messages.set(id, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  removeMemberFromChannel(channel = null, user = null) {\n    if (!channel || !user) {\n      return;\n    }\n\n    const channelId = _.get(channel, '_id');\n\n    const userId = _.get(user, '_id');\n\n    channel.members = channel.members.remove(userId);\n    this.channels = this.channels.set(channelId, channel);\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = new OrderedMap();\n\n    if (channel) {\n      channel.messages.forEach((value, key) => {\n        const message = this.messages.get(key);\n        messages = messages.set(key, message);\n      });\n    }\n\n    return messages.valueSeq();\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.forEach((value, key) => {\n        const userId = `${key}`;\n        const user = this.users.get(userId);\n        const loggedUser = this.getCurrentUser();\n\n        if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n          members = members.set(key, user);\n        }\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    this.channels = this.channels.sort((a, b) => b.created - a.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/store.js"],"names":["OrderedMap","_","Service","Store","constructor","appComponent","app","service","messages","channels","activeChannelId","user","getUserFromLocalStorage","token","getTokenFromLocalStorage","users","search","startSearchUsers","q","data","clear","post","then","res","get","each","userId","_id","set","update","catch","err","console","log","setUserToken","accessToken","localStorage","removeItem","setItem","JSON","stringify","signOut","remove","getItem","parse","tokenId","options","headers","authorization","setCurrentUser","login","email","password","userEmail","toLower","Promise","resolve","reject","message","addUserToChannel","channelId","channel","members","getSearchUsers","valueSeq","onCreateNewChannel","addChannel","setActiveChannelId","getCurrentUser","id","getActiveChannel","first","addMessage","isNew","lastMessage","removeMemberFromChannel","getMessages","getMessagesFromChannel","forEach","value","key","getMembersFromChannel","loggedUser","index","getChannels","sort","a","b","created","forceUpdate"],"mappings":"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","sourcesContent":["import { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\nimport Service from './service';\r\n\r\n\r\n\r\nexport default class Store {\r\n    constructor(appComponent){\r\n        this.app = appComponent;\r\n        this.service = new Service();\r\n        this.messages = new OrderedMap();\r\n        this.channels = new OrderedMap();\r\n        this.activeChannelId = null;\r\n\r\n        this.user = this.getUserFromLocalStorage();\r\n        this.token = this.getTokenFromLocalStorage();\r\n        this.users = new OrderedMap();\r\n\r\n        this.search = {\r\n            users: new OrderedMap(),\r\n        }\r\n\r\n    }\r\n    startSearchUsers(q = \"\"){\r\n\r\n        //query to backend server and get list of users\r\n        const data = {search : q};\r\n        this.search.users = this.search.users.clear();\r\n        this.service.post('api/users/search', data).then((res) => {\r\n            //list off users match\r\n            const users = _.get(res, 'data', []);\r\n           _.each(users, (user) => {\r\n               //cache to this.users\r\n               //add user to this.search.users\r\n               const userId = `${users._id}`;\r\n               this.users = this.users.set(userId, user);\r\n               this.search.users = this.search.user.set(userId);\r\n           });\r\n           this.update();\r\n           \r\n        }).catch((err) => {\r\n            console.log(\" searching error\", err);\r\n        }); \r\n    }\r\n\r\n\r\n    setUserToken(accessToken){\r\n        if(!accessToken){\r\n            this.localStorage.removeItem('token');\r\n            this.token = null;\r\n            return;\r\n        }\r\n        this.token = accessToken;\r\n        localStorage.setItem('token', JSON.stringify(accessToken));\r\n    }\r\n    signOut(){\r\n        \r\n        const userId = `${_.get(this.user, '_id', null)}`;\r\n        this.user = null;\r\n        localStorage.removeItem('me');\r\n        localStorage.removeItem('token');\r\n        if(userId){\r\n            this.users = this.users.remove(userId);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    getTokenFromLocalStorage(){\r\n\r\n        if(this.token){\r\n            return this.token;\r\n        }\r\n\r\n        let token = null;\r\n        const data = localStorage.getItem('token');\r\n        if(data){\r\n            try{\r\n                token = JSON.parse(data);\r\n            }\r\n            catch (err){\r\n                console.log(err);\r\n            }\r\n            \r\n        }\r\n        return token;\r\n    }\r\n\r\n    getUserFromLocalStorage(){\r\n\r\n        let user = null;\r\n        const data = localStorage.getItem('me');\r\n         try {\r\n                user = JSON.parse(data);\r\n         }\r\n         catch(err) {\r\n             console.log(err);\r\n         }\r\n         if(user){\r\n            //connect to backend server verify this user\r\n            const token = this.getTokenFromLocalStorage();\r\n            const tokenId = _.get(token, '_id');\r\n            const options = {\r\n                headers: {\r\n                    authorization: tokenId,\r\n                }\r\n            }\r\n            \r\n            this.service.get('api/users/me', options).then((res) => {\r\n                //user login with token id\r\n                const accessToken = res.data;\r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n\r\n            }).catch(err => {\r\n                this.signOut();\r\n            });\r\n        }\r\n\r\n         return user;\r\n    }    \r\n        \r\n    \r\n    setCurrentUser(user){\r\n        this.user = user;\r\n        if(user){\r\n            localStorage.setItem('me', JSON.stringify(user));\r\n            //save to local store\r\n            const userId =`${user._id}`;\r\n            this.users = this.users.set(userId, user);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n\r\n    login(email = null, password = null){\r\n\r\n        const userEmail = _.toLower(email);\r\n        const user = {\r\n            email: userEmail,\r\n            password: password,\r\n        }\r\n        console.log(\"Try login with\", user);\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this.service.post('api/users/login', user).then((res) => {\r\n                //that mean successful login\r\n                const accessToken = _.get(res, 'data'); \r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n\r\n            }).catch((err) => {\r\n                \r\n                const message = _.get(err, 'res.data.err.message', 'Login Error');\r\n                return reject(message);\r\n            })\r\n        });\r\n        // const _this = this;\r\n        // return new Promise((resolve, reject) => {\r\n        //     const user = users.find((user) => user.email === userEmail);\r\n        //     if( user ) {\r\n        //         _this.setCurrentUser(user);\r\n        //     }\r\n        //     return user ? resolve(user) : reject(\"User not found!\")\r\n        // });\r\n    }\r\n\r\n    addUserToChannel(channelId, userId) {\r\n        const channel = this.channels.get(channelId);\r\n        if(channel) {\r\n            channel.members = channel.members.set(userId, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n    getSearchUsers(){\r\n        // const keyword = _.toLower(search);\r\n\r\n        // let searchItems = new OrderedMap();\r\n        // const currentUser =this.getCurrentUser();\r\n        // const currentUserId = _.get(currentUser, '_id');\r\n       \r\n        // if(_.trim(search).length){\r\n        //    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\r\n        // }\r\n\r\n        return this.search.users.valueSeq();\r\n    }\r\n\r\n    onCreateNewChannel(channel = {}){\r\n        const channelId = _.get(channel, \"_id\");\r\n        this.addChannel(channelId, channel );\r\n        this.setActiveChannelId(channelId);\r\n    \r\n    }\r\n\r\n    getCurrentUser(){\r\n        return this.user;\r\n    }\r\n\r\n    setActiveChannelId(id) {\r\n        this.activeChannelId = id;\r\n        this.update();\r\n    }\r\n    getActiveChannel(){\r\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\r\n        return channel;\r\n    }\r\n\r\n    addMessage(id, message = {}){\r\n\r\n        const user = this.getCurrentUser();\r\n        message.user = user;\r\n        this.messages = this.messages.set(`${id}`, message);\r\n        //add new message to \r\n        const channelId = _.get(message, 'channelId');\r\n        if(channelId){\r\n            let channel = this.channels.get(channelId);\r\n            channel.isNew = false;\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            channel.messages = channel.messages.set(id, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeMemberFromChannel( channel = null, user = null){\r\n        if(!channel || !user ){\r\n            return;\r\n        }\r\n        const channelId = _.get(channel, '_id')\r\n        const userId = _.get(user, '_id');\r\n        channel.members = channel.members.remove(userId);\r\n        this.channels = this.channels.set(channelId, channel);\r\n        this.update();\r\n    }\r\n\r\n    getMessages(){\r\n        return this.messages.valueSeq();\r\n    }\r\n    getMessagesFromChannel(channel){\r\n        let messages = new OrderedMap();\r\n\r\n        if(channel){\r\n            channel.messages.forEach((value, key) => {\r\n\r\n                const message = this.messages.get(key);\r\n                messages = messages.set( key, message);\r\n    \r\n            });\r\n        }\r\n        return messages.valueSeq();\r\n        \r\n    }\r\n\r\n    getMembersFromChannel(channel){\r\n        let members = new OrderedMap();\r\n        if(channel){\r\n            channel.members.forEach((value, key) => {\r\n\r\n                const userId = `${key}`\r\n                const user = this.users.get(userId);\r\n                const loggedUser = this.getCurrentUser();\r\n                if( _.get(loggedUser, '_id') !== _.get(user, '_id')){\r\n                    members = members.set(key, user)\r\n                }\r\n            });\r\n               \r\n        }\r\n        return members.valueSeq();\r\n    }\r\n\r\n\r\n    addChannel(index, channel = {}){\r\n        this.channels = this.channels.set(`${index}`, channel);\r\n        this.update();\r\n    }\r\n\r\n    getChannels(){\r\n        this.channels = this.channels.sort((a, b) => b.created - a.created);\r\n        return this.channels.valueSeq();\r\n    }\r\n    update(){\r\n        this.app.forceUpdate();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}