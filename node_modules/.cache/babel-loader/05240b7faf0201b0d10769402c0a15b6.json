{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\sections\\\\SongCard.js\";\nimport React, { useContext } from \"react\";\nimport { Card, makeStyles, CardActionArea, CardContent, CardMedia, Typography, LinearProgress, Container } from \"@material-ui/core\";\nimport { GlobalContext } from \"../GlobalState\";\nconst useStyles = makeStyles({\n  card: {\n    width: 300,\n    height: 236,\n    display: \"inline-block\",\n    margin: \"10px\",\n    whiteSpace: \"pre-wrap\"\n  },\n  media: {\n    height: 160\n  }\n});\n\nconst MediaCard = ({\n  songs,\n  categotyTitle\n}) => {\n  const [{}, dispatch] = useContext(GlobalContext);\n\n  const setCurrentVideoSnippet = data => {\n    dispatch({\n      type: \"setCurrentVideoSnippet\",\n      snippet: data\n    });\n  };\n\n  const handleClick = video => {\n    // set all the info of current clicked video in this object\n    if (!video.snippet.resourceId) {\n      setCurrentVideoSnippet({\n        id: video.id,\n        title: video.snippet.title,\n        channelTitle: video.snippet.channelTitle,\n        maxThumbnail: `https://img.youtube.com/vi/${video.id}/maxresdefault.jpg`,\n        sdThumbnail: `https://img.youtube.com/vi/${video.id}/sddefault.jpg` // this is the url of the max resolution of thumbnail\n\n      });\n    } else {\n      setCurrentVideoSnippet({\n        id: video.snippet.resourceId.videoId,\n        title: video.snippet.title,\n        channelTitle: video.snippet.channelTitle,\n        maxThumbnail: `https://img.youtube.com/vi/${video.snippet.resourceId.videoId}/maxresdefault.jpg`,\n        sdThumbnail: `https://img.youtube.com/vi/${video.snippet.resourceId.videoId}/sddefault.jpg` // this is the url of the max resolution of thumbnail\n\n      });\n    }\n\n    console.log(video);\n  };\n\n  const classes = useStyles();\n  console.log(\"card re rendered\");\n\n  if (songs) {\n    const renderCards = songs.map(song => {\n      return /*#__PURE__*/React.createElement(Card, {\n        className: classes.card,\n        key: song.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CardActionArea, {\n        onClick: () => handleClick(song),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(CardMedia, {\n        className: classes.media,\n        component: \"img\",\n        src: song.snippet.thumbnails.high.url,\n        loading: \"lazy\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(CardContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        gutterBottom: true,\n        variant: \"body2\",\n        component: \"p\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }\n      }, song.snippet.title.slice(0, 70) + \" ...\"))));\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      style: {\n        marginLeft: \"15px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, categotyTitle), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cardSlider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, renderCards));\n  } else {\n    return /*#__PURE__*/React.createElement(Container, {\n      style: {\n        height: \"25vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LinearProgress, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }));\n  }\n};\n\nexport default MediaCard;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/sections/SongCard.js"],"names":["React","useContext","Card","makeStyles","CardActionArea","CardContent","CardMedia","Typography","LinearProgress","Container","GlobalContext","useStyles","card","width","height","display","margin","whiteSpace","media","MediaCard","songs","categotyTitle","dispatch","setCurrentVideoSnippet","data","type","snippet","handleClick","video","resourceId","id","title","channelTitle","maxThumbnail","sdThumbnail","videoId","console","log","classes","renderCards","map","song","thumbnails","high","url","slice","marginLeft"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\r\n\r\nimport {\r\n  Card,\r\n  makeStyles,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardMedia,\r\n  Typography,\r\n  LinearProgress,\r\n  Container\r\n} from \"@material-ui/core\";\r\nimport { GlobalContext } from \"../GlobalState\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    width: 300,\r\n    height: 236,\r\n    display: \"inline-block\",\r\n    margin: \"10px\",\r\n    whiteSpace: \"pre-wrap\"\r\n  },\r\n  media: {\r\n    height: 160\r\n  }\r\n});\r\nconst MediaCard = ({ songs, categotyTitle }) => {\r\n  const [{}, dispatch] = useContext(GlobalContext);\r\n  const setCurrentVideoSnippet = data => {\r\n    dispatch({ type: \"setCurrentVideoSnippet\", snippet: data });\r\n  };\r\n\r\n  const handleClick = video => {\r\n    // set all the info of current clicked video in this object\r\n\r\n    if (!video.snippet.resourceId) {\r\n      setCurrentVideoSnippet({\r\n        id: video.id,\r\n        title: video.snippet.title,\r\n        channelTitle: video.snippet.channelTitle,\r\n        maxThumbnail: `https://img.youtube.com/vi/${video.id}/maxresdefault.jpg`,\r\n        sdThumbnail: `https://img.youtube.com/vi/${video.id}/sddefault.jpg`\r\n        // this is the url of the max resolution of thumbnail\r\n      });\r\n    } else {\r\n      setCurrentVideoSnippet({\r\n        id: video.snippet.resourceId.videoId,\r\n        title: video.snippet.title,\r\n        channelTitle: video.snippet.channelTitle,\r\n        maxThumbnail: `https://img.youtube.com/vi/${video.snippet.resourceId.videoId}/maxresdefault.jpg`,\r\n        sdThumbnail: `https://img.youtube.com/vi/${video.snippet.resourceId.videoId}/sddefault.jpg`\r\n        // this is the url of the max resolution of thumbnail\r\n      });\r\n    }\r\n\r\n    console.log(video);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  console.log(\"card re rendered\");\r\n\r\n  if (songs) {\r\n    const renderCards = songs.map(song => {\r\n      return (\r\n        <Card className={classes.card} key={song.id}>\r\n          <CardActionArea onClick={() => handleClick(song)}>\r\n            <CardMedia\r\n              className={classes.media}\r\n              component=\"img\"\r\n              src={song.snippet.thumbnails.high.url}\r\n              loading=\"lazy\"\r\n            />\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"body2\" component=\"p\">\r\n                {song.snippet.title.slice(0, 70) + \" ...\"}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n        </Card>\r\n      );\r\n    });\r\n    return (\r\n      <>\r\n        <Typography variant=\"h5\" style={{ marginLeft: \"15px\" }}>\r\n          {categotyTitle}\r\n        </Typography>\r\n        <div className={\"cardSlider\"}>{renderCards}</div>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <Container style={{ height: \"25vh\" }}>\r\n        <LinearProgress color=\"primary\" />\r\n      </Container>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MediaCard;\r\n"]},"metadata":{},"sourceType":"module"}