{"ast":null,"code":"import { OrderedMap } from \"immutable\";\nimport _ from 'lodash';\nexport default class Realtime {\n  constructor(store) {\n    this.store = store;\n    this.ws = null;\n    this.isConnected = false;\n    this.connect();\n  }\n\n  decoMessage(msg) {\n    let message = {};\n\n    try {\n      message = JSON.parse(msg);\n    } catch (err) {\n      console.log(err);\n    }\n\n    return message;\n  }\n\n  readMessage(msg) {\n    const message = this.decoMessage(msg);\n    const currentUser = store.getCurrentUser();\n\n    const currentUserId = _.toString(_.get(currentUser, 'id'));\n\n    const action = _.get(message, 'action');\n\n    const payload = _.get(message, 'payload');\n\n    const store = this.store;\n\n    switch (action) {\n      case 'massage_added':\n        let user = _.get(payload, 'user'); //add user to cache\n\n\n        user = store.addUserToCache(user);\n        const messageObject = {\n          _id: payload._id,\n          body: _.get(payload, 'body', ''),\n          userId: _.get(payload, 'userId'),\n          channelId: _.get(payload, 'channelId'),\n          created: _.get(payload, 'created', new Date()),\n          me: currentUserId === _.toString(_.get(payload, 'userId')) ? true : false,\n          user: user\n        };\n        store.setMessage(messageObject);\n        break;\n\n      case 'channel_added':\n        //to do check payload and insert new channel\n        const channelId = `${payload._id}`;\n        const userId = `${payload.userId}`;\n\n        const users = _.get(payload, 'users', []);\n\n        let channel = {\n          _id: channelId,\n          title: _.get(payload, 'title', ''),\n          lastMessage: _.get(payload, 'lastMessage', ''),\n          members: new OrderedMap(),\n          messages: new OrderedMap(),\n          isNew: false,\n          userId: userId,\n          created: new Date()\n        };\n\n        _.each(users, user => {\n          //add this user to store.users collection\n          const memberId = `${user._id}`;\n          this.store.addUserToCache(user);\n          channel.members = channel.members.set(memberId, true);\n        });\n\n        store.addChannel(channelId, channel);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  send(msg = {}) {\n    const isConnected = this.isConnected;\n\n    if (isConnected) {\n      const msgString = JSON.stringify(msg);\n      this.ws.send(msgString);\n    }\n  }\n\n  authentication() {\n    const store = this.store;\n    const tokenId = store.getUserTokenId();\n    const message = {\n      action: 'auth',\n      payload: `${tokenId}`\n    };\n    this.send(message);\n  }\n\n  connect() {\n    const ws = new WebSocket('ws://localhost:8080');\n    this.ws = ws;\n\n    ws.onopen = () => {\n      //tell to server who are you ?\n      this.isConnected = true;\n      this.authentication();\n\n      ws.onmessage = e => {\n        this.readMessage(_.get(e, 'data', ''));\n        console.log(\"Message from server: \", e.data);\n      };\n    };\n\n    ws.onclose = () => {\n      this.isConnected = false; //\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/realtime.js"],"names":["OrderedMap","_","Realtime","constructor","store","ws","isConnected","connect","decoMessage","msg","message","JSON","parse","err","console","log","readMessage","currentUser","getCurrentUser","currentUserId","toString","get","action","payload","user","addUserToCache","messageObject","_id","body","userId","channelId","created","Date","me","setMessage","users","channel","title","lastMessage","members","messages","isNew","each","memberId","set","addChannel","send","msgString","stringify","authentication","tokenId","getUserTokenId","WebSocket","onopen","onmessage","e","data","onclose"],"mappings":"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","sourcesContent":["import { OrderedMap } from \"immutable\";\r\nimport _ from 'lodash';\r\n\r\nexport default class Realtime{\r\n\r\n    constructor(store){\r\n        this.store = store;\r\n        this.ws = null;\r\n        this.isConnected = false;\r\n        this.connect();\r\n\r\n    }\r\n    decoMessage(msg){\r\n        let message = {};\r\n        try{\r\n            message = JSON.parse(msg);\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        return message;\r\n    }\r\n    readMessage(msg){\r\n        const message = this.decoMessage(msg);\r\n        const currentUser = store.getCurrentUser();\r\n        const currentUserId = _.toString(_.get(currentUser, 'id'));\r\n        const action = _.get(message, 'action');\r\n        const payload = _.get(message, 'payload');\r\n        const store = this.store;\r\n\r\n        switch(action){\r\n            case 'massage_added':\r\n                let user = _.get(payload, 'user');\r\n\r\n                //add user to cache\r\n                user = store.addUserToCache(user);\r\n\r\n                const messageObject = {\r\n                    _id: payload._id,\r\n                    body: _.get(payload, 'body', ''),\r\n                    userId: _.get(payload, 'userId'),\r\n                    channelId: _.get(payload, 'channelId'),\r\n                    created: _.get(payload, 'created', new Date()),\r\n                    me: currentUserId === _.toString(_.get(payload, 'userId')) ? true : false,\r\n                    user: user,\r\n                }\r\n                store.setMessage(messageObject);\r\n\r\n                break;\r\n\r\n            case 'channel_added':\r\n\r\n            //to do check payload and insert new channel\r\n            const channelId = `${payload._id}`;\r\n            const userId = `${payload.userId}`;\r\n            const users = _.get(payload, 'users', []);\r\n            let channel = { \r\n                _id:channelId,  \r\n                title: _.get(payload, 'title', '' ),\r\n                lastMessage: _.get(payload, 'lastMessage', ''),\r\n                members: new OrderedMap(),\r\n                messages: new OrderedMap(),\r\n                isNew: false,\r\n                userId: userId,\r\n                created: new Date(),\r\n            };\r\n            _.each(users, (user) => {\r\n                //add this user to store.users collection\r\n                const memberId = `${user._id}`;\r\n                this.store.addUserToCache(user);\r\n                channel.members = channel.members.set(memberId, true);\r\n            });\r\n\r\n            store.addChannel(channelId, channel);\r\n\r\n            break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    send( msg = {}){\r\n        const isConnected = this.isConnected;\r\n        if(isConnected){\r\n            const msgString = JSON.stringify(msg);\r\n            this.ws.send(msgString);\r\n        }\r\n    }\r\n    authentication(){\r\n        const store = this.store;\r\n        const tokenId = store.getUserTokenId();\r\n        const message = {\r\n            action: 'auth',\r\n            payload: `${tokenId}`\r\n        }\r\n            this.send(message);\r\n    }\r\n\r\n    connect(){\r\n\r\n        const ws = new WebSocket('ws://localhost:8080');\r\n        this.ws = ws;\r\n        ws.onopen = () => {\r\n            //tell to server who are you ?\r\n            this.isConnected = true;\r\n            this.authentication();\r\n            \r\n            ws.onmessage = (e) => {\r\n                this.readMessage(_.get(e, 'data',''));\r\n                console.log(\"Message from server: \", e.data);\r\n            }\r\n        }\r\n        ws.onclose = () => {\r\n            this.isConnected = false;\r\n            //\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}