{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\GoogleSignIn.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from \"@material-ui/core\";\nimport gIcon from \"../images/google.svg\"; // your client id will be here\n\nconst clientId = \"304991981507-dtj026vui1dbrus032hksbnv8dk6m372.apps.googleusercontent.com\";\nconst gapi = window.gapi; // get the gapi from window\n\nconst GoogleSignIn = () => {\n  const [open, setOpen] = React.useState(false);\n  useEffect(() => {\n    function updateSigninStatus(isSignedIn) {\n      if (isSignedIn) {\n        console.log(\"Signed in\");\n        setIsSignedIn(true); // also close the popup\n\n        setOpen(false);\n        loadClient();\n        console.log(gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().id_token);\n      } else {\n        console.log(\"Signed out\");\n        setIsSignedIn(false);\n      }\n    }\n\n    gapi.load(\"client:auth2\", () => {\n      gapi.client.init({\n        clientId: clientId,\n        scope: \"https://www.googleapis.com/auth/youtube.readonly\"\n      }).then(() => {\n        // Listen for sign-in state changes.\n        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus); // Handle the initial sign-in state.\n\n        updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n      });\n    });\n    setTimeout(() => {\n      setOpen(true);\n    }, 2000); // show popup after two seconds\n  }, []);\n\n  function loadClient() {\n    gapi.client.setApiKey(\"AIzaSyDJHo6BZNDui-YvXPhb-U0DOUFGEWsWpvw\");\n    return gapi.client.load(\"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\").then(function () {\n      console.log(\"GAPI client loaded for API\");\n      gapi.client.youtube.videos.list({\n        part: \"snippet\",\n        myRating: \"like\"\n      }).then(response => {\n        console.log(response);\n      });\n    }, function (err) {\n      console.error(\"Error loading GAPI client for API\", err);\n    });\n  }\n  /**\r\n   *  Called when the signed in status changes, to update the UI\r\n   *  appropriately. After a sign-in, the API is called.\r\n   */\n\n\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  /**\r\n   *  Sign in the user upon button click.\r\n   */\n\n  function handleAuthClick(event) {\n    // if user is currently signed in then sign it out else sign in\n    if (isSignedIn) {\n      gapi.auth2.getAuthInstance().signOut();\n    } else {\n      gapi.auth2.getAuthInstance().signIn();\n    }\n  }\n  /**\r\n   *  Sign out the user upon button click.\r\n   */\n\n\n  function handleSignoutClick(event) {\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  function handleClose() {\n    // we will locally store if user dont want to sign in\n    localStorage.setItem(\"signInClosed\", true);\n    setOpen(false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Sign In with your Google account ?\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    id: \"alert-dialog-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"After signing in you will be able to retrieve your liked songs and like or dislike a song on your YouTube account.\")), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, \"Later\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: handleAuthClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: gIcon,\n    height: \"25px\",\n    alt: \"\",\n    style: {\n      marginRight: \"8px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), \"Sign In\"))));\n};\n\nexport default GoogleSignIn;","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/GoogleSignIn.js"],"names":["React","useEffect","useState","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","clientId","gapi","window","GoogleSignIn","open","setOpen","updateSigninStatus","isSignedIn","console","log","setIsSignedIn","loadClient","auth2","getAuthInstance","currentUser","get","getAuthResponse","id_token","load","client","init","scope","then","listen","setTimeout","setApiKey","youtube","videos","list","part","myRating","response","err","error","handleAuthClick","event","signOut","signIn","handleSignoutClick","handleClose","localStorage","setItem","gIcon","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle\r\n} from \"@material-ui/core\";\r\nimport gIcon from \"../images/google.svg\";\r\n\r\n// your client id will be here\r\nconst clientId =\"304991981507-dtj026vui1dbrus032hksbnv8dk6m372.apps.googleusercontent.com\";\r\n\r\nconst gapi = window.gapi;\r\n// get the gapi from window\r\n\r\nconst GoogleSignIn = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    function updateSigninStatus(isSignedIn) {\r\n      if (isSignedIn) {\r\n        console.log(\"Signed in\");\r\n        setIsSignedIn(true);\r\n        // also close the popup\r\n        setOpen(false);\r\n        loadClient();\r\n        console.log(\r\n          gapi.auth2\r\n            .getAuthInstance()\r\n            .currentUser.get()\r\n            .getAuthResponse().id_token\r\n        );\r\n      } else {\r\n        console.log(\"Signed out\");\r\n        setIsSignedIn(false);\r\n      }\r\n    }\r\n\r\n    gapi.load(\"client:auth2\", () => {\r\n      gapi.client\r\n        .init({\r\n          clientId: clientId,\r\n          scope: \"https://www.googleapis.com/auth/youtube.readonly\"\r\n        })\r\n        .then(() => {\r\n          // Listen for sign-in state changes.\r\n          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\r\n          // Handle the initial sign-in state.\r\n          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        });\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setOpen(true);\r\n    }, 2000);\r\n    // show popup after two seconds\r\n  }, []);\r\n\r\n  function loadClient() {\r\n    gapi.client.setApiKey(\"AIzaSyDJHo6BZNDui-YvXPhb-U0DOUFGEWsWpvw\");\r\n    return gapi.client\r\n      .load(\"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\")\r\n      .then(\r\n        function() {\r\n          console.log(\"GAPI client loaded for API\");\r\n          gapi.client.youtube.videos\r\n            .list({\r\n              part: \"snippet\",\r\n              myRating: \"like\"\r\n            })\r\n            .then(response => {\r\n              console.log(response);\r\n            });\r\n        },\r\n        function(err) {\r\n          console.error(\"Error loading GAPI client for API\", err);\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   *  Called when the signed in status changes, to update the UI\r\n   *  appropriately. After a sign-in, the API is called.\r\n   */\r\n\r\n  const [isSignedIn, setIsSignedIn] = useState(false);\r\n\r\n  /**\r\n   *  Sign in the user upon button click.\r\n   */\r\n  function handleAuthClick(event) {\r\n    // if user is currently signed in then sign it out else sign in\r\n    if (isSignedIn) {\r\n      gapi.auth2.getAuthInstance().signOut();\r\n    } else {\r\n      gapi.auth2.getAuthInstance().signIn();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Sign out the user upon button click.\r\n   */\r\n  function handleSignoutClick(event) {\r\n    gapi.auth2.getAuthInstance().signOut();\r\n  }\r\n\r\n\r\n  function handleClose() {\r\n    // we will locally store if user dont want to sign in\r\n    localStorage.setItem(\"signInClosed\", true)\r\n    setOpen(false);\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          Sign In with your Google account ?\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            After signing in you will be able to retrieve your liked songs and\r\n            like or dislike a song on your YouTube account.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button variant=\"outlined\" onClick={handleClose} color=\"primary\">\r\n            Later\r\n          </Button>\r\n          <Button variant=\"outlined\" color=\"primary\" onClick={handleAuthClick}>\r\n            <img\r\n              src={gIcon}\r\n              height=\"25px\"\r\n              alt=\"\"\r\n              style={{ marginRight: \"8px\" }}\r\n            />\r\n            Sign In\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleSignIn;\r\n"]},"metadata":{},"sourceType":"module"}