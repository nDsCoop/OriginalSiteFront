{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\ContentChat.js\";\nimport React, { Component } from 'react';\nimport Sidebar from './Sidebar';\nimport { MESSAGE_SENT, TYPING, COMMUNITY_CHAT, MESSAGE_RECIEVED } from '../Events';\nimport ChatHeading from \"../messages/ChatHeading\";\nimport Messages from \"../messages/Messages\";\nimport MessageInput from \"../messages/MessageInput\";\nexport default class ContentChat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetChat = chat => {\n      return this.addChat(chat, true);\n    };\n\n    this.addChat = (chat, reset) => {\n      const {\n        socket\n      } = this.props;\n      const {\n        chats\n      } = this.state;\n      const newChats = reset ? [chat] : [...chats, chat];\n      this.setState({\n        chats: newChats\n      });\n      const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`;\n      const typingEvent = `${TYPING}-${chat.id}`;\n      socket.on(typingEvent);\n      socket.on(messageEvent, this.addMessageToChat(chat.Id));\n    };\n\n    this.addMessageToChat = chatID => {\n      return message => {\n        const {\n          chats\n        } = this.state;\n        let newChats = chats.map(chat => {\n          if (chat.id === chat.Id) chat.message.push(message);\n          return chat;\n        });\n        this.setState({\n          chats: newChats\n        });\n      };\n    };\n\n    this.updateTypingInChat = chatId => {};\n\n    this.sendMessage = (chatId, message) => {\n      const {\n        socket\n      } = this.props;\n      socket.emit(MESSAGE_SENT, {\n        chatId,\n        message\n      });\n    };\n\n    this.sendTyping = (chatId, isTyping) => {\n      const {\n        socket\n      } = this.props;\n      socket.emit(TYPING, {\n        chatId,\n        isTyping\n      });\n    };\n\n    this.setActiveChat = activeChat => {\n      this.setState({\n        activeChat\n      });\n    };\n\n    this.state = {\n      chats: [],\n      activeChat: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      socket\n    } = this.props;\n    socket.emit(COMMUNITY_CHAT, this.resetChat);\n  }\n\n  render() {\n    const {\n      user,\n      logout\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      logout: logout,\n      chats: this.state.chats,\n      user: user,\n      activeChat: activeChat,\n      setActiveChat: this.setActiveChat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, activeChat !== null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_room\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChatHeading, {\n      name: activeChat.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Messages, {\n      messages: activeChat.message,\n      user: user,\n      typingUsers: activeChat.typingUsers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(MessageInput, {\n      sendMessage: message => {\n        this.sendMessage(activeChat.id, message);\n      },\n      sendTyping: isTyping => {\n        this.sendTyping(activeChat.id, isTyping);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chooseChat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, \"Choose a chat to start chat\"))));\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/ContentChat.js"],"names":["React","Component","Sidebar","MESSAGE_SENT","TYPING","COMMUNITY_CHAT","MESSAGE_RECIEVED","ChatHeading","Messages","MessageInput","ContentChat","constructor","props","resetChat","chat","addChat","reset","socket","chats","state","newChats","setState","messageEvent","id","typingEvent","on","addMessageToChat","Id","chatID","message","map","push","updateTypingInChat","chatId","sendMessage","emit","sendTyping","isTyping","setActiveChat","activeChat","componentDidMount","render","user","logout","name","typingUsers"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Sidebar from './Sidebar';\r\nimport { MESSAGE_SENT, TYPING, COMMUNITY_CHAT, MESSAGE_RECIEVED } from '../Events';\r\nimport ChatHeading from \"../messages/ChatHeading\";\r\nimport Messages from \"../messages/Messages\";\r\nimport MessageInput from \"../messages/MessageInput\";\r\n\r\nexport default class ContentChat extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chats: [],\r\n            activeChat: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { socket } = this.props\r\n        socket.emit(COMMUNITY_CHAT, this.resetChat)\r\n    }\r\n\r\n    resetChat = (chat) => {\r\n        return this.addChat(chat, true)\r\n    }\r\n\r\n    addChat = (chat, reset) => {\r\n        const { socket } = this.props\r\n        const { chats } = this.state\r\n\r\n        const newChats = reset ? [chat] : [...chats, chat]\r\n        this.setState({chats: newChats})\r\n\r\n        const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`\r\n        const typingEvent = `${TYPING}-${chat.id}`\r\n\r\n        socket.on(typingEvent)\r\n        socket.on(messageEvent, this.addMessageToChat(chat.Id))\r\n    }\r\n\r\n    addMessageToChat = (chatID) => {\r\n        return message => {\r\n            const { chats } = this.state\r\n            let newChats = chats.map((chat) =>{\r\n                if(chat.id === chat.Id)\r\n                    chat.message.push(message)\r\n                return chat\r\n            })\r\n            this.setState({chats: newChats})\r\n        }\r\n    }\r\n\r\n    updateTypingInChat = (chatId) => {\r\n\r\n    }\r\n\r\n    sendMessage = (chatId, message) => {\r\n        const { socket } = this.props\r\n        socket.emit(MESSAGE_SENT, {chatId, message})\r\n    }\r\n\r\n    sendTyping = (chatId, isTyping) => {\r\n        const { socket } = this.props\r\n        socket.emit(TYPING, { chatId, isTyping })\r\n    }\r\n\r\n    setActiveChat = (activeChat) => {\r\n        this.setState({activeChat})\r\n    }\r\n    render() {\r\n        const { user, logout } = this.props\r\n        return (\r\n            <div className=\"app3\">\r\n                <Sidebar\r\n                logout= { logout }\r\n                chats= { this.state.chats }\r\n                user= { user }\r\n                activeChat= { activeChat }\r\n                setActiveChat= { this.setActiveChat }\r\n                />\r\n                <div className=\"chat\">\r\n                    {\r\n                        activeChat !== null ? (\r\n                            <div className=\"chat_room\">\r\n                                <ChatHeading name={activeChat.name} />\r\n                                <Messages\r\n                                    messages= {activeChat.message}\r\n                                    user= {user}\r\n                                    typingUsers= {activeChat.typingUsers}\r\n                                />\r\n                                <MessageInput\r\n                                    sendMessage= {\r\n                                        (message) => {\r\n                                            this.sendMessage(activeChat.id, message)\r\n                                        }\r\n                                    }\r\n                                    sendTyping= {\r\n                                        (isTyping) => {\r\n                                            this.sendTyping(activeChat.id, isTyping)\r\n                                        }\r\n                                    }\r\n                                    />\r\n\r\n                            </div>\r\n                        ) : <div className=\"chooseChat\">\r\n                                <h3>Choose a chat to start chat</h3>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}