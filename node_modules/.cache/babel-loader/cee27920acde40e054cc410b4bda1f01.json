{"ast":null,"code":"import _slicedToArray from\"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Button,Dialog,DialogActions,DialogContent,DialogContentText,DialogTitle}from\"@material-ui/core\";import gIcon from\"../images/google.svg\";// your client id will be here\nvar clientId=\"304991981507-dtj026vui1dbrus032hksbnv8dk6m372.apps.googleusercontent.com\";var gapi=window.gapi;// get the gapi from window\nvar GoogleSignIn=function GoogleSignIn(){var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),open=_React$useState2[0],setOpen=_React$useState2[1];useEffect(function(){function updateSigninStatus(isSignedIn){if(isSignedIn){console.log(\"Signed in\");setIsSignedIn(true);// also close the popup\nsetOpen(false);loadClient();console.log(gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().id_token);}else{console.log(\"Signed out\");setIsSignedIn(false);}}gapi.load(\"client:auth2\",function(){gapi.client.init({clientId:clientId,scope:\"https://www.googleapis.com/auth/youtube.readonly\"}).then(function(){// Listen for sign-in state changes.\ngapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);// Handle the initial sign-in state.\nupdateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());});});setTimeout(function(){setOpen(true);},2000);// show popup after two seconds\n},[]);function loadClient(){gapi.client.setApiKey(\"AIzaSyDJHo6BZNDui-YvXPhb-U0DOUFGEWsWpvw\");return gapi.client.load(\"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\").then(function(){console.log(\"GAPI client loaded for API\");gapi.client.youtube.videos.list({part:\"snippet\",myRating:\"like\"}).then(function(response){console.log(response);});},function(err){console.error(\"Error loading GAPI client for API\",err);});}/**\r\n   *  Called when the signed in status changes, to update the UI\r\n   *  appropriately. After a sign-in, the API is called.\r\n   */var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isSignedIn=_useState2[0],setIsSignedIn=_useState2[1];/**\r\n   *  Sign in the user upon button click.\r\n   */function handleAuthClick(event){// if user is currently signed in then sign it out else sign in\nif(isSignedIn){gapi.auth2.getAuthInstance().signOut();}else{gapi.auth2.getAuthInstance().signIn();}}/**\r\n   *  Sign out the user upon button click.\r\n   */function handleSignoutClick(event){gapi.auth2.getAuthInstance().signOut();}function handleClose(){// we will locally store if user dont want to sign in\nlocalStorage.setItem(\"signInClosed\",true);setOpen(false);}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Dialog,{open:open,onClose:handleClose},/*#__PURE__*/React.createElement(DialogTitle,{id:\"alert-dialog-title\"},\"Sign In with your Google account ?\"),/*#__PURE__*/React.createElement(DialogContent,null,/*#__PURE__*/React.createElement(DialogContentText,{id:\"alert-dialog-description\"},\"After signing in you will be able to retrieve your liked songs and like or dislike a song on your YouTube account.\")),/*#__PURE__*/React.createElement(DialogActions,null,/*#__PURE__*/React.createElement(Button,{variant:\"outlined\",onClick:handleClose,color:\"primary\"},\"Later\"),/*#__PURE__*/React.createElement(Button,{variant:\"outlined\",color:\"primary\",onClick:handleAuthClick},/*#__PURE__*/React.createElement(\"img\",{src:gIcon,height:\"25px\",alt:\"\",style:{marginRight:\"8px\"}}),\"Sign In\"))));};export default GoogleSignIn;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/GoogleSignIn.js"],"names":["React","useEffect","useState","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","clientId","gapi","window","GoogleSignIn","open","setOpen","updateSigninStatus","isSignedIn","console","log","setIsSignedIn","loadClient","auth2","getAuthInstance","currentUser","get","getAuthResponse","id_token","load","client","init","scope","then","listen","setTimeout","setApiKey","youtube","videos","list","part","myRating","response","err","error","handleAuthClick","event","signOut","signIn","handleSignoutClick","handleClose","localStorage","setItem","gIcon","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle\r\n} from \"@material-ui/core\";\r\nimport gIcon from \"../images/google.svg\";\r\n\r\n// your client id will be here\r\nconst clientId =\"304991981507-dtj026vui1dbrus032hksbnv8dk6m372.apps.googleusercontent.com\";\r\n\r\nconst gapi = window.gapi;\r\n// get the gapi from window\r\n\r\nconst GoogleSignIn = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    function updateSigninStatus(isSignedIn) {\r\n      if (isSignedIn) {\r\n        console.log(\"Signed in\");\r\n        setIsSignedIn(true);\r\n        // also close the popup\r\n        setOpen(false);\r\n        loadClient();\r\n        console.log(\r\n          gapi.auth2\r\n            .getAuthInstance()\r\n            .currentUser.get()\r\n            .getAuthResponse().id_token\r\n        );\r\n      } else {\r\n        console.log(\"Signed out\");\r\n        setIsSignedIn(false);\r\n      }\r\n    }\r\n\r\n    gapi.load(\"client:auth2\", () => {\r\n      gapi.client\r\n        .init({\r\n          clientId: clientId,\r\n          scope: \"https://www.googleapis.com/auth/youtube.readonly\"\r\n        })\r\n        .then(() => {\r\n          // Listen for sign-in state changes.\r\n          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\r\n          // Handle the initial sign-in state.\r\n          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        });\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setOpen(true);\r\n    }, 2000);\r\n    // show popup after two seconds\r\n  }, []);\r\n\r\n  function loadClient() {\r\n    gapi.client.setApiKey(\"AIzaSyDJHo6BZNDui-YvXPhb-U0DOUFGEWsWpvw\");\r\n    return gapi.client\r\n      .load(\"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\")\r\n      .then(\r\n        function() {\r\n          console.log(\"GAPI client loaded for API\");\r\n          gapi.client.youtube.videos\r\n            .list({\r\n              part: \"snippet\",\r\n              myRating: \"like\"\r\n            })\r\n            .then(response => {\r\n              console.log(response);\r\n            });\r\n        },\r\n        function(err) {\r\n          console.error(\"Error loading GAPI client for API\", err);\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   *  Called when the signed in status changes, to update the UI\r\n   *  appropriately. After a sign-in, the API is called.\r\n   */\r\n\r\n  const [isSignedIn, setIsSignedIn] = useState(false);\r\n\r\n  /**\r\n   *  Sign in the user upon button click.\r\n   */\r\n  function handleAuthClick(event) {\r\n    // if user is currently signed in then sign it out else sign in\r\n    if (isSignedIn) {\r\n      gapi.auth2.getAuthInstance().signOut();\r\n    } else {\r\n      gapi.auth2.getAuthInstance().signIn();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Sign out the user upon button click.\r\n   */\r\n  function handleSignoutClick(event) {\r\n    gapi.auth2.getAuthInstance().signOut();\r\n  }\r\n\r\n\r\n  function handleClose() {\r\n    // we will locally store if user dont want to sign in\r\n    localStorage.setItem(\"signInClosed\", true)\r\n    setOpen(false);\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          Sign In with your Google account ?\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            After signing in you will be able to retrieve your liked songs and\r\n            like or dislike a song on your YouTube account.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button variant=\"outlined\" onClick={handleClose} color=\"primary\">\r\n            Later\r\n          </Button>\r\n          <Button variant=\"outlined\" color=\"primary\" onClick={handleAuthClick}>\r\n            <img\r\n              src={gIcon}\r\n              height=\"25px\"\r\n              alt=\"\"\r\n              style={{ marginRight: \"8px\" }}\r\n            />\r\n            Sign In\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleSignIn;\r\n"]},"metadata":{},"sourceType":"module"}