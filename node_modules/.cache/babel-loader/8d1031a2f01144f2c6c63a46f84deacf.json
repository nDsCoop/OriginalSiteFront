{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nconst users = OrderedMap({\n  '1': {\n    _id: '1',\n    name: \"nDs\",\n    created: new Date(),\n    avatar: \"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"\n  },\n  '2': {\n    _id: '2',\n    name: \"nDs0\",\n    created: new Date(),\n    avatar: \"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"\n  },\n  '3': {\n    _id: '3',\n    name: \"nDs1\",\n    created: new Date(),\n    avatar: \"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"\n  }\n});\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = {\n      _id: '1',\n      name: 'nDs',\n      created: new Date()\n    };\n  }\n\n  addUserToChannel(channelId, userId) {\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      channel.members = this.channel.members.set(userId, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  searchUsers(search = \"\") {\n    let searchItems = new OrderedMap();\n\n    if (_.trim(search).length) {\n      users.filter(user => {\n        const name = _.get(user, 'name');\n\n        const userId = _.get(user, '_id');\n\n        if (_.includes(name, search)) {\n          searchItems = searchItems.set(userId, user);\n        }\n      });\n    }\n\n    return searchItems.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, \"_id\");\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId);\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    this.messages = this.messages.set(`${id}`, message); //add new message to \n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      const channel = this.channels.get(channelId);\n      channel.messages = channel.messages.set(id, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = [];\n\n    if (channel) {\n      channel.messages.map((value, key) => {\n        const message = this.messages.get(key);\n        messages.push(message);\n      });\n    }\n\n    return messages;\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.map((value, key) => {\n        const user = users.get(key);\n        members = members.set(key, user);\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    this.channels = this.channels.sort((a, b) => b.created - a.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/store.js"],"names":["OrderedMap","_","users","_id","name","created","Date","avatar","Store","constructor","appComponent","app","messages","channels","activeChannelId","user","addUserToChannel","channelId","userId","channel","get","members","set","update","searchUsers","search","searchItems","trim","length","filter","includes","valueSeq","onCreateNewChannel","addChannel","setActiveChannelId","getCurrentUser","id","getActiveChannel","first","addMessage","message","getMessages","getMessagesFromChannel","map","value","key","push","getMembersFromChannel","index","getChannels","sort","a","b","forceUpdate"],"mappings":"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","sourcesContent":["import { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\n\r\n\r\nconst users = OrderedMap({\r\n    '1': {_id:'1', name:\"nDs\", created: new Date(), avatar:\"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"},\r\n    '2': {_id:'2', name:\"nDs0\", created: new Date(), avatar:\"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"},\r\n    '3': {_id:'3', name:\"nDs1\", created: new Date() ,avatar:\"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"},\r\n})\r\nexport default class Store {\r\n    constructor(appComponent){\r\n        this.app = appComponent;\r\n        this.messages = new OrderedMap();\r\n        this.channels = new OrderedMap();\r\n        this.activeChannelId = null;\r\n        this.user = {\r\n            _id: '1',\r\n            name: 'nDs',\r\n            created: new Date(),\r\n        }\r\n    }\r\n\r\n    addUserToChannel(channelId, userId) {\r\n        const channel = this.channels.get(channelId);\r\n        if(channel) {\r\n            channel.members = this.channel.members.set(userId, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n    searchUsers(search = \"\"){\r\n        let searchItems = new OrderedMap();\r\n       \r\n        if(_.trim(search).length){\r\n\r\n            users.filter((user) => {\r\n                const name = _.get(user, 'name');\r\n                const userId = _.get(user, '_id');\r\n\r\n                if(_.includes(name, search)){\r\n                    searchItems = searchItems.set(userId, user);\r\n                }\r\n            })\r\n        }\r\n        return searchItems.valueSeq();\r\n    }\r\n    onCreateNewChannel(channel = {}){\r\n        const channelId = _.get(channel, \"_id\");\r\n        this.addChannel(channelId, channel );\r\n        this.setActiveChannelId(channelId);\r\n    }\r\n\r\n    getCurrentUser(){\r\n        return this.user;\r\n    }\r\n\r\n    setActiveChannelId(id) {\r\n        this.activeChannelId = id;\r\n        this.update();\r\n    }\r\n    getActiveChannel(){\r\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\r\n        return channel;\r\n    }\r\n\r\n    addMessage(id, message = {}){\r\n        this.messages = this.messages.set(`${id}`, message);\r\n\r\n        //add new message to \r\n        const channelId = _.get(message, 'channelId');\r\n        if(channelId){\r\n            const channel = this.channels.get(channelId);\r\n            channel.messages = channel.messages.set(id, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    getMessages(){\r\n        return this.messages.valueSeq();\r\n    }\r\n    getMessagesFromChannel(channel){\r\n        let messages = [];\r\n\r\n        if(channel){\r\n            channel.messages.map((value, key) => {\r\n\r\n                const message = this.messages.get(key);\r\n                messages.push(message);\r\n            });\r\n        }\r\n        return messages;\r\n        \r\n    }\r\n\r\n    getMembersFromChannel(channel){\r\n        let members = new OrderedMap();\r\n        if(channel){\r\n            channel.members.map((value, key) => {\r\n                const user = users.get(key);\r\n                members = members.set(key, user)\r\n            });\r\n        }\r\n        return members.valueSeq();\r\n    }\r\n\r\n\r\n    addChannel(index, channel = {}){\r\n        this.channels = this.channels.set(`${index}`, channel);\r\n        this.update();\r\n    }\r\n\r\n    getChannels(){\r\n        this.channels = this.channels.sort((a, b) => b.created - a.created);\r\n        return this.channels.valueSeq();\r\n    }\r\n    update(){\r\n        this.app.forceUpdate();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}