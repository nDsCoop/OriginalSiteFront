{"ast":null,"code":"import _classCallCheck from\"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{OrderedMap}from'immutable';import _ from'lodash';import Service from'./service';import Realtime from'./realtime';import moment from\"moment\";import{ObjectID}from'./helpers/objectid';var Store=/*#__PURE__*/function(){function Store(appComponent){_classCallCheck(this,Store);this.app=appComponent;this.service=new Service();this.messages=new OrderedMap();this.channels=new OrderedMap();this.activeChannelId=null;this.user=this.getUserFromLocalStorage();this.token=this.getTokenFromLocalStorage();this.users=new OrderedMap();this.realtime=new Realtime(this);this.fetchUserChannels();this.search={users:new OrderedMap()};}_createClass(Store,[{key:\"upLoadfile\",value:function upLoadfile(formData){var _this=this;var userToken=this.getUserTokenId();if(userToken){this.service.post('api/messages/uploadfiles',formData).then(function(res){console.log(res.data.success);if(!res.data.success){console.log(res.data.error);}if(res.data.success){var messageId=new ObjectID().toString();var channel=_this.getActiveChannel();var channelId=_.get(channel,'_id',null);var currentUser=_this.getCurrentUser();var message={_id:messageId,channelId:channelId,body:res.data.url,userId:_.get(currentUser,'_id'),type:\"VideoOrImage\",me:true};_this.addMessage(messageId,message);}}).catch(function(err){console.log(\"Send files Error: \",err);});}}},{key:\"fetchUserChannels\",value:function fetchUserChannels(){var _this2=this;var userToken=this.getUserTokenId();if(userToken){var options={headers:{authorization:userToken}};this.service.get(\"api/me/channels\",options).then(function(res){var channels=res.data;_.each(channels,function(c){_this2.realtime.onAddChannel(c);});var firstChannelId=_.get(channels,'[0]._id',null);_this2.fetchChannelMessages(firstChannelId);}).catch(function(err){console.log(\"An error fetch user channlels\",err);});}}},{key:\"addUserToCache\",value:function addUserToCache(user){user.avatar=this.loadUserAvatar(user);var id=_.toString(user._id);this.users=this.users.set(id,user);return user;}},{key:\"getUserTokenId\",value:function getUserTokenId(){return _.get(this.token,'_id',null);}},{key:\"loadUserAvatar\",value:function loadUserAvatar(user){return\"https://api.adorable.io/avatars/100/\".concat(user._id,\".png\");}},{key:\"startSearchUsers\",value:function startSearchUsers(){var _this3=this;var q=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";this.search.users=this.search.users.clear();//query to backend server and get list of users\nvar data={search:q};this.service.post('api/users/search',data).then(function(res){//list off users match\nvar users=_.get(res,'data',[]);// console.log(\"Get from server: \", users);\n_.each(users,function(user){//cache to this.users\n//add user to this.search.users\nuser.avatar=_this3.loadUserAvatar(user);var userId=\"\".concat(user._id);_this3.users=_this3.users.set(userId,user);_this3.search.users=_this3.search.users.set(userId,user);});_this3.update();}).catch(function(err){console.log(\" searching error\",err);});}},{key:\"setUserToken\",value:function setUserToken(accessToken){if(!accessToken){this.localStorage.removeItem('token');this.token=null;return;}this.token=accessToken;localStorage.setItem('token',JSON.stringify(accessToken));}},{key:\"clearCacheData\",value:function clearCacheData(){this.channels=this.channels.clear();this.users=this.users.clear();this.messages=this.messages.clear();}},{key:\"signOut\",value:function signOut(){var userId=_.toString(_.get(this.user,'_id',null));//request server and logout this user\nvar tokenId=_.get(this.token,'_id',null);var options={headers:{authorization:tokenId}};this.service.get('api/user/logout',options);this.isConnected();this.user=null;localStorage.removeItem('me');localStorage.removeItem('token');if(userId){this.users=this.users.remove(userId);}this.clearCacheData();this.update();}},{key:\"getTokenFromLocalStorage\",value:function getTokenFromLocalStorage(){if(this.token){return this.token;}var token=null;var data=localStorage.getItem('token');if(data){try{token=JSON.parse(data);}catch(err){console.log(err);}}return token;}},{key:\"getUserFromLocalStorage\",value:function getUserFromLocalStorage(){var _this4=this;var user=null;var data=localStorage.getItem('me');try{user=JSON.parse(data);}catch(err){console.log(err);}if(user){//connect to backend server verify this user\nvar token=this.getTokenFromLocalStorage();var tokenId=_.get(token,'_id');var options={headers:{authorization:tokenId}};this.service.get('api/users/me',options).then(function(res){//user login with token id\nvar accessToken=res.data;var user=_.get(accessToken,'user');_this4.setCurrentUser(user);_this4.setUserToken(accessToken);}).catch(function(err){_this4.signOut();});}return user;}},{key:\"setCurrentUser\",value:function setCurrentUser(user){user.avatar=this.loadUserAvatar(user);this.user=user;if(user){localStorage.setItem('me',JSON.stringify(user));//save to local store\nvar userId=\"\".concat(user._id);this.users=this.users.set(userId,user);}this.update();}},{key:\"register\",value:function register(user){var _this5=this;return new Promise(function(resolve,reject){_this5.service.post('api/users',user).then(function(user){console.log(\"Account Created \",user);return resolve(user);}).catch(function(err){return reject(\"An Error create your account!\");});});}},{key:\"login\",value:function login(){var _this6=this;var email=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var password=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var userEmail=_.toLower(email);var user={email:userEmail,password:password};console.log(\"Logining with: \",user);return new Promise(function(resolve,reject){_this6.service.post('api/users/login',user).then(function(res){//that mean successful login\nvar accessToken=_.get(res,'data');var user=_.get(accessToken,'user');_this6.setCurrentUser(user);_this6.setUserToken(accessToken);_this6.realtime.connect();// begin fetch user's channel\n_this6.fetchUserChannels();//Call to realtime and connect again to socket server with this user\n}).catch(function(err){var message=_.get(err,'res.data.err.message','Login Error');return reject(message);});});// const _this = this;\n// return new Promise((resolve, reject) => {\n//     const user = users.find((user) => user.email === userEmail);\n//     if( user ) {\n//         _this.setCurrentUser(user);\n//     }\n//     return user ? resolve(user) : reject(\"User not found!\")\n// });\n}},{key:\"addUserToChannel\",value:function addUserToChannel(channelId,userId){var channel=this.channels.get(channelId);if(channel){channel.members=channel.members.set(userId,true);this.channels=this.channels.set(channelId,channel);this.update();}}},{key:\"getSearchUsers\",value:function getSearchUsers(){// const keyword = _.toLower(search);\n// let searchItems = new OrderedMap();\n// const currentUser =this.getCurrentUser();\n// const currentUserId = _.get(currentUser, '_id');\n// if(_.trim(search).length){\n//    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n// }\nreturn this.search.users.valueSeq();}},{key:\"onCreateNewChannel\",value:function onCreateNewChannel(){var channel=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var channelId=_.get(channel,\"_id\");this.addChannel(channelId,channel);this.setActiveChannelId(channelId);}},{key:\"getCurrentUser\",value:function getCurrentUser(){return this.user;}},{key:\"fetchChannelMessages\",value:function fetchChannelMessages(channelId){var _this7=this;var channel=this.channels.get(channelId);if(channel&&!_.get(channel,'isFetchMessages')){var token=_.get(this.token,'_id');var options={headers:{authorization:token}};this.service.get(\"api/channels/\".concat(channelId,\"/messages\"),options).then(function(res){channel.isFetchMessages=true;var messages=res.data;_.each(messages,function(message){_this7.realtime.onAddMessage(message);});_this7.channels=_this7.channels.set(channelId,channel);}).catch(function(err){console.log(\"An error fetching channel 's messages\",err);});}}},{key:\"isConnected\",value:function isConnected(){return this.realtime.isConnected;}},{key:\"setActiveChannelId\",value:function setActiveChannelId(id){this.activeChannelId=id;this.fetchChannelMessages(id);this.update();}},{key:\"getActiveChannel\",value:function getActiveChannel(){var channel=this.activeChannelId?this.channels.get(this.activeChannelId):this.channels.first();return channel;}},{key:\"setMessage\",value:function setMessage(message){var _this8=this;var notify=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var id=_.toString(_.get(message,'_id'));this.messages=this.messages.set(id,message);var channelId=_.toString(message.channelId);var channel=this.channels.get(channelId);if(channel){channel.messages=channel.messages.set(id,true);channel.lastMessage=_.get(message,'body','');channel.notify=notify;this.channels=this.channels.set(channelId,channel);}else{// fetch to the server with channel info\nthis.service.get(\"api/channels/\".concat(channelId)).then(function(response){var channel=_.get(response,'data');/*const users = _.get(channel, 'users');\r\n                _.each(users, (user) => {\r\n\r\n                    this.addUserToCache(user);\r\n                });*/_this8.realtime.onAddChannel(channel);});}this.update();}},{key:\"addTyping\",value:function addTyping(channel){var typing=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(channel){var userId=\"\".concat(_.get(this.user,'_id',null));var channelId=_.get(channel,'_id');var obj={channelId:channelId,payload:typing,typier:userId};console.log(\"channel typing: \",channelId);this.realtime.send({action:'typing_status',payload:{obj:obj}});}this.update();}},{key:\"addMessage\",value:function addMessage(id){var message=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var user=this.getCurrentUser();message.user=user;this.messages=this.messages.set(id,message);//add new message to \nvar channelId=_.get(message,'channelId');if(channelId){var channel=this.channels.get(channelId);channel.lastMessage=_.get(message,'body','');//now i send this channel to the server\nthis.realtime.send({action:'create_channel',payload:channel});// send to the via websocket to create new message and notify other\nthis.realtime.send({action:'create_message',payload:message});channel.messages=channel.messages.set(id,true);channel.isNew=false;this.channels=this.channels.set(channelId,channel);}this.update();}},{key:\"removeMemberFromChannel\",value:function removeMemberFromChannel(){var channel=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var user=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!channel||!user){return;}var channelId=_.get(channel,'_id');var userId=_.get(user,'_id');channel.members=channel.members.remove(userId);this.channels=this.channels.set(channelId,channel);this.update();}},{key:\"getMessages\",value:function getMessages(){return this.messages.valueSeq();}},{key:\"getMessagesFromChannel\",value:function getMessagesFromChannel(channel){var _this9=this;var messages=new OrderedMap();if(channel){channel.messages.forEach(function(value,key){var message=_this9.messages.get(key);messages=messages.set(key,message);});}return messages.valueSeq();}},{key:\"getMembersFromChannel\",value:function getMembersFromChannel(channel){var _this10=this;var members=new OrderedMap();if(channel){channel.members.forEach(function(value,key){var userId=\"\".concat(key);var user=_this10.users.get(userId);// console.log(\"User from Channel: \", user);\nvar loggedUser=_this10.getCurrentUser();if(_.get(loggedUser,'_id')!==_.get(user,'_id')){members=members.set(key,user);}});}return members.valueSeq();}},{key:\"addChannel\",value:function addChannel(index){var channel=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.channels=this.channels.set(\"\".concat(index),channel);// console.log(channel);\n// console.log(\"Mess get from server to client: \", channel);\nthis.update();}},{key:\"getChannels\",value:function getChannels(){this.channels=this.channels.sort(function(a,b){return a.updated-b.updated;});return this.channels.valueSeq();}},{key:\"update\",value:function update(){this.app.forceUpdate();}}]);return Store;}();export{Store as default};","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/store.js"],"names":["OrderedMap","_","Service","Realtime","moment","ObjectID","Store","appComponent","app","service","messages","channels","activeChannelId","user","getUserFromLocalStorage","token","getTokenFromLocalStorage","users","realtime","fetchUserChannels","search","formData","userToken","getUserTokenId","post","then","res","console","log","data","success","error","messageId","toString","channel","getActiveChannel","channelId","get","currentUser","getCurrentUser","message","_id","body","url","userId","type","me","addMessage","catch","err","options","headers","authorization","each","c","onAddChannel","firstChannelId","fetchChannelMessages","avatar","loadUserAvatar","id","set","q","clear","update","accessToken","localStorage","removeItem","setItem","JSON","stringify","tokenId","isConnected","remove","clearCacheData","getItem","parse","setCurrentUser","setUserToken","signOut","Promise","resolve","reject","email","password","userEmail","toLower","connect","members","valueSeq","addChannel","setActiveChannelId","isFetchMessages","onAddMessage","first","notify","lastMessage","response","typing","obj","payload","typier","send","action","isNew","forEach","value","key","loggedUser","index","sort","a","b","updated","forceUpdate"],"mappings":"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","sourcesContent":["import { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\nimport Service from './service';\r\nimport Realtime from './realtime';\r\nimport moment from \"moment\";\r\nimport {ObjectID} from './helpers/objectid';\r\n\r\n\r\nexport default class Store {\r\n    constructor(appComponent){\r\n        this.app = appComponent;\r\n        this.service = new Service();\r\n        this.messages = new OrderedMap();\r\n        this.channels = new OrderedMap();\r\n        this.activeChannelId = null;\r\n\r\n        this.user = this.getUserFromLocalStorage();\r\n        this.token = this.getTokenFromLocalStorage();\r\n        this.users = new OrderedMap();\r\n\r\n        this.realtime = new Realtime(this);\r\n        this.fetchUserChannels();\r\n        this.search = {\r\n            users: new OrderedMap(),\r\n        }\r\n\r\n    }\r\n\r\n    upLoadfile(formData){\r\n        const userToken = this.getUserTokenId();\r\n\r\n        if(userToken){\r\n\r\n            this.service.post('api/messages/uploadfiles', formData).then((res) => {\r\n\r\n                console.log(res.data.success);\r\n                if(!res.data.success){\r\n                    console.log(res.data.error)\r\n                }\r\n                if (res.data.success) {\r\n                    const messageId = new ObjectID().toString();\r\n                    const channel = this.getActiveChannel();\r\n                    const channelId = _.get(channel , '_id', null);\r\n                    const currentUser = this.getCurrentUser();\r\n                    const message = {\r\n                        _id: messageId,\r\n                        channelId: channelId,\r\n                        body : res.data.url,\r\n                        userId: _.get(currentUser, '_id'),\r\n                        type:\"VideoOrImage\",\r\n                        me: true,\r\n                };\r\n                this.addMessage(messageId, message);\r\n\r\n            }\r\n            }).catch((err) => {\r\n                console.log(\"Send files Error: \", err);\r\n            });\r\n        }\r\n    \r\n       \r\n    }\r\n    fetchUserChannels(){\r\n        const userToken =this.getUserTokenId();\r\n        if(userToken){\r\n            const options = {\r\n                headers: {\r\n                    authorization: userToken,\r\n                }\r\n            }\r\n            this.service.get(`api/me/channels`, options).then((res) => {\r\n                const channels = res.data;\r\n                _.each(channels, (c) => {\r\n                    this.realtime.onAddChannel(c);\r\n                });\r\n\r\n                const firstChannelId = _.get(channels, '[0]._id', null);\r\n                this.fetchChannelMessages(firstChannelId);\r\n            }).catch((err) => {\r\n\r\n                console.log(\"An error fetch user channlels\", err);\r\n            })\r\n        }\r\n    }\r\n    addUserToCache(user){\r\n        user.avatar = this.loadUserAvatar(user);\r\n        const id = _.toString(user._id);\r\n        this.users = this.users.set(id, user);\r\n        return user;\r\n    }\r\n\r\n    getUserTokenId(){\r\n        return _.get(this.token, '_id', null);\r\n    }\r\n    loadUserAvatar(user){\r\n\r\n            return `https://api.adorable.io/avatars/100/${user._id}.png`\r\n       \r\n    }\r\n    startSearchUsers(q = \"\"){\r\n        this.search.users = this.search.users.clear();\r\n        //query to backend server and get list of users\r\n        const data = {search : q};\r\n        \r\n        this.service.post('api/users/search', data).then((res) => {\r\n            //list off users match\r\n            const users = _.get(res, 'data', []);\r\n            // console.log(\"Get from server: \", users);\r\n            _.each(users, (user) => {\r\n               //cache to this.users\r\n               //add user to this.search.users\r\n               user.avatar = this.loadUserAvatar(user);\r\n               const userId = `${user._id}`;\r\n               this.users = this.users.set(userId, user);\r\n               this.search.users = this.search.users.set(userId, user);\r\n\r\n           });\r\n           this.update();\r\n\r\n        }).catch((err) => {\r\n            console.log(\" searching error\", err);\r\n        }); \r\n    }\r\n\r\n\r\n    setUserToken(accessToken){\r\n        if(!accessToken){\r\n            this.localStorage.removeItem('token');\r\n            this.token = null;\r\n            return;\r\n        }\r\n        this.token = accessToken;\r\n        localStorage.setItem('token', JSON.stringify(accessToken));\r\n    }\r\n    clearCacheData(){\r\n        this.channels = this.channels.clear();\r\n        this.users = this.users.clear();\r\n        this.messages = this.messages.clear();\r\n    }\r\n    signOut(){\r\n\r\n        const userId = _.toString(_.get(this.user, '_id', null));\r\n        //request server and logout this user\r\n        const tokenId = _.get(this.token, '_id', null);\r\n\r\n        const options = {\r\n            headers : {\r\n                authorization: tokenId\r\n            }\r\n        }\r\n        this.service.get('api/user/logout', options);\r\n        this.isConnected();\r\n        this.user = null;\r\n        localStorage.removeItem('me');\r\n        localStorage.removeItem('token');\r\n        if(userId){\r\n            this.users = this.users.remove(userId);\r\n        }\r\n        this.clearCacheData();\r\n        this.update();\r\n    }\r\n\r\n    getTokenFromLocalStorage(){\r\n\r\n        if(this.token){\r\n            return this.token;\r\n        }\r\n\r\n        let token = null;\r\n        const data = localStorage.getItem('token');\r\n        if(data){\r\n            try{\r\n                token = JSON.parse(data);\r\n            }\r\n            catch (err){\r\n                console.log(err);\r\n            }\r\n            \r\n        }\r\n        return token;\r\n    }\r\n\r\n    getUserFromLocalStorage(){\r\n\r\n        let user = null;\r\n        const data = localStorage.getItem('me');\r\n         try {\r\n                user = JSON.parse(data);\r\n         }\r\n         catch(err) {\r\n             console.log(err);\r\n         }\r\n         if(user){\r\n            //connect to backend server verify this user\r\n            const token = this.getTokenFromLocalStorage();\r\n            const tokenId = _.get(token, '_id');\r\n            const options = {\r\n                headers: {\r\n                    authorization: tokenId,\r\n                }\r\n            }\r\n            \r\n            this.service.get('api/users/me', options).then((res) => {\r\n                //user login with token id\r\n                const accessToken = res.data;\r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n\r\n            }).catch(err => {\r\n                this.signOut();\r\n            });\r\n        }\r\n\r\n         return user;\r\n    }    \r\n        \r\n    \r\n    setCurrentUser(user){\r\n        user.avatar = this.loadUserAvatar(user);\r\n        this.user = user;\r\n        if(user){\r\n            \r\n            localStorage.setItem('me', JSON.stringify(user));\r\n            //save to local store\r\n            const userId =`${user._id}`;\r\n            this.users = this.users.set(userId, user);\r\n\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    register(user){\r\n        return new Promise((resolve, reject) => {\r\n            this.service.post('api/users', user).then((user) =>{\r\n                console.log(\"Account Created \", user);\r\n                return resolve(user);\r\n            }).catch((err) => {\r\n\r\n                return reject(\"An Error create your account!\");\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    login(email = null, password = null){\r\n\r\n        const userEmail = _.toLower(email);\r\n        const user = {\r\n            email: userEmail,\r\n            password: password,\r\n        }\r\n        console.log(\"Logining with: \", user);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this.service.post('api/users/login', user).then((res) => {\r\n                //that mean successful login\r\n                const accessToken = _.get(res, 'data'); \r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n                this.realtime.connect();\r\n\r\n                // begin fetch user's channel\r\n                this.fetchUserChannels();\r\n                //Call to realtime and connect again to socket server with this user\r\n                \r\n\r\n\r\n\r\n\r\n            }).catch((err) => {\r\n                \r\n                const message = _.get(err, 'res.data.err.message', 'Login Error');\r\n                return reject(message);\r\n            })\r\n        });\r\n        // const _this = this;\r\n        // return new Promise((resolve, reject) => {\r\n        //     const user = users.find((user) => user.email === userEmail);\r\n        //     if( user ) {\r\n        //         _this.setCurrentUser(user);\r\n        //     }\r\n        //     return user ? resolve(user) : reject(\"User not found!\")\r\n        // });\r\n    }\r\n\r\n    addUserToChannel(channelId, userId) {\r\n        const channel = this.channels.get(channelId);\r\n        if(channel) {\r\n            channel.members = channel.members.set(userId, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n            this.update();\r\n        }\r\n      \r\n    }\r\n    getSearchUsers(){\r\n        // const keyword = _.toLower(search);\r\n\r\n        // let searchItems = new OrderedMap();\r\n        // const currentUser =this.getCurrentUser();\r\n        // const currentUserId = _.get(currentUser, '_id');\r\n       \r\n        // if(_.trim(search).length){\r\n        //    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\r\n        // }\r\n\r\n        return this.search.users.valueSeq();\r\n    }\r\n\r\n    onCreateNewChannel(channel = {}){\r\n        const channelId = _.get(channel, \"_id\");\r\n        this.addChannel(channelId, channel );\r\n        this.setActiveChannelId(channelId);\r\n    \r\n    }\r\n\r\n    getCurrentUser(){\r\n        return this.user;\r\n    }\r\n\r\n    fetchChannelMessages(channelId){\r\n\r\n        let channel = this.channels.get(channelId);\r\n            if( channel && !_.get(channel, 'isFetchMessages')){\r\n\r\n                const token = _.get(this.token, '_id');\r\n                const options = {\r\n                    headers: {\r\n                        authorization: token,\r\n                    }\r\n                }\r\n\r\n                this.service.get(`api/channels/${channelId}/messages`, options).then((res) => {\r\n                    channel.isFetchMessages = true;\r\n\r\n                    const messages = res.data;\r\n                \r\n                    _.each(messages, (message) => {\r\n                        this.realtime.onAddMessage(message);\r\n                    });\r\n                    this.channels = this.channels.set(channelId, channel);\r\n\r\n                }).catch((err) => {\r\n                    console.log(\"An error fetching channel 's messages\", err);\r\n\r\n                }\r\n            )}\r\n        }   \r\n    \r\n\r\n    isConnected(){\r\n        return this.realtime.isConnected;\r\n    }\r\n\r\n    setActiveChannelId(id) {\r\n        this.activeChannelId = id;\r\n        this.fetchChannelMessages(id);\r\n        this.update();\r\n    }\r\n    getActiveChannel(){\r\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\r\n        return channel;\r\n    }\r\n\r\n    setMessage(message, notify = false){\r\n        const id = _.toString(_.get(message, '_id'));\r\n        this.messages = this.messages.set(id, message);\r\n        const channelId = _.toString(message.channelId);\r\n        const channel = this.channels.get(channelId);\r\n\r\n        if (channel) {\r\n            channel.messages = channel.messages.set(id, true);\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            channel.notify = notify;\r\n\r\n            this.channels = this.channels.set(channelId, channel);\r\n        } else {\r\n\r\n            // fetch to the server with channel info\r\n            this.service.get(`api/channels/${channelId}`).then((response) => {\r\n\r\n\r\n                const channel = _.get(response, 'data');\r\n\r\n                /*const users = _.get(channel, 'users');\r\n                _.each(users, (user) => {\r\n\r\n                    this.addUserToCache(user);\r\n                });*/\r\n\r\n                this.realtime.onAddChannel(channel);\r\n\r\n\r\n            })\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    addTyping(channel, typing = false){\r\n        \r\n        if(channel){\r\n            const userId = `${_.get(this.user, '_id', null)}`;\r\n            const channelId = _.get(channel, '_id');\r\n            const obj = {\r\n                channelId: channelId,\r\n                payload: typing,\r\n                typier: userId,\r\n            }\r\n            console.log(\"channel typing: \", channelId);\r\n            this.realtime.send(\r\n                {\r\n                    action: 'typing_status',\r\n                    payload: {obj},\r\n                }\r\n            );\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    addMessage(id, message = {}){\r\n\r\n        const user = this.getCurrentUser();\r\n        message.user = user;\r\n        this.messages = this.messages.set(id, message);\r\n        //add new message to \r\n        const channelId = _.get(message, 'channelId');\r\n        if(channelId){\r\n\r\n            \r\n            let channel = this.channels.get(channelId);\r\n\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            //now i send this channel to the server\r\n            \r\n           this.realtime.send(\r\n               {\r\n                    action: 'create_channel',\r\n                    payload: channel,\r\n                }\r\n            );\r\n            // send to the via websocket to create new message and notify other\r\n            this.realtime.send(\r\n                {\r\n                    action: 'create_message',\r\n                    payload: message,\r\n                }\r\n            );\r\n\r\n            channel.messages = channel.messages.set(id, true);\r\n\r\n\r\n            channel.isNew = false;\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeMemberFromChannel( channel = null, user = null){\r\n        if(!channel || !user ){\r\n            return;\r\n        }\r\n        const channelId = _.get(channel, '_id')\r\n        const userId = _.get(user, '_id');\r\n        channel.members = channel.members.remove(userId);\r\n        this.channels = this.channels.set(channelId, channel);\r\n        this.update();\r\n    }\r\n\r\n    getMessages(){\r\n        return this.messages.valueSeq();\r\n    }\r\n    getMessagesFromChannel(channel){\r\n        let messages = new OrderedMap();\r\n\r\n        if(channel){\r\n            channel.messages.forEach((value, key) => {\r\n\r\n                const message = this.messages.get(key);\r\n                messages = messages.set( key, message);\r\n    \r\n            });\r\n        }\r\n        return messages.valueSeq();\r\n        \r\n    }\r\n\r\n    getMembersFromChannel(channel){\r\n        let members = new OrderedMap();\r\n        if(channel){\r\n            channel.members.forEach((value, key) => {\r\n\r\n                const userId = `${key}`\r\n                const user = this.users.get(userId);\r\n                // console.log(\"User from Channel: \", user);\r\n                const loggedUser = this.getCurrentUser();\r\n                if( _.get(loggedUser, '_id') !== _.get(user, '_id')){\r\n                    members = members.set(key, user);\r\n                   \r\n                }\r\n            });\r\n               \r\n        }\r\n        return members.valueSeq();\r\n    }\r\n\r\n\r\n    addChannel(index, channel = {}){\r\n        this.channels = this.channels.set(`${index}`, channel);\r\n        // console.log(channel);\r\n        // console.log(\"Mess get from server to client: \", channel);\r\n        this.update();\r\n    }\r\n\r\n    getChannels(){\r\n        this.channels = this.channels.sort((a, b) => a.updated - b.updated);\r\n        return this.channels.valueSeq();\r\n    }\r\n    update(){\r\n        this.app.forceUpdate();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}