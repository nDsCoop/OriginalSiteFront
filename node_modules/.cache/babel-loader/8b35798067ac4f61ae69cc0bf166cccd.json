{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\RainAmina.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport * as THREE from 'three';\nimport smokeImg from '../images/smoke.png';\n\nconst RainAmina = () => {\n  const cubeRef = useRef(null);\n  let scene,\n      camera,\n      renderer,\n      cloudParticles = [],\n      flash,\n      rain,\n      rainGeo,\n      rainCount = 15000;\n\n  function animate() {\n    cloudParticles.forEach(p => {\n      p.rotation.z -= 0.002;\n    });\n    rainGeo.vertices.forEach(p => {\n      p.velocity -= 0.1 + Math.random() * 0.1;\n      p.y += p.velocity;\n\n      if (p.y < -200) {\n        p.y = 200;\n        p.velocity = 0;\n      }\n    });\n    rainGeo.verticesNeedUpdate = true;\n    rain.rotation.y += 0.002;\n\n    if (Math.random() > 0.93 || flash.power > 100) {\n      if (flash.power < 100) flash.position.set(Math.random() * 400, 300 + Math.random() * 200, 100);\n      flash.power = 50 + Math.random() * 500;\n    }\n\n    renderer.render(scene, camera);\n    requestAnimationFrame(animate);\n  }\n\n  useEffect(() => {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);\n    camera.position.z = 1;\n    camera.rotation.x = 1.16;\n    camera.rotation.y = -0.12;\n    camera.rotation.z = 0.27;\n    const ambient = new THREE.AmbientLight(0x555555);\n    scene.add(ambient);\n    const directionalLight = new THREE.DirectionalLight(0xffeedd);\n    directionalLight.position.set(0, 0, 1);\n    scene.add(directionalLight);\n    flash = new THREE.PointLight(0x062d89, 30, 500, 1.7);\n    flash.position.set(200, 300, 100);\n    scene.add(flash);\n    renderer = new THREE.WebGLRenderer();\n    scene.fog = new THREE.FogExp2(0x11111f, 0.002);\n    renderer.setClearColor(scene.fog.color);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    cubeRef.appendChild(renderer.domElement);\n    rainGeo = new THREE.Geometry();\n\n    for (let i = 0; i < rainCount; i++) {\n      const rainDrop = new THREE.Vector3(Math.random() * 400 - 200, Math.random() * 500 - 250, Math.random() * 400 - 200);\n      rainDrop.velocity = {};\n      rainDrop.velocity = 0;\n      rainGeo.vertices.push(rainDrop);\n    }\n\n    const rainMaterial = new THREE.PointsMaterial({\n      color: 0xaaaaaa,\n      size: 0.1,\n      transparent: true\n    });\n    rain = new THREE.Points(rainGeo, rainMaterial);\n    scene.add(rain);\n    let loader = new THREE.TextureLoader();\n    loader.load({\n      smokeImg\n    }, function (texture) {\n      const cloudGeo = new THREE.PlaneBufferGeometry(500, 500);\n      const cloudMaterial = new THREE.MeshLambertMaterial({\n        map: texture,\n        transparent: true\n      });\n\n      for (let p = 0; p < 25; p++) {\n        let cloud = new THREE.Mesh(cloudGeo, cloudMaterial);\n        cloud.position.set(Math.random() * 800 - 400, 500, Math.random() * 500 - 450);\n        cloud.rotation.x = 1.16;\n        cloud.rotation.y = -0.12;\n        cloud.rotation.z = Math.random() * 360;\n        cloud.material.opacity = 0.6;\n        cloudParticles.push(cloud);\n        scene.add(cloud);\n      }\n\n      animate();\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    ref: cubeRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default RainAmina;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/RainAmina.js"],"names":["React","useEffect","useRef","THREE","smokeImg","RainAmina","cubeRef","scene","camera","renderer","cloudParticles","flash","rain","rainGeo","rainCount","animate","forEach","p","rotation","z","vertices","velocity","Math","random","y","verticesNeedUpdate","power","position","set","render","requestAnimationFrame","Scene","PerspectiveCamera","window","innerWidth","innerHeight","x","ambient","AmbientLight","add","directionalLight","DirectionalLight","PointLight","WebGLRenderer","fog","FogExp2","setClearColor","color","setSize","appendChild","domElement","Geometry","i","rainDrop","Vector3","push","rainMaterial","PointsMaterial","size","transparent","Points","loader","TextureLoader","load","texture","cloudGeo","PlaneBufferGeometry","cloudMaterial","MeshLambertMaterial","map","cloud","Mesh","material","opacity"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as THREE from 'three'\r\nimport smokeImg from '../images/smoke.png';\r\n \r\nconst RainAmina = () => {\r\n    const cubeRef = useRef(null);\r\n    \r\n    let scene,camera, renderer, cloudParticles = [], flash, rain, rainGeo, rainCount = 15000;\r\n    \r\n    function animate() {\r\n        cloudParticles.forEach(p => {\r\n          p.rotation.z -=0.002;\r\n        });\r\n        rainGeo.vertices.forEach(p => {\r\n          p.velocity -= 0.1 + Math.random() * 0.1;\r\n          p.y += p.velocity;\r\n          if (p.y < -200) {\r\n            p.y = 200;\r\n            p.velocity = 0;\r\n          }\r\n        });\r\n        rainGeo.verticesNeedUpdate = true;\r\n        rain.rotation.y +=0.002;\r\n        if(Math.random() > 0.93 || flash.power > 100) {\r\n          if(flash.power < 100) \r\n            flash.position.set(\r\n              Math.random()*400,\r\n              300 + Math.random() *200,\r\n              100\r\n            );\r\n          flash.power = 50 + Math.random() * 500;\r\n        }\r\n        renderer.render(scene, camera);\r\n        requestAnimationFrame(animate);\r\n      }\r\n \r\n    useEffect(() => {\r\n        scene = new THREE.Scene();\r\n        camera = new THREE.PerspectiveCamera(60,window.innerWidth / window.innerHeight, 1, 1000);\r\n        camera.position.z = 1;\r\n        camera.rotation.x = 1.16;\r\n        camera.rotation.y = -0.12;\r\n        camera.rotation.z = 0.27;\r\n        const ambient = new THREE.AmbientLight(0x555555);\r\n        scene.add(ambient);\r\n        const directionalLight = new THREE.DirectionalLight(0xffeedd);\r\n        directionalLight.position.set(0,0,1);\r\n        scene.add(directionalLight);\r\n        flash = new THREE.PointLight(0x062d89, 30, 500 ,1.7);\r\n        flash.position.set(200,300,100);\r\n        scene.add(flash);\r\n        renderer = new THREE.WebGLRenderer();\r\n        scene.fog = new THREE.FogExp2(0x11111f, 0.002);\r\n        renderer.setClearColor(scene.fog.color);\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        cubeRef.appendChild(renderer.domElement);\r\n        rainGeo = new THREE.Geometry();\r\n        for(let i=0;i<rainCount;i++) {\r\n          const rainDrop = new THREE.Vector3(\r\n            Math.random() * 400 -200,\r\n            Math.random() * 500 - 250,\r\n            Math.random() * 400 - 200\r\n          );\r\n          rainDrop.velocity = {};\r\n          rainDrop.velocity = 0;\r\n          rainGeo.vertices.push(rainDrop);\r\n        }\r\n        const rainMaterial = new THREE.PointsMaterial({\r\n          color: 0xaaaaaa,\r\n          size: 0.1,\r\n          transparent: true\r\n        });\r\n        rain = new THREE.Points(rainGeo,rainMaterial);\r\n        scene.add(rain);\r\n        let loader = new THREE.TextureLoader();\r\n        loader.load({smokeImg}, function(texture){\r\n          const cloudGeo = new THREE.PlaneBufferGeometry(500,500);\r\n          const cloudMaterial = new THREE.MeshLambertMaterial({\r\n            map: texture,\r\n            transparent: true\r\n          });\r\n          for(let p=0; p<25; p++) {\r\n            let cloud = new THREE.Mesh(cloudGeo,cloudMaterial);\r\n            cloud.position.set(\r\n              Math.random()*800 -400,\r\n              500,\r\n              Math.random()*500 - 450\r\n            );\r\n            cloud.rotation.x = 1.16;\r\n            cloud.rotation.y = -0.12;\r\n            cloud.rotation.z = Math.random()*360;\r\n            cloud.material.opacity = 0.6;\r\n            cloudParticles.push(cloud);\r\n            scene.add(cloud);\r\n          }\r\n          animate();\r\n        });\r\n }, []);\r\n return (\r\n    <>\r\n    <div ref={cubeRef}></div>\r\n    </>\r\n )\r\n};\r\n \r\nexport default RainAmina;"]},"metadata":{},"sourceType":"module"}