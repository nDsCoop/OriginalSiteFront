{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\App3.js\";\nimport React, { Component } from 'react';\nimport defaultImg from \"../images/Logomini.svg\";\nimport className from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nimport { ObjectID } from \"../helpers/objectid\";\nimport { IconButton } from '@material-ui/core';\nimport { MdSettings } from 'react-icons/md';\nimport moment from 'moment'; // import { UserLists } from \"./searchUser\";\n\nexport default class App3 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderChannelTitle = (channel = {}) => {\n      const {\n        store\n      } = this.props;\n      const members = store.getMembersFromChannel(channel);\n      const names = [];\n      members.forEach(user => {\n        const name = _.get(user, 'name');\n\n        names.push(name);\n      });\n      return /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 16\n        }\n      }, _.join(names, ','));\n    };\n\n    this.handleOnClick = user => {\n      console.log(\"hsdcysvsv\", user.name);\n      const {\n        store\n      } = this.props;\n\n      const userId = _.get(user, '_id');\n\n      const channelId = _.get(store.getActiveChannel(), '_id');\n\n      store.addUserToChannel(channelId, userId);\n    };\n\n    this._onCreateChannel = () => {\n      const {\n        store\n      } = this.props;\n      const channelId = new ObjectID().toString();\n      const channel = {\n        _id: channelId,\n        title: 'New Mess',\n        lastMessage: \"\",\n        members: new OrderedMap(),\n        messages: new OrderedMap(),\n        isNew: true,\n        created: new Date()\n      };\n      store.onCreateNewChannel(channel);\n    };\n\n    this.scrollMessagesToBottom = () => {\n      if (this.messagesRef) {\n        this.messagesRef.scrollTop = this.messagesRef.scrollHeight;\n      }\n    };\n\n    this.handleSubmit = e => {\n      const {\n        newMessage\n      } = this.state;\n      const {\n        store\n      } = this.props;\n      e.preventDefault();\n\n      if (_.trim(newMessage).length) {\n        const messageId = new ObjectID().toString();\n        const channel = store.getActiveChannel();\n\n        const channelId = _.get(channel, '_id', null);\n\n        const currentUser = store.getCurrentUser();\n        const message = {\n          _id: messageId,\n          channelId: channelId,\n          body: newMessage,\n          author: _.get(currentUser, 'name'),\n          avatar: defaultImg,\n          me: true\n        };\n        store.addMessage(messageId, message);\n        this.setState({\n          newMessage: \"\"\n        });\n      }\n\n      this.setState({\n        newMessage: \"\"\n      });\n    };\n\n    this._onResi = () => {\n      this.setState({\n        height: window.innerHeight\n      });\n    };\n\n    this.addTestMessages = () => {\n      const {\n        store\n      } = this.props;\n\n      for (let i = 0; i < 20; i++) {\n        let isMe = false;\n\n        if (i % 2 === 0) {\n          isMe = true;\n        }\n\n        const newMsg = {\n          _id: `${i}`,\n          author: `Author: ${i}`,\n          body: `The body of message ${i}`,\n          avatar: defaultImg,\n          me: isMe,\n          timing: '0:00'\n        };\n        store.addMessage(i, newMsg);\n      }\n\n      for (let c = 0; c < 10; c++) {\n        const newChannel = {\n          _id: `${c}`,\n          title: `Channel title ${c}`,\n          lastMessage: `Hey there is.. ${c}`,\n          members: new OrderedMap({\n            '1': true,\n            '2': true\n          }),\n          messages: new OrderedMap(),\n          created: new Date()\n        };\n        const moreMsgId = `${c + 1}`;\n        const msgId = `${c}`;\n        newChannel.messages = newChannel.messages.set(msgId, true);\n        newChannel.messages = newChannel.messages.set(moreMsgId, true);\n        store.addChannel(c, newChannel);\n      }\n    };\n\n    this.state = {\n      height: window.innerHeight,\n      newMessage: '',\n      searchUser: '',\n      showSearchUser: false\n    };\n  }\n\n  renderMessage(message) {\n    const txt = _.get(message, 'body', '');\n\n    const html = _.split(txt, '\\n').map((m, key) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: key,\n        dangerouslySetInnerHTML: {\n          __html: m\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 20\n        }\n      });\n    });\n\n    return html;\n  }\n\n  componentDidUpdate() {\n    this.scrollMessagesToBottom();\n    console.log(\"CDidUpdate\");\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._onResi);\n    this.addTestMessages();\n    console.log(\"CDidMount\");\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._onResi);\n    console.log(\"CWillUnMount\");\n  }\n\n  render() {\n    const {\n      height,\n      newMessage,\n      searchUser\n    } = this.state;\n    const {\n      store\n    } = this.props;\n    const activeChannel = store.getActiveChannel();\n    const messages = store.getMessagesFromChannel(activeChannel);\n    const members = store.getMembersFromChannel(activeChannel);\n    const channels = store.getChannels();\n    const usersList = store.searchUsers(searchUser);\n    const style = {\n      height: height\n    };\n\n    const resultSearch = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"search-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }\n      }, usersList.map((user, index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          onClick: () => this.handleOnClick(user),\n          key: index,\n          className: \"user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 36\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: user.avatar,\n          alt: user.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }\n        }, user.name));\n      })));\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      className: \"app3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"action\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      onClick: this._onCreateChannel,\n      className: \"btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }\n    }, \"AddNew\"))), _.get(activeChannel, 'isNew') ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 54\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"tool\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      value: this.state.searchUser,\n      placeholder: \"To UserName/Email\",\n      onChange: ({\n        target\n      }) => {\n        this.setState({\n          searchUser: target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 29\n      }\n    })), resultSearch()) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-mid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 25\n      }\n    }, _.get(activeChannel, 'title', ''))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"name-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }, \"nDs\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: defaultImg,\n      alt: \"user-img\",\n      className: \"img-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolsRight-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      style: {\n        color: \"rgba(0, 0, 0, 0.5)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MdSettings, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 29\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chanels\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }, channels.map((channel, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: index => {\n          store.setActiveChannelId(channel._id);\n        },\n        key: channel._id,\n        className: className('chanel', {\n          'active': _.get(activeChannel, '_id') === _.get(channel, '_id', null)\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: defaultImg,\n        alt: \"user-img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chanel-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 41\n        }\n      }, this.renderChannelTitle(channel), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 45\n        }\n      }, channel.lastMessage)));\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: ref => this.messagesRef = ref,\n      className: \"messages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, messages.map((mess, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: `${mess.me ? 'message-me' : 'message'}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: mess.avatar,\n        alt: \"user-img\",\n        className: \"img-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 45\n        }\n      }, `${mess.me ? 'Me' : mess.author}`, \" say:\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"message-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 45\n        }\n      }, this.renderMessage(mess), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"timing\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 49\n        }\n      }, mess.timing))));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      disabled: newMessage.length < 1,\n      className: \"message-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"message\",\n      ref: input => this.input = input,\n      type: \"text\",\n      className: \"form-control\",\n      value: newMessage,\n      autoComplete: 'off',\n      placeholder: \"Type something interesting\",\n      onKeyUp: e => {\n        if (e.keyCode === 13 && !e.shiftKey) {\n          this.handleSubmit(e);\n        }\n      },\n      onChange: ({\n        target\n      }) => {\n        this.setState({\n          newMessage: target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: newMessage.length < 1,\n      type: \"submit\",\n      className: \"send\",\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 33\n      }\n    }, \" Send \")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 25\n      }\n    }, \"Members\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chanels\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 25\n      }\n    }, members.map((member, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"chanel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: _.get(member, 'avatar'),\n        alt: \"user-img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chanel-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 45\n        }\n      }, member.name), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 45\n        }\n      }, \"Joined: 2000 years ago\")));\n    })))));\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/App3.js"],"names":["React","Component","className","Link","OrderedMap","_","ObjectID","IconButton","MdSettings","moment","App3","constructor","props","renderChannelTitle","channel","store","members","getMembersFromChannel","names","forEach","user","name","get","push","join","handleOnClick","console","log","userId","channelId","getActiveChannel","addUserToChannel","_onCreateChannel","toString","_id","title","lastMessage","messages","isNew","created","Date","onCreateNewChannel","scrollMessagesToBottom","messagesRef","scrollTop","scrollHeight","handleSubmit","e","newMessage","state","preventDefault","trim","length","messageId","currentUser","getCurrentUser","message","body","author","avatar","defaultImg","me","addMessage","setState","_onResi","height","window","innerHeight","addTestMessages","i","isMe","newMsg","timing","c","newChannel","moreMsgId","msgId","set","addChannel","searchUser","showSearchUser","renderMessage","txt","html","split","map","m","key","__html","componentDidUpdate","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","activeChannel","getMessagesFromChannel","channels","getChannels","usersList","searchUsers","style","resultSearch","index","target","value","color","setActiveChannelId","ref","mess","input","keyCode","shiftKey","member"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;;AAIA,eAAe,MAAMC,IAAN,SAAmBT,SAAnB,CAA6B;AACxCU,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAWlBC,kBAXkB,GAWG,CAACC,OAAO,GAAG,EAAX,KAAkB;AACnC,YAAM;AAAEC,QAAAA;AAAF,UAAY,KAAKH,KAAvB;AACA,YAAMI,OAAO,GAAGD,KAAK,CAACE,qBAAN,CAA4BH,OAA5B,CAAhB;AACC,YAAMI,KAAK,GAAG,EAAd;AAEAF,MAAAA,OAAO,CAACG,OAAR,CAAiBC,IAAD,IAAU;AACtB,cAAMC,IAAI,GAAGhB,CAAC,CAACiB,GAAF,CAAMF,IAAN,EAAY,MAAZ,CAAb;;AACAF,QAAAA,KAAK,CAACK,IAAN,CAAWF,IAAX;AACH,OAHD;AAID,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKhB,CAAC,CAACmB,IAAF,CAAON,KAAP,EAAc,GAAd,CAAL,CAAP;AACH,KArBiB;;AAAA,SAuBlBO,aAvBkB,GAuBDL,IAAD,IAAU;AACtBM,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBP,IAAI,CAACC,IAA7B;AACA,YAAM;AAAEN,QAAAA;AAAF,UAAW,KAAKH,KAAtB;;AACA,YAAMgB,MAAM,GAAGvB,CAAC,CAACiB,GAAF,CAAMF,IAAN,EAAY,KAAZ,CAAf;;AACA,YAAMS,SAAS,GAAGxB,CAAC,CAACiB,GAAF,CAAOP,KAAK,CAACe,gBAAN,EAAP,EAAgC,KAAhC,CAAlB;;AACAf,MAAAA,KAAK,CAACgB,gBAAN,CAAuBF,SAAvB,EAAkCD,MAAlC;AACH,KA7BiB;;AAAA,SA8BlBI,gBA9BkB,GA8BC,MAAK;AACpB,YAAM;AAAEjB,QAAAA;AAAF,UAAW,KAAKH,KAAtB;AACA,YAAMiB,SAAS,GAAG,IAAIvB,QAAJ,GAAe2B,QAAf,EAAlB;AACA,YAAMnB,OAAO,GAAG;AACZoB,QAAAA,GAAG,EAAEL,SADO;AAEZM,QAAAA,KAAK,EAAE,UAFK;AAGZC,QAAAA,WAAW,EAAE,EAHD;AAIZpB,QAAAA,OAAO,EAAE,IAAIZ,UAAJ,EAJG;AAKZiC,QAAAA,QAAQ,EAAE,IAAIjC,UAAJ,EALE;AAMZkC,QAAAA,KAAK,EAAE,IANK;AAOZC,QAAAA,OAAO,EAAE,IAAIC,IAAJ;AAPG,OAAhB;AASAzB,MAAAA,KAAK,CAAC0B,kBAAN,CAAyB3B,OAAzB;AACH,KA3CiB;;AAAA,SA4ClB4B,sBA5CkB,GA4CO,MAAM;AAC3B,UAAG,KAAKC,WAAR,EAAoB;AAChB,aAAKA,WAAL,CAAiBC,SAAjB,GAA6B,KAAKD,WAAL,CAAiBE,YAA9C;AACH;AACJ,KAhDiB;;AAAA,SAwDlBC,YAxDkB,GAwDFC,CAAD,IAAO;AAElB,YAAM;AAAEC,QAAAA;AAAF,UAAiB,KAAKC,KAA5B;AACA,YAAM;AAAElC,QAAAA;AAAF,UAAY,KAAKH,KAAvB;AACAmC,MAAAA,CAAC,CAACG,cAAF;;AAEA,UAAG7C,CAAC,CAAC8C,IAAF,CAAOH,UAAP,EAAmBI,MAAtB,EAA6B;AACzB,cAAMC,SAAS,GAAG,IAAI/C,QAAJ,GAAe2B,QAAf,EAAlB;AACA,cAAMnB,OAAO,GAAGC,KAAK,CAACe,gBAAN,EAAhB;;AACA,cAAMD,SAAS,GAAGxB,CAAC,CAACiB,GAAF,CAAMR,OAAN,EAAgB,KAAhB,EAAuB,IAAvB,CAAlB;;AACA,cAAMwC,WAAW,GAAGvC,KAAK,CAACwC,cAAN,EAApB;AACA,cAAMC,OAAO,GAAG;AACZtB,UAAAA,GAAG,EAAEmB,SADO;AAEZxB,UAAAA,SAAS,EAAEA,SAFC;AAGZ4B,UAAAA,IAAI,EAAGT,UAHK;AAIZU,UAAAA,MAAM,EAAGrD,CAAC,CAACiB,GAAF,CAAMgC,WAAN,EAAmB,MAAnB,CAJG;AAKZK,UAAAA,MAAM,EAAEC,UALI;AAMZC,UAAAA,EAAE,EAAE;AANQ,SAAhB;AASA9C,QAAAA,KAAK,CAAC+C,UAAN,CAAiBT,SAAjB,EAA4BG,OAA5B;AACA,aAAKO,QAAL,CAAc;AAACf,UAAAA,UAAU,EAAE;AAAb,SAAd;AACH;;AACD,WAAKe,QAAL,CAAc;AAACf,QAAAA,UAAU,EAAE;AAAb,OAAd;AAEH,KAjFiB;;AAAA,SAkFlBgB,OAlFkB,GAkFR,MAAM;AACZ,WAAKD,QAAL,CAAc;AAACE,QAAAA,MAAM,EAAEC,MAAM,CAACC;AAAhB,OAAd;AACH,KApFiB;;AAAA,SAqFlBC,eArFkB,GAqFA,MAAM;AACpB,YAAM;AAACrD,QAAAA;AAAD,UAAU,KAAKH,KAArB;;AAGA,WAAI,IAAIyD,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA2B;AACvB,YAAIC,IAAI,GAAG,KAAX;;AACA,YAAGD,CAAC,GAAG,CAAJ,KAAU,CAAb,EAAgB;AACZC,UAAAA,IAAI,GAAG,IAAP;AACH;;AACD,cAAMC,MAAM,GAAG;AACXrC,UAAAA,GAAG,EAAG,GAAEmC,CAAE,EADC;AAEXX,UAAAA,MAAM,EAAG,WAAUW,CAAE,EAFV;AAGXZ,UAAAA,IAAI,EAAG,uBAAsBY,CAAE,EAHpB;AAIXV,UAAAA,MAAM,EAAEC,UAJG;AAKXC,UAAAA,EAAE,EAAES,IALO;AAMXE,UAAAA,MAAM,EAAE;AANG,SAAf;AAQAzD,QAAAA,KAAK,CAAC+C,UAAN,CAAiBO,CAAjB,EAAoBE,MAApB;AAEH;;AAED,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC,EAAlB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,cAAMC,UAAU,GAAE;AACdxC,UAAAA,GAAG,EAAG,GAAEuC,CAAE,EADI;AAEdtC,UAAAA,KAAK,EAAG,iBAAgBsC,CAAE,EAFZ;AAGdrC,UAAAA,WAAW,EAAG,kBAAiBqC,CAAE,EAHnB;AAIdzD,UAAAA,OAAO,EAAE,IAAIZ,UAAJ,CAAe;AACpB,iBAAK,IADe;AAEpB,iBAAK;AAFe,WAAf,CAJK;AAQdiC,UAAAA,QAAQ,EAAE,IAAIjC,UAAJ,EARI;AASdmC,UAAAA,OAAO,EAAE,IAAIC,IAAJ;AATK,SAAlB;AAWA,cAAMmC,SAAS,GAAG,GAAEF,CAAC,GAAG,CAAE,EAA1B;AACA,cAAMG,KAAK,GAAI,GAAEH,CAAE,EAAnB;AACAC,QAAAA,UAAU,CAACrC,QAAX,GAAsBqC,UAAU,CAACrC,QAAX,CAAoBwC,GAApB,CAAwBD,KAAxB,EAA+B,IAA/B,CAAtB;AACAF,QAAAA,UAAU,CAACrC,QAAX,GAAsBqC,UAAU,CAACrC,QAAX,CAAoBwC,GAApB,CAAwBF,SAAxB,EAAmC,IAAnC,CAAtB;AACA5D,QAAAA,KAAK,CAAC+D,UAAN,CAAiBL,CAAjB,EAAoBC,UAApB;AACH;AAEJ,KA7HiB;;AAEd,SAAKzB,KAAL,GAAa;AACTgB,MAAAA,MAAM,EAAEC,MAAM,CAACC,WADN;AAETnB,MAAAA,UAAU,EAAE,EAFH;AAGT+B,MAAAA,UAAU,EAAE,EAHH;AAITC,MAAAA,cAAc,EAAG;AAJR,KAAb;AAOH;;AAwCDC,EAAAA,aAAa,CAACzB,OAAD,EAAS;AAClB,UAAM0B,GAAG,GAAG7E,CAAC,CAACiB,GAAF,CAAMkC,OAAN,EAAe,MAAf,EAAwB,EAAxB,CAAZ;;AACA,UAAM2B,IAAI,GAAG9E,CAAC,CAAC+E,KAAF,CAAQF,GAAR,EAAa,IAAb,EAAmBG,GAAnB,CAAuB,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAC5C,0BAAO;AAAG,QAAA,GAAG,EAAEA,GAAR;AAAa,QAAA,uBAAuB,EAAE;AAAEC,UAAAA,MAAM,EAAEF;AAAV,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFY,CAAb;;AAGA,WAAOH,IAAP;AACH;;AAuEDM,EAAAA,kBAAkB,GAAE;AAChB,SAAK/C,sBAAL;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH;;AACD+D,EAAAA,iBAAiB,GAAE;AACfxB,IAAAA,MAAM,CAACyB,gBAAP,CAAwB,QAAxB,EAAkC,KAAK3B,OAAvC;AACA,SAAKI,eAAL;AACA1C,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;;AACDiE,EAAAA,oBAAoB,GAAE;AAClB1B,IAAAA,MAAM,CAAC2B,mBAAP,CAA2B,QAA3B,EAAqC,KAAK7B,OAA1C;AACAtC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;;AAEDmE,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAE7B,MAAAA,MAAF;AAAUjB,MAAAA,UAAV;AAAsB+B,MAAAA;AAAtB,QAAqC,KAAK9B,KAAhD;AACA,UAAM;AAAElC,MAAAA;AAAF,QAAY,KAAKH,KAAvB;AACA,UAAMmF,aAAa,GAAGhF,KAAK,CAACe,gBAAN,EAAtB;AACA,UAAMO,QAAQ,GAAGtB,KAAK,CAACiF,sBAAN,CAA6BD,aAA7B,CAAjB;AACA,UAAM/E,OAAO,GAAGD,KAAK,CAACE,qBAAN,CAA4B8E,aAA5B,CAAhB;AACA,UAAME,QAAQ,GAAGlF,KAAK,CAACmF,WAAN,EAAjB;AACA,UAAMC,SAAS,GAAGpF,KAAK,CAACqF,WAAN,CAAkBrB,UAAlB,CAAlB;AACA,UAAMsB,KAAK,GAAG;AACVpC,MAAAA,MAAM,EAAEA;AADE,KAAd;;AAGA,UAAMqC,YAAY,GAAG,MAAM;AACnB,0BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCH,SAAS,CAACd,GAAV,CAAc,CAACjE,IAAD,EAAOmF,KAAP,KAAgB;AAC3B,4BAAO;AAAK,UAAA,OAAO,EAAE,MAAM,KAAK9E,aAAL,CAAmBL,IAAnB,CAApB;AAA8C,UAAA,GAAG,EAAEmF,KAAnD;AAA0D,UAAA,SAAS,EAAC,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACP;AAAK,UAAA,GAAG,EAAEnF,IAAI,CAACuC,MAAf;AAAuB,UAAA,GAAG,EAAEvC,IAAI,CAACC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADO,eAEP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOD,IAAI,CAACC,IAAZ,CAFO,CAAP;AAIH,OALA,CADD,CADJ,CADJ;AAaP,KAdD;;AAeA,wBACI;AAAK,MAAA,KAAK,EAAEgF,KAAZ;AAAmB,MAAA,SAAS,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACK;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAG,KAAKrE,gBAArB;AAAuC,MAAA,SAAS,EAAC,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ,CADL,EAOM3B,CAAC,CAACiB,GAAF,CAAMyE,aAAN,EAAqB,OAArB,iBAAgC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC7B;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACA,MAAA,IAAI,EAAC,MADL;AAEA,MAAA,KAAK,EAAI,KAAK9C,KAAL,CAAW8B,UAFpB;AAGA,MAAA,WAAW,EAAC,mBAHZ;AAIA,MAAA,QAAQ,EACJ,CAAC;AAACyB,QAAAA;AAAD,OAAD,KAAY;AACR,aAAKzC,QAAL,CAAc;AAACgB,UAAAA,UAAU,EAACyB,MAAM,CAACC;AAAnB,SAAd;AACH,OAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAD6B,EAa5BH,YAAY,EAbgB,CAAhC,GAcY,IArBlB,eAuBK;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKjG,CAAC,CAACiB,GAAF,CAAMyE,aAAN,EAAoB,OAApB,EAA6B,EAA7B,CAAL,CADJ,CAvBL,eA0BK;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI;AAAK,MAAA,GAAG,EAAEnC,UAAV;AAAsB,MAAA,GAAG,EAAC,UAA1B;AAAqC,MAAA,SAAS,EAAC,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,eAKI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,UAAD;AAAa,MAAA,KAAK,EAAE;AAAE8C,QAAAA,KAAK,EAAE;AAAT,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADA,CALJ,CA1BL,CADH,eAuCI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKT,QAAQ,CAACZ,GAAT,CAAa,CAACvE,OAAD,EAAUyF,KAAV,KAAmB;AAC7B,0BACI;AAAK,QAAA,OAAO,EAAIA,KAAD,IAAW;AACtBxF,UAAAA,KAAK,CAAC4F,kBAAN,CAAyB7F,OAAO,CAACoB,GAAjC;AACH,SAFD;AAEG,QAAA,GAAG,EAAEpB,OAAO,CAACoB,GAFhB;AAEqB,QAAA,SAAS,EAAEhC,SAAS,CAAC,QAAD,EAAW;AAAC,oBAAWG,CAAC,CAACiB,GAAF,CAAMyE,aAAN,EAAqB,KAArB,MAAgC1F,CAAC,CAACiB,GAAF,CAAMR,OAAN,EAAe,KAAf,EAAsB,IAAtB;AAA5C,SAAX,CAFzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,GAAG,EAAE8C,UAAV;AAAsB,QAAA,GAAG,EAAC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAHJ,eAMI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK/C,kBAAL,CAAwBC,OAAxB,CADL,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,OAAO,CAACsB,WAAZ,CAFJ,CANJ,CADJ;AAaH,KAdA,CADL,CADJ,CADJ,eAqBI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAGwE,GAAD,IAAS,KAAKjE,WAAL,GAAmBiE,GAAtC;AAA2C,MAAA,SAAS,EAAC,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQvE,QAAQ,CAACgD,GAAT,CAAa,CAACwB,IAAD,EAAON,KAAP,KAAiB;AAC1B,0BACI;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAiB,QAAA,SAAS,EAAG,GAAEM,IAAI,CAAChD,EAAL,GAAU,YAAV,GAAyB,SAAU,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAK,QAAA,GAAG,EAAEgD,IAAI,CAAClD,MAAf;AAAuB,QAAA,GAAG,EAAC,UAA3B;AAAsC,QAAA,SAAS,EAAC,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,eAEA;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4B,GAAEkD,IAAI,CAAChD,EAAL,GAAU,IAAV,GAAiBgD,IAAI,CAACnD,MAAO,EAA3D,UADJ,eAEI;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM,KAAKuB,aAAL,CAAmB4B,IAAnB,CADN,eAEI;AAAG,QAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuBA,IAAI,CAACrC,MAA5B,CAFJ,CAFJ,CAFA,CADJ;AAYH,KAbD,CAFR,CADJ,eA+BI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACI,MAAA,QAAQ,EAAI,KAAK1B,YADrB;AAEI,MAAA,QAAQ,EAAKE,UAAU,CAACI,MAAX,GAAoB,CAFrC;AAGI,MAAA,SAAS,EAAC,cAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII;AACI,MAAA,EAAE,EAAG,SADT;AAEI,MAAA,GAAG,EAAG0D,KAAD,IAAU,KAAKA,KAAL,GAAaA,KAFhC;AAGI,MAAA,IAAI,EAAG,MAHX;AAII,MAAA,SAAS,EAAG,cAJhB;AAKI,MAAA,KAAK,EAAK9D,UALd;AAMI,MAAA,YAAY,EAAI,KANpB;AAOI,MAAA,WAAW,EAAG,4BAPlB;AAQI,MAAA,OAAO,EAAMD,CAAD,IAAO;AACf,YAAGA,CAAC,CAACgE,OAAF,KAAc,EAAd,IAAoB,CAAChE,CAAC,CAACiE,QAA1B,EACA;AAAE,eAAKlE,YAAL,CAAkBC,CAAlB;AAAuB;AAAC,OAVlC;AAWI,MAAA,QAAQ,EACP,CAAC;AAACyD,QAAAA;AAAD,OAAD,KAAY;AACX,aAAKzC,QAAL,CAAc;AAACf,UAAAA,UAAU,EAACwD,MAAM,CAACC;AAAnB,SAAd;AACA,OAdN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,eAsBI;AACI,MAAA,QAAQ,EAAKzD,UAAU,CAACI,MAAX,GAAoB,CADrC;AAEI,MAAA,IAAI,EAAG,QAFX;AAGI,MAAA,SAAS,EAAG,MAHhB;AAII,MAAA,OAAO,EAAK,KAAKN,YAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBJ,CADJ,CA/BJ,CArBJ,eAqFI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM9B,OAAO,CAACqE,GAAR,CAAY,CAAC4B,MAAD,EAASV,KAAT,KAAmB;AAC7B,0BACI;AAAK,QAAA,GAAG,EAAIA,KAAZ;AAAoB,QAAA,SAAS,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,GAAG,EAAElG,CAAC,CAACiB,GAAF,CAAM2F,MAAN,EAAc,QAAd,CAAV;AAAmC,QAAA,GAAG,EAAC,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,eAII;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMA,MAAM,CAAC5F,IAAb,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFJ,CAJJ,CADJ;AAWH,KAZC,CADN,CAFJ,CArFJ,CAvCJ,CADJ;AAqJH;;AA7TuC","sourcesContent":["import React, { Component } from 'react'\r\nimport defaultImg from '../images/Logomini.svg';\r\nimport className from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\nimport { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\nimport {ObjectID} from \"../helpers/objectid\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { MdSettings } from 'react-icons/md';\r\nimport moment from 'moment';\r\n// import { UserLists } from \"./searchUser\";\r\n\r\n\r\n\r\nexport default class App3 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            height: window.innerHeight,\r\n            newMessage: '',\r\n            searchUser: '',\r\n            showSearchUser : false,\r\n        }\r\n\r\n    }\r\n\r\n    renderChannelTitle = (channel = {}) => {\r\n        const { store } = this.props;\r\n        const members = store.getMembersFromChannel(channel);\r\n         const names = [];\r\n\r\n         members.forEach((user) => {\r\n             const name = _.get(user, 'name')\r\n             names.push(name);\r\n         });\r\n        return <h4>{_.join(names, ',')}</h4>\r\n    }\r\n\r\n    handleOnClick = (user) => {\r\n        console.log(\"hsdcysvsv\",user.name)\r\n        const { store } =this.props;\r\n        const userId = _.get(user, '_id');\r\n        const channelId = _.get( store.getActiveChannel(),'_id')\r\n        store.addUserToChannel(channelId, userId);\r\n    }\r\n    _onCreateChannel = () =>{\r\n        const { store } =this.props;\r\n        const channelId = new ObjectID().toString();\r\n        const channel = {\r\n            _id: channelId,\r\n            title: 'New Mess',\r\n            lastMessage: \"\",\r\n            members: new OrderedMap(),\r\n            messages: new OrderedMap(),\r\n            isNew: true,\r\n            created: new Date(),\r\n        };\r\n        store.onCreateNewChannel(channel);\r\n    }\r\n    scrollMessagesToBottom = () => {\r\n        if(this.messagesRef){\r\n            this.messagesRef.scrollTop = this.messagesRef.scrollHeight;\r\n        }\r\n    }\r\n    renderMessage(message){\r\n        const txt = _.get(message, 'body' , '');\r\n        const html = _.split(txt, '\\n').map((m, key) => {\r\n            return <p key={key} dangerouslySetInnerHTML={{ __html: m }}></p>\r\n        })\r\n        return html;\r\n    }\r\n    handleSubmit = (e) => {\r\n\r\n        const { newMessage } = this.state;\r\n        const { store } = this.props;\r\n        e.preventDefault();\r\n\r\n        if(_.trim(newMessage).length){\r\n            const messageId = new ObjectID().toString();\r\n            const channel = store.getActiveChannel();\r\n            const channelId = _.get(channel , '_id', null);\r\n            const currentUser = store.getCurrentUser();\r\n            const message = {\r\n                _id: messageId,\r\n                channelId: channelId,\r\n                body : newMessage,\r\n                author : _.get(currentUser, 'name'),\r\n                avatar: defaultImg,\r\n                me: true,\r\n            };\r\n            \r\n            store.addMessage(messageId, message);\r\n            this.setState({newMessage: \"\"});\r\n        }\r\n        this.setState({newMessage: \"\"});\r\n\r\n    };\r\n    _onResi = () => {\r\n        this.setState({height: window.innerHeight});\r\n    }\r\n    addTestMessages = () => {\r\n        const {store} = this.props\r\n\r\n      \r\n        for(let i = 0; i < 20; i++){\r\n            let isMe = false;\r\n            if(i % 2 === 0) {\r\n                isMe = true;\r\n            }\r\n            const newMsg = {\r\n                _id: `${i}`,\r\n                author: `Author: ${i}`,\r\n                body: `The body of message ${i}`,\r\n                avatar: defaultImg,\r\n                me: isMe,\r\n                timing: '0:00'\r\n            }\r\n            store.addMessage(i, newMsg);\r\n\r\n        }\r\n\r\n        for (let c = 0; c<10; c++){\r\n            const newChannel ={\r\n                _id: `${c}`,\r\n                title: `Channel title ${c}`,\r\n                lastMessage: `Hey there is.. ${c}`,\r\n                members: new OrderedMap({\r\n                    '1': true,\r\n                    '2': true,\r\n                }),\r\n                messages: new OrderedMap(),\r\n                created: new Date(),\r\n            }\r\n            const moreMsgId =`${c + 1}`;\r\n            const msgId = `${c}`;\r\n            newChannel.messages = newChannel.messages.set(msgId, true);\r\n            newChannel.messages = newChannel.messages.set(moreMsgId, true);\r\n            store.addChannel(c, newChannel);\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(){\r\n        this.scrollMessagesToBottom();\r\n        console.log(\"CDidUpdate\");\r\n    }\r\n    componentDidMount(){\r\n        window.addEventListener('resize', this._onResi);\r\n        this.addTestMessages();\r\n        console.log(\"CDidMount\");\r\n    }\r\n    componentWillUnmount(){\r\n        window.removeEventListener('resize', this._onResi);\r\n        console.log(\"CWillUnMount\");\r\n    }\r\n    \r\n    render() {\r\n\r\n        const { height, newMessage, searchUser } = this.state;\r\n        const { store } = this.props;\r\n        const activeChannel = store.getActiveChannel();\r\n        const messages = store.getMessagesFromChannel(activeChannel);\r\n        const members = store.getMembersFromChannel(activeChannel);\r\n        const channels = store.getChannels();\r\n        const usersList = store.searchUsers(searchUser);\r\n        const style = {\r\n            height: height,\r\n        }\r\n        const resultSearch = () => {\r\n                return (\r\n                    <div className=\"search-user\">\r\n                        <div className=\"user-list\">\r\n                        {usersList.map((user, index) =>{\r\n                            return <div onClick={() => this.handleOnClick(user)} key={index} className=\"user\">\r\n                            <img src={user.avatar} alt={user.name} />\r\n                            <span>{user.name}</span>\r\n                        </div>\r\n                        })\r\n                        } \r\n                        </div>\r\n                    </div>\r\n                )\r\n        }\r\n        return (\r\n            <div style={style} className=\"app3\">\r\n               <div className=\"chat-header\">\r\n                    <div className=\"header-left\">\r\n                        <div className=\"action\">\r\n                            <Link onClick={ this._onCreateChannel} className=\"btn-primary\">AddNew</Link>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {_.get(activeChannel, 'isNew') ? <div className=\"toolbar\">\r\n                        <form className=\"tool\">\r\n                            <textarea\r\n                            type=\"text\"\r\n                            value ={ this.state.searchUser }\r\n                            placeholder=\"To UserName/Email\"\r\n                            onChange = {\r\n                                ({target})=>{\r\n                                    this.setState({searchUser:target.value})\r\n                                }\r\n                            }\r\n                            />\r\n                        </form>\r\n                        {resultSearch()}\r\n                        </div> : null }\r\n\r\n                    <div className=\"header-mid\">\r\n                        <h3>{_.get(activeChannel,'title', '')}</h3>\r\n                    </div>\r\n                    <div className=\"header-right\">\r\n                        <div className=\"user-bar\">\r\n                            <div className=\"name-user\">nDs</div>\r\n                            <img src={defaultImg} alt=\"user-img\" className=\"img-user\"></img>\r\n                        </div>\r\n                        <div className=\"toolsRight-bar\">\r\n                        <IconButton  style={{ color: \"rgba(0, 0, 0, 0.5)\"}}>\r\n                            <MdSettings />\r\n                        </IconButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chat-main\">\r\n                    <div className=\"sidebar-left\">\r\n                        <div className=\"chanels\">\r\n                            {channels.map((channel, index) =>{\r\n                                return (\r\n                                    <div onClick= {(index) => {\r\n                                        store.setActiveChannelId(channel._id);\r\n                                    }} key={channel._id} className={className('chanel', {'active' : _.get(activeChannel, '_id') === _.get(channel, '_id', null)})}>\r\n                                        <div className=\"user-img\">\r\n                                            <img src={defaultImg} alt=\"user-img\" />\r\n                                        </div>\r\n                                        <div className=\"chanel-info\">\r\n                                            {this.renderChannelTitle(channel)}\r\n                                            <p>{channel.lastMessage}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                            \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chat-content\">\r\n                        <div ref={(ref) => this.messagesRef = ref} className=\"messages\">\r\n                            { \r\n                                messages.map((mess, index) => { \r\n                                    return (\r\n                                        <div key={index} className={`${mess.me ? 'message-me' : 'message'}`}>\r\n                                        <img src={mess.avatar} alt=\"user-img\" className=\"img-user\"></img>\r\n                                        <div className=\"message-body\">\r\n                                            <div className=\"username\">{`${mess.me ? 'Me' : mess.author}`} say:</div>\r\n                                            <p className=\"message-text\">\r\n                                                { this.renderMessage(mess) }\r\n                                                <p className=\"timing\">{mess.timing}</p>\r\n                                            </p>\r\n                                        </div>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                           \r\n                            {/*  <div className=\"message-me\">\r\n                                 <img src={defaultImg} alt=\"user-img\" className=\"img-user\"></img>\r\n                                 <div className=\"message-body\">\r\n                                     <div className=\"username\">Me say:</div>\r\n                                     <p className=\"message-text\">\r\n                                         Hello you come app chat!\r\n                                         <p className=\"timing\">0:00</p>\r\n                                     </p>\r\n                                   \r\n                                 </div>\r\n                             </div> */}\r\n                        </div>\r\n                        <div className=\"message-input\">\r\n                            <form \r\n                                onSubmit= { this.handleSubmit }\r\n                                disabled = { newMessage.length < 1 }\r\n                                className=\"message-form\">\r\n                                <textarea  \r\n                                    id = \"message\"\r\n                                    ref={(input)=> this.input = input}\r\n                                    type = \"text\"\r\n                                    className = \"form-control\"\r\n                                    value = { newMessage }\r\n                                    autoComplete = {'off'}\r\n                                    placeholder = \"Type something interesting\"\r\n                                    onKeyUp = { (e) => {  \r\n                                        if(e.keyCode === 13 && !e.shiftKey) \r\n                                        { this.handleSubmit(e); }}}\r\n                                    onChange = {\r\n                                    \t({target})=>{\r\n                                    \t\tthis.setState({newMessage:target.value})\r\n                                    \t}\r\n                                    }\r\n                                    />\r\n                               \r\n                                <button\r\n                                    disabled = { newMessage.length < 1 }\r\n                                    type = \"submit\"\r\n                                    className = \"send\"\r\n                                    onClick = { this.handleSubmit }\r\n                                > Send </button>\r\n                            </form>\r\n\t\t\t            </div>\r\n                    </div>\r\n                   \r\n                    <div className=\"sidebar-right\">\r\n                        <div className=\"title-right\">Members</div>\r\n                        <div className=\"chanels\">\r\n                            { members.map((member, index) => {\r\n                                return (\r\n                                    <div key ={ index } className=\"chanel\">\r\n                                        <div className=\"user-img\">\r\n                                            <img src={_.get(member, 'avatar')} alt=\"user-img\" />\r\n                                        </div>\r\n                                        <div className=\"chanel-info\">\r\n                                            <h4>{ member.name }</h4>\r\n                                            <p>Joined: 2000 years ago</p>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                </div>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}