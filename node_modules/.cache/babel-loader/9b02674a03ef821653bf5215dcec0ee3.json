{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\ContentChat.js\";\nimport React, { Component } from 'react';\nimport Sidebar from './Sidebar';\nimport { MESSAGE_SENT, TYPING, COMMUNITY_CHAT, MESSAGE_RECIEVED } from '../Events';\nimport ChatHeading from \"../messages/ChatHeading\";\nimport Messages from \"../messages/Messages\";\nimport MessageInput from \"../messages/MessageInput\";\nexport default class ContentChat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetChat = chat => {\n      return this.addChat(chat, true);\n    };\n\n    this.addChat = (chat, reset) => {\n      const {\n        socket\n      } = this.props;\n      const {\n        chats\n      } = this.state;\n      const newChats = reset ? [chat] : [...chats, chat];\n      this.setState({\n        chats: newChats,\n        activeChat: reset ? chat : this.state.activeChat\n      });\n      const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`;\n      const typingEvent = `${TYPING}-${chat.id}`;\n      socket.on(typingEvent, this.updateTypingInChat(chat.id));\n      socket.on(messageEvent, this.addMessageToChat(chat.id));\n    };\n\n    this.addMessageToChat = chatId => {\n      return message => {\n        const {\n          chats\n        } = this.state;\n        let newChats = chats.map(chat => {\n          if (chat.id === chatId) chat.messages.push(message);\n          return chat;\n        });\n        this.setState({\n          chats: newChats\n        });\n      };\n    };\n\n    this.updateTypingInChat = chatId => {\n      return ({\n        isTyping,\n        user\n      }) => {\n        if (user !== this.props.user.name) {\n          const {\n            chats\n          } = this.state;\n          let newChats = chats.map(chat => {\n            if (chat.id === chatId) {\n              if (isTyping && !chat.typingUsers.includes(user)) {\n                chat.typingUsers.push(user);\n              } else if (!isTyping && chat.typingUsers.includes(user)) {\n                chat.typingUsers = chat.typingUsers.filter(u => u !== user);\n              }\n            }\n\n            return chat;\n          });\n          this.setState({\n            chats: newChats\n          });\n        }\n      };\n    };\n\n    this.sendMessage = (chatId, message) => {\n      const {\n        socket\n      } = this.props;\n      socket.emit(MESSAGE_SENT, {\n        chatId,\n        message\n      });\n    };\n\n    this.sendTyping = (chatId, isTyping) => {\n      const {\n        socket\n      } = this.props;\n      socket.emit(TYPING, {\n        chatId,\n        isTyping\n      });\n    };\n\n    this.setActiveChat = activeChat => {\n      this.setState({\n        activeChat\n      });\n    };\n\n    this.state = {\n      chats: [],\n      activeChat: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      socket\n    } = this.props;\n    socket.emit(COMMUNITY_CHAT, this.resetChat);\n  }\n\n  render() {\n    const {\n      user,\n      logout\n    } = this.props;\n    const {\n      chats,\n      activeChat\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      logout: logout,\n      chats: chats,\n      user: user,\n      activeChat: activeChat,\n      setActiveChat: this.setActiveChat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, activeChat !== null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_room\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChatHeading, {\n      name: activeChat.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Messages, {\n      messages: activeChat.messages,\n      user: user,\n      typingUsers: activeChat.typingUsers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(MessageInput, {\n      sendMessage: message => {\n        this.sendMessage(activeChat.id, message);\n      },\n      sendTyping: isTyping => {\n        this.sendTyping(activeChat.id, isTyping);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 33\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-room-choose\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 33\n      }\n    }, \"Choose a chat to start chat\"))));\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/ContentChat.js"],"names":["React","Component","Sidebar","MESSAGE_SENT","TYPING","COMMUNITY_CHAT","MESSAGE_RECIEVED","ChatHeading","Messages","MessageInput","ContentChat","constructor","props","resetChat","chat","addChat","reset","socket","chats","state","newChats","setState","activeChat","messageEvent","id","typingEvent","on","updateTypingInChat","addMessageToChat","chatId","message","map","messages","push","isTyping","user","name","typingUsers","includes","filter","u","sendMessage","emit","sendTyping","setActiveChat","componentDidMount","render","logout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Sidebar from './Sidebar';\r\nimport { MESSAGE_SENT, TYPING, COMMUNITY_CHAT, MESSAGE_RECIEVED } from '../Events';\r\nimport ChatHeading from \"../messages/ChatHeading\";\r\nimport Messages from \"../messages/Messages\";\r\nimport MessageInput from \"../messages/MessageInput\";\r\n\r\nexport default class ContentChat extends Component {\r\n    constructor(props) {\r\n        super(props);\t\r\n      \r\n        this.state = {\r\n            chats:[],\r\n            activeChat:null\r\n        };\r\n      }\r\n  \r\n      componentDidMount() {\r\n          const { socket } = this.props\r\n          socket.emit(COMMUNITY_CHAT, this.resetChat)\r\n      }\r\n  \r\n     \r\n      resetChat = (chat)=>{\r\n          return this.addChat(chat, true)\r\n      }\r\n  \r\n      addChat = (chat, reset)=>{\r\n          const { socket } = this.props\r\n          const { chats } = this.state\r\n  \r\n          const newChats = reset ? [chat] : [...chats, chat]\r\n          this.setState({chats:newChats, activeChat:reset ? chat : this.state.activeChat})\r\n  \r\n          const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`\r\n          const typingEvent = `${TYPING}-${chat.id}`\r\n  \r\n          socket.on(typingEvent, this.updateTypingInChat(chat.id))\r\n          socket.on(messageEvent, this.addMessageToChat(chat.id))\r\n      }\r\n  \r\n      addMessageToChat = (chatId)=>{\r\n          return message => {\r\n              const { chats } = this.state\r\n              let newChats = chats.map((chat)=>{\r\n                  if(chat.id === chatId)\r\n                      chat.messages.push(message)\r\n                  return chat\r\n              })\r\n  \r\n              this.setState({chats:newChats})\r\n          }\r\n      }\r\n  \r\n     \r\n      updateTypingInChat = (chatId) =>{\r\n          return ({isTyping, user})=>{\r\n              if(user !== this.props.user.name){\r\n  \r\n                  const { chats } = this.state\r\n  \r\n                  let newChats = chats.map((chat)=>{\r\n                      if(chat.id === chatId){\r\n                          if(isTyping && !chat.typingUsers.includes(user)){\r\n                              chat.typingUsers.push(user)\r\n                          }else if(!isTyping && chat.typingUsers.includes(user)){\r\n                              chat.typingUsers = chat.typingUsers.filter(u => u !== user)\r\n                          }\r\n                      }\r\n                      return chat\r\n                  })\r\n                  this.setState({chats:newChats})\r\n              }\r\n          }\r\n      }\r\n  \r\n      sendMessage = (chatId, message)=>{\r\n          const { socket } = this.props\r\n          socket.emit(MESSAGE_SENT, {chatId, message} )\r\n      }\r\n  \r\n      sendTyping = (chatId, isTyping)=>{\r\n          const { socket } = this.props\r\n          socket.emit(TYPING, {chatId, isTyping})\r\n      }\r\n  \r\n      setActiveChat = (activeChat)=>{\r\n          this.setState({activeChat})\r\n      }\r\n    render() {\r\n        const { user, logout } = this.props\r\n        const { chats, activeChat } = this.state\r\n        return (\r\n            <div className=\"app3\">\r\n                <Sidebar\r\n                logout= { logout }\r\n                chats= { chats }\r\n                user= { user }\r\n                activeChat= { activeChat }\r\n                setActiveChat= { this.setActiveChat }\r\n                />\r\n                <div className=\"chat\">\r\n                    {\r\n                        activeChat !== null ? (\r\n                            <div className=\"chat_room\">\r\n                                <ChatHeading name={activeChat.name} />\r\n                                <Messages\r\n                                    messages= {activeChat.messages}\r\n                                    user= {user}\r\n                                    typingUsers= {activeChat.typingUsers}\r\n                                />\r\n                                <MessageInput\r\n                                    sendMessage= {\r\n                                        (message) => {\r\n                                            this.sendMessage(activeChat.id, message)\r\n                                        }\r\n                                    }\r\n                                    sendTyping= {\r\n                                        (isTyping) => {\r\n                                            this.sendTyping(activeChat.id, isTyping)\r\n                                        }\r\n                                    }\r\n                                    />\r\n\r\n                            </div>\r\n                        ) : <div className=\"chat-room-choose\">\r\n                                <h3>Choose a chat to start chat</h3>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}