{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\player\\\\MusicArt.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { motion } from \"framer-motion\";\nimport { Avatar, Grid, Typography } from \"@material-ui/core\";\nimport { FavoriteTwoTone } from \"@material-ui/icons\";\nimport circleSvg from \"../../images/dottedCircle.svg\";\nimport { rateSong } from \"../../external/saveSong\";\nconst dblTouchTapMaxDelay = 300;\nlet latestTouchTap = {\n  time: 0,\n  target: null\n};\n\nfunction isDblTouchTap(event) {\n  const touchTap = {\n    time: new Date().getTime(),\n    target: event.currentTarget\n  };\n  const isFastDblTouchTap = touchTap.target === latestTouchTap.target && touchTap.time - latestTouchTap.time < dblTouchTapMaxDelay;\n  latestTouchTap = touchTap;\n  return isFastDblTouchTap;\n}\n\nlet initialPosition;\n\nconst MusicArt = ({\n  data,\n  rating,\n  audioEl\n}) => {\n  const swipeUpHandler = useSwipeable({\n    onSwipedUp: e => {\n      dislikeSong();\n    }\n  });\n  const [heartStyle, setHeartStyle] = useState({\n    transform: \"scale(0)\"\n  });\n  const [artContainerStyle, setArtContainerStyle] = useState({\n    background: `url(${circleSvg}) no-repeat`,\n    padding: \"18px\",\n    position: \"relative\",\n    transition: \"transform 100ms\",\n    transform: \"translateY(0)\"\n  }); // const artContainerStyle = {\n  //   background: `url(${circleSvg}) no-repeat`,\n  //   padding: \"18px\",\n  //   position: \"relative\",\n  //   zIndex: \"1\"\n  // };\n  // if its less than 400 width we will use default hq thumbnail\n\n  const checkImg = e => {\n    if (e.target.naturalWidth < 400) {\n      e.target.src = data.sdThumbnail;\n    }\n  }; // double tap to like the song\n\n\n  const likeSong = useCallback(() => {\n    // run the like function to like provided with song id and rating\n    setHeartStyle({\n      transform: \"scale(0)\"\n    });\n    setTimeout(() => {\n      setHeartStyle({\n        transform: \"scale(1)\"\n      });\n    }, 300);\n  }, [setHeartStyle]);\n  const dislikeSong = useCallback(() => {\n    rateSong(data.id, \"disliked\");\n    setHeartStyle({\n      transform: \"scale(0)\"\n    });\n    setTimeout(() => {\n      setHeartStyle({\n        transform: \"scale(1)\",\n        color: \"#2d3436\"\n      });\n    }, 300);\n  }, [setHeartStyle, data.id]);\n  React.useEffect(() => {\n    if (rating === \"liked\") {\n      likeSong();\n    } else if (rating === \"disliked\") {\n      dislikeSong();\n    } else {\n      setHeartStyle({\n        transform: \"scale(0)\"\n      });\n    }\n  }, [rating, likeSong, dislikeSong, setHeartStyle]); // if we find the channel name is before the song title we will remove it\n  //using the regex\n\n  const shortTitle = data => {\n    // this regex is to remove channel name from song title\n    const re = new RegExp(data.channelTitle + \" - | : \", \"g\");\n    return data.title.replace(re, \"\");\n  };\n\n  const getThumbnail = () => {\n    // if the thumbnail is downloaded then get it from database or else use the url to fetch\n    if (data.thumbnail) {\n      return window.URL.createObjectURL(data.thumbnail);\n    } else {\n      return data.maxThumbnail;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    style: {\n      marginTop: \"40px\"\n    },\n    onClick: e => {\n      if (isDblTouchTap(e)) {\n        likeSong();\n        rateSong(data.id, \"liked\", audioEl);\n      } // call the like song function on double tap\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(motion.div, Object.assign({\n    className: \"box\",\n    drag: true,\n    dragElastic: true,\n    dragTransition: {\n      bounceStiffness: 100,\n      bounceDamping: 10\n    },\n    dragConstraints: {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    },\n    style: artContainerStyle\n  }, swipeUpHandler, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FavoriteTwoTone, {\n    className: \"songHeart left\",\n    style: heartStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FavoriteTwoTone, {\n    className: \"songHeart right\",\n    style: heartStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Avatar, {\n    className: \"searchThumb\",\n    style: {\n      width: \"215px\",\n      height: \"215px\",\n      boxShadow: \"#0000008c 1px 3px 8px\"\n    },\n    alt: \"video thumbnail\",\n    src: getThumbnail(),\n    imgProps: {\n      onLoad: e => checkImg(e)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    className: \"musicArtTitle\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, shortTitle(data)), /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"musicChannel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, data.channelTitle), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default MusicArt;","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/player/MusicArt.js"],"names":["React","useState","useCallback","useSwipeable","motion","Avatar","Grid","Typography","FavoriteTwoTone","rateSong","dblTouchTapMaxDelay","latestTouchTap","time","target","isDblTouchTap","event","touchTap","Date","getTime","currentTarget","isFastDblTouchTap","initialPosition","MusicArt","data","rating","audioEl","swipeUpHandler","onSwipedUp","e","dislikeSong","heartStyle","setHeartStyle","transform","artContainerStyle","setArtContainerStyle","background","circleSvg","padding","position","transition","checkImg","naturalWidth","src","sdThumbnail","likeSong","setTimeout","id","color","useEffect","shortTitle","re","RegExp","channelTitle","title","replace","getThumbnail","thumbnail","window","URL","createObjectURL","maxThumbnail","marginTop","bounceStiffness","bounceDamping","left","right","top","bottom","width","height","boxShadow","onLoad"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Avatar, Grid, Typography } from \"@material-ui/core\";\r\nimport { FavoriteTwoTone } from \"@material-ui/icons\";\r\nimport circleSvg from \"../../images/dottedCircle.svg\";\r\nimport { rateSong } from \"../../external/saveSong\";\r\n\r\nconst dblTouchTapMaxDelay = 300;\r\nlet latestTouchTap = {\r\n  time: 0,\r\n  target: null\r\n};\r\n\r\nfunction isDblTouchTap(event) {\r\n  const touchTap = {\r\n    time: new Date().getTime(),\r\n    target: event.currentTarget\r\n  };\r\n  const isFastDblTouchTap =\r\n    touchTap.target === latestTouchTap.target &&\r\n    touchTap.time - latestTouchTap.time < dblTouchTapMaxDelay;\r\n  latestTouchTap = touchTap;\r\n  return isFastDblTouchTap;\r\n}\r\n\r\nlet initialPosition;\r\n\r\nconst MusicArt = ({ data, rating, audioEl }) => {\r\n  const swipeUpHandler = useSwipeable({\r\n    onSwipedUp: e => {\r\n      dislikeSong();\r\n    }\r\n  });\r\n\r\n  const [heartStyle, setHeartStyle] = useState({\r\n    transform: \"scale(0)\"\r\n  });\r\n  const [artContainerStyle, setArtContainerStyle] = useState({\r\n    background: `url(${circleSvg}) no-repeat`,\r\n    padding: \"18px\",\r\n    position: \"relative\",\r\n    transition: \"transform 100ms\",\r\n    transform: \"translateY(0)\"\r\n  });\r\n\r\n  // const artContainerStyle = {\r\n  //   background: `url(${circleSvg}) no-repeat`,\r\n  //   padding: \"18px\",\r\n  //   position: \"relative\",\r\n  //   zIndex: \"1\"\r\n  // };\r\n\r\n  // if its less than 400 width we will use default hq thumbnail\r\n  const checkImg = e => {\r\n    if (e.target.naturalWidth < 400) {\r\n      e.target.src = data.sdThumbnail;\r\n    }\r\n  };\r\n\r\n  // double tap to like the song\r\n  const likeSong = useCallback(() => {\r\n    // run the like function to like provided with song id and rating\r\n    setHeartStyle({ transform: \"scale(0)\" });\r\n    setTimeout(() => {\r\n      setHeartStyle({ transform: \"scale(1)\" });\r\n    }, 300);\r\n  }, [setHeartStyle]);\r\n\r\n  const dislikeSong = useCallback(() => {\r\n    rateSong(data.id, \"disliked\");\r\n    setHeartStyle({ transform: \"scale(0)\" });\r\n    setTimeout(() => {\r\n      setHeartStyle({ transform: \"scale(1)\", color: \"#2d3436\" });\r\n    }, 300);\r\n  }, [setHeartStyle, data.id]);\r\n\r\n  React.useEffect(() => {\r\n    if (rating === \"liked\") {\r\n      likeSong();\r\n    } else if (rating === \"disliked\") {\r\n      dislikeSong();\r\n    } else {\r\n      setHeartStyle({ transform: \"scale(0)\" });\r\n    }\r\n  }, [rating, likeSong, dislikeSong, setHeartStyle]);\r\n\r\n  // if we find the channel name is before the song title we will remove it\r\n  //using the regex\r\n  const shortTitle = data => {\r\n    // this regex is to remove channel name from song title\r\n    const re = new RegExp(data.channelTitle + \" - | : \", \"g\");\r\n\r\n    return data.title.replace(re, \"\");\r\n  };\r\n\r\n  const getThumbnail = () => {\r\n    // if the thumbnail is downloaded then get it from database or else use the url to fetch\r\n    if (data.thumbnail) {\r\n      return window.URL.createObjectURL(data.thumbnail);\r\n    } else {\r\n      return data.maxThumbnail;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      style={{ marginTop: \"40px\" }}\r\n      onClick={e => {\r\n        if (isDblTouchTap(e)) {\r\n          likeSong();\r\n          rateSong(data.id, \"liked\", audioEl);\r\n        }\r\n        // call the like song function on double tap\r\n      }}\r\n    >\r\n      <motion.div\r\n        className=\"box\"\r\n        drag\r\n        dragElastic={true}\r\n        dragTransition={{ bounceStiffness: 100, bounceDamping: 10 }}\r\n        dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}\r\n        style={artContainerStyle}\r\n        {...swipeUpHandler}\r\n      >\r\n        <FavoriteTwoTone className={\"songHeart left\"} style={heartStyle} />\r\n        <FavoriteTwoTone className={\"songHeart right\"} style={heartStyle} />\r\n        <Avatar\r\n          className=\"searchThumb\"\r\n          style={{\r\n            width: \"215px\",\r\n            height: \"215px\",\r\n            boxShadow: \"#0000008c 1px 3px 8px\"\r\n          }}\r\n          alt=\"video thumbnail\"\r\n          src={getThumbnail()}\r\n          imgProps={{ onLoad: e => checkImg(e) }}\r\n        />\r\n      </motion.div>\r\n      <br />\r\n      <Typography variant=\"h5\" className=\"musicArtTitle\" align=\"center\">\r\n        {shortTitle(data)}\r\n      </Typography>\r\n      <h4 className=\"musicChannel\">\r\n        {data.channelTitle}\r\n      </h4>\r\n      <br />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MusicArt;\r\n"]},"metadata":{},"sourceType":"module"}