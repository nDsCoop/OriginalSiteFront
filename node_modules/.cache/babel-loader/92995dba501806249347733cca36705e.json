{"ast":null,"code":"/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n * @ignore\n */var MACHINE_ID=parseInt(Math.random()*0xffffff,10);// Regular expression that checks for hex value\nvar checkForHexRegExp=new RegExp('^[0-9a-fA-F]{24}$');// Check if buffer exists\ntry{if(Buffer&&Buffer.from)var hasBufferType=true;}catch(err){hasBufferType=false;}/**\n * Create a new ObjectID instance\n *\n * @class\n * @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @property {number} generationTime The generation time of this ObjectId instance\n * @return {ObjectID} instance of ObjectID.\n */var ObjectID=function ObjectID(id){// Duck-typing to support ObjectId from different npm packages\nif(id instanceof ObjectID)return id;if(!(this instanceof ObjectID))return new ObjectID(id);this._bsontype='ObjectID';// The most common usecase (blank id, new objectId instance)\nif(id==null||typeof id==='number'){// Generate a new id\nthis.id=this.generate(id);// If we are caching the hex string\nif(ObjectID.cacheHexString)this.__id=this.toString('hex');// Return the object\nreturn;}// Check if the passed in id is valid\nvar valid=ObjectID.isValid(id);// Throw an error if it's not a valid setup\nif(!valid&&id!=null){throw new Error('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');}else if(valid&&typeof id==='string'&&id.length===24&&hasBufferType){return new ObjectID(new Buffer(id,'hex'));}else if(valid&&typeof id==='string'&&id.length===24){return ObjectID.createFromHexString(id);}else if(id!=null&&id.length===12){// assume 12 byte string\nthis.id=id;}else if(id!=null&&id.toHexString){// Duck-typing to support ObjectId from different npm packages\nreturn id;}else{throw new Error('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');}if(ObjectID.cacheHexString)this.__id=this.toString('hex');};// Allow usage of ObjectId as well as ObjectID\n// var ObjectId = ObjectID;\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable=[];for(var i=0;i<256;i++){hexTable[i]=(i<=15?'0':'')+i.toString(16);}/**\n * Return the ObjectID id as a 24 byte hex string representation\n *\n * @method\n * @return {string} return the 24 byte hex string representation.\n */ObjectID.prototype.toHexString=function(){if(ObjectID.cacheHexString&&this.__id)return this.__id;var hexString='';if(!this.id||!this.id.length){throw new Error('invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ['+JSON.stringify(this.id)+']');}if(this.id instanceof _Buffer){hexString=convertToHex(this.id);if(ObjectID.cacheHexString)this.__id=hexString;return hexString;}for(var i=0;i<this.id.length;i++){hexString+=hexTable[this.id.charCodeAt(i)];}if(ObjectID.cacheHexString)this.__id=hexString;return hexString;};/**\n * Update the ObjectID index used in generating new ObjectID's on the driver\n *\n * @method\n * @return {number} returns next index value.\n * @ignore\n */ObjectID.prototype.get_inc=function(){return ObjectID.index=(ObjectID.index+1)%0xffffff;};/**\n * Update the ObjectID index used in generating new ObjectID's on the driver\n *\n * @method\n * @return {number} returns next index value.\n * @ignore\n */ObjectID.prototype.getInc=function(){return this.get_inc();};/**\n * Generate a 12 byte id buffer used in ObjectID's\n *\n * @method\n * @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n * @return {Buffer} return the 12 byte id buffer string.\n */ObjectID.prototype.generate=function(time){if('number'!==typeof time){time=~~(Date.now()/1000);}// Use pid\nvar pid=(typeof process==='undefined'||process.pid===1?Math.floor(Math.random()*100000):process.pid)%0xffff;var inc=this.get_inc();// Buffer used\nvar buffer=new Buffer(12);// Encode time\nbuffer[3]=time&0xff;buffer[2]=time>>8&0xff;buffer[1]=time>>16&0xff;buffer[0]=time>>24&0xff;// Encode machine\nbuffer[6]=MACHINE_ID&0xff;buffer[5]=MACHINE_ID>>8&0xff;buffer[4]=MACHINE_ID>>16&0xff;// Encode pid\nbuffer[8]=pid&0xff;buffer[7]=pid>>8&0xff;// Encode index\nbuffer[11]=inc&0xff;buffer[10]=inc>>8&0xff;buffer[9]=inc>>16&0xff;// Return the buffer\nreturn buffer;};/**\n * Converts the id into a 24 byte hex string for printing\n *\n * @param {String} format The Buffer toString format parameter.\n * @return {String} return the 24 byte hex string representation.\n * @ignore\n */ObjectID.prototype.toString=function(format){// Is the id a buffer then use the buffer toString method to return the format\nif(this.id&&this.id.copy){return this.id.toString(typeof format==='string'?format:'hex');}// if(this.buffer )\nreturn this.toHexString();};/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @ignore\n */ObjectID.prototype.inspect=ObjectID.prototype.toString;/**\n * Converts to its JSON representation.\n *\n * @return {String} return the 24 byte hex string representation.\n * @ignore\n */ObjectID.prototype.toJSON=function(){return this.toHexString();};/**\n * Compares the equality of this ObjectID with `otherID`.\n *\n * @method\n * @param {object} otherID ObjectID instance to compare against.\n * @return {boolean} the result of comparing two ObjectID's\n */ObjectID.prototype.equals=function equals(otherId){// var id;\nif(otherId instanceof ObjectID){return this.toString()===otherId.toString();}else if(typeof otherId==='string'&&ObjectID.isValid(otherId)&&otherId.length===12&&this.id instanceof _Buffer){return otherId===this.id.toString('binary');}else if(typeof otherId==='string'&&ObjectID.isValid(otherId)&&otherId.length===24){return otherId.toLowerCase()===this.toHexString();}else if(typeof otherId==='string'&&ObjectID.isValid(otherId)&&otherId.length===12){return otherId===this.id;}else if(otherId!=null&&(otherId instanceof ObjectID||otherId.toHexString)){return otherId.toHexString()===this.toHexString();}else{return false;}};/**\n * Returns the generation date (accurate up to the second) that this ID was generated.\n *\n * @method\n * @return {date} the generation date\n */ObjectID.prototype.getTimestamp=function(){var timestamp=new Date();var time=this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24;timestamp.setTime(Math.floor(time)*1000);return timestamp;};/**\n * @ignore\n */ObjectID.index=~~(Math.random()*0xffffff);/**\n * @ignore\n */ObjectID.createPk=function createPk(){return new ObjectID();};/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @method\n * @param {number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n */ObjectID.createFromTime=function createFromTime(time){var buffer=new Buffer([0,0,0,0,0,0,0,0,0,0,0,0]);// Encode time into first 4 bytes\nbuffer[3]=time&0xff;buffer[2]=time>>8&0xff;buffer[1]=time>>16&0xff;buffer[0]=time>>24&0xff;// Return the new objectId\nreturn new ObjectID(buffer);};// Lookup tables\n//var encodeLookup = '0123456789abcdef'.split('');\nvar decodeLookup=[];i=0;while(i<10){decodeLookup[0x30+i]=i++;}while(i<16){decodeLookup[0x41-10+i]=decodeLookup[0x61-10+i]=i++;}var _Buffer=Buffer;var convertToHex=function convertToHex(bytes){return bytes.toString('hex');};/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @method\n * @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n */ObjectID.createFromHexString=function createFromHexString(string){// Throw an error if it's not a valid setup\nif(typeof string==='undefined'||string!=null&&string.length!==24){throw new Error('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');}// Use Buffer.from method if available\nif(hasBufferType)return new ObjectID(new Buffer(string,'hex'));// Calculate lengths\nvar array=new _Buffer(12);var n=0;var i=0;while(i<24){array[n++]=decodeLookup[string.charCodeAt(i++)]<<4|decodeLookup[string.charCodeAt(i++)];}return new ObjectID(array);};/**\n * Checks if a value is a valid bson ObjectId\n *\n * @method\n * @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n */ObjectID.isValid=function isValid(id){if(id==null)return false;if(typeof id==='number'){return true;}if(typeof id==='string'){return id.length===12||id.length===24&&checkForHexRegExp.test(id);}if(id instanceof ObjectID){return true;}if(id instanceof _Buffer){return true;}// Duck-Typing detection of ObjectId like objects\nif(id.toHexString){return id.id.length===12||id.id.length===24&&checkForHexRegExp.test(id.id);}return false;};/**\n * @ignore\n */Object.defineProperty(ObjectID.prototype,'generationTime',{enumerable:true,get:function get(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24;},set:function set(value){// Encode time into first 4 bytes\nthis.id[3]=value&0xff;this.id[2]=value>>8&0xff;this.id[1]=value>>16&0xff;this.id[0]=value>>24&0xff;}});/**\n * Expose.\n */module.exports=ObjectID;module.exports.ObjectID=ObjectID;module.exports.ObjectId=ObjectID;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/helpers/objectid.js"],"names":["MACHINE_ID","parseInt","Math","random","checkForHexRegExp","RegExp","Buffer","from","hasBufferType","err","ObjectID","id","_bsontype","generate","cacheHexString","__id","toString","valid","isValid","Error","length","createFromHexString","toHexString","hexTable","i","prototype","hexString","JSON","stringify","_Buffer","convertToHex","charCodeAt","get_inc","index","getInc","time","Date","now","pid","process","floor","inc","buffer","format","copy","inspect","toJSON","equals","otherId","toLowerCase","getTimestamp","timestamp","setTime","createPk","createFromTime","decodeLookup","bytes","string","array","n","test","Object","defineProperty","enumerable","get","set","value","module","exports","ObjectId"],"mappings":"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","sourcesContent":["/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n * @ignore\n */\nvar MACHINE_ID = parseInt(Math.random() * 0xffffff, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Check if buffer exists\ntry {\n    if (Buffer && Buffer.from) var hasBufferType = true;\n} catch (err) {\n    hasBufferType = false;\n}\n\n/**\n * Create a new ObjectID instance\n *\n * @class\n * @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @property {number} generationTime The generation time of this ObjectId instance\n * @return {ObjectID} instance of ObjectID.\n */\nvar ObjectID = function ObjectID(id) {\n    // Duck-typing to support ObjectId from different npm packages\n    if (id instanceof ObjectID) return id;\n    if (!(this instanceof ObjectID)) return new ObjectID(id);\n\n    this._bsontype = 'ObjectID';\n\n    // The most common usecase (blank id, new objectId instance)\n    if (id == null || typeof id === 'number') {\n        // Generate a new id\n        this.id = this.generate(id);\n        // If we are caching the hex string\n        if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n        // Return the object\n        return;\n    }\n\n    // Check if the passed in id is valid\n    var valid = ObjectID.isValid(id);\n\n    // Throw an error if it's not a valid setup\n    if (!valid && id != null) {\n        throw new Error(\n            'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n        );\n    } else if (valid && typeof id === 'string' && id.length === 24 && hasBufferType) {\n        return new ObjectID(new Buffer(id, 'hex'));\n    } else if (valid && typeof id === 'string' && id.length === 24) {\n        return ObjectID.createFromHexString(id);\n    } else if (id != null && id.length === 12) {\n        // assume 12 byte string\n        this.id = id;\n    } else if (id != null && id.toHexString) {\n        // Duck-typing to support ObjectId from different npm packages\n        return id;\n    } else {\n        throw new Error(\n            'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n        );\n    }\n\n    if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n};\n\n// Allow usage of ObjectId as well as ObjectID\n// var ObjectId = ObjectID;\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n    hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n/**\n * Return the ObjectID id as a 24 byte hex string representation\n *\n * @method\n * @return {string} return the 24 byte hex string representation.\n */\nObjectID.prototype.toHexString = function() {\n    if (ObjectID.cacheHexString && this.__id) return this.__id;\n\n    var hexString = '';\n    if (!this.id || !this.id.length) {\n        throw new Error(\n            'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +\n            JSON.stringify(this.id) +\n            ']'\n        );\n    }\n\n    if (this.id instanceof _Buffer) {\n        hexString = convertToHex(this.id);\n        if (ObjectID.cacheHexString) this.__id = hexString;\n        return hexString;\n    }\n\n    for (var i = 0; i < this.id.length; i++) {\n        hexString += hexTable[this.id.charCodeAt(i)];\n    }\n\n    if (ObjectID.cacheHexString) this.__id = hexString;\n    return hexString;\n};\n\n/**\n * Update the ObjectID index used in generating new ObjectID's on the driver\n *\n * @method\n * @return {number} returns next index value.\n * @ignore\n */\nObjectID.prototype.get_inc = function() {\n    return (ObjectID.index = (ObjectID.index + 1) % 0xffffff);\n};\n\n/**\n * Update the ObjectID index used in generating new ObjectID's on the driver\n *\n * @method\n * @return {number} returns next index value.\n * @ignore\n */\nObjectID.prototype.getInc = function() {\n    return this.get_inc();\n};\n\n/**\n * Generate a 12 byte id buffer used in ObjectID's\n *\n * @method\n * @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n * @return {Buffer} return the 12 byte id buffer string.\n */\nObjectID.prototype.generate = function(time) {\n    if ('number' !== typeof time) {\n        time = ~~(Date.now() / 1000);\n    }\n\n    // Use pid\n    var pid =\n        (typeof process === 'undefined' || process.pid === 1\n            ? Math.floor(Math.random() * 100000)\n            : process.pid) % 0xffff;\n    var inc = this.get_inc();\n    // Buffer used\n    var buffer = new Buffer(12);\n    // Encode time\n    buffer[3] = time & 0xff;\n    buffer[2] = (time >> 8) & 0xff;\n    buffer[1] = (time >> 16) & 0xff;\n    buffer[0] = (time >> 24) & 0xff;\n    // Encode machine\n    buffer[6] = MACHINE_ID & 0xff;\n    buffer[5] = (MACHINE_ID >> 8) & 0xff;\n    buffer[4] = (MACHINE_ID >> 16) & 0xff;\n    // Encode pid\n    buffer[8] = pid & 0xff;\n    buffer[7] = (pid >> 8) & 0xff;\n    // Encode index\n    buffer[11] = inc & 0xff;\n    buffer[10] = (inc >> 8) & 0xff;\n    buffer[9] = (inc >> 16) & 0xff;\n    // Return the buffer\n    return buffer;\n};\n\n/**\n * Converts the id into a 24 byte hex string for printing\n *\n * @param {String} format The Buffer toString format parameter.\n * @return {String} return the 24 byte hex string representation.\n * @ignore\n */\nObjectID.prototype.toString = function(format) {\n    // Is the id a buffer then use the buffer toString method to return the format\n    if (this.id && this.id.copy) {\n        return this.id.toString(typeof format === 'string' ? format : 'hex');\n    }\n\n    // if(this.buffer )\n    return this.toHexString();\n};\n\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @ignore\n */\nObjectID.prototype.inspect = ObjectID.prototype.toString;\n\n/**\n * Converts to its JSON representation.\n *\n * @return {String} return the 24 byte hex string representation.\n * @ignore\n */\nObjectID.prototype.toJSON = function() {\n    return this.toHexString();\n};\n\n/**\n * Compares the equality of this ObjectID with `otherID`.\n *\n * @method\n * @param {object} otherID ObjectID instance to compare against.\n * @return {boolean} the result of comparing two ObjectID's\n */\nObjectID.prototype.equals = function equals(otherId) {\n    // var id;\n\n    if (otherId instanceof ObjectID) {\n        return this.toString() === otherId.toString();\n    } else if (\n        typeof otherId === 'string' &&\n        ObjectID.isValid(otherId) &&\n        otherId.length === 12 &&\n        this.id instanceof _Buffer\n    ) {\n        return otherId === this.id.toString('binary');\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 24) {\n        return otherId.toLowerCase() === this.toHexString();\n    } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12) {\n        return otherId === this.id;\n    } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n        return otherId.toHexString() === this.toHexString();\n    } else {\n        return false;\n    }\n};\n\n/**\n * Returns the generation date (accurate up to the second) that this ID was generated.\n *\n * @method\n * @return {date} the generation date\n */\nObjectID.prototype.getTimestamp = function() {\n    var timestamp = new Date();\n    var time = this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n    timestamp.setTime(Math.floor(time) * 1000);\n    return timestamp;\n};\n\n/**\n * @ignore\n */\nObjectID.index = ~~(Math.random() * 0xffffff);\n\n/**\n * @ignore\n */\nObjectID.createPk = function createPk() {\n    return new ObjectID();\n};\n\n/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @method\n * @param {number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n */\nObjectID.createFromTime = function createFromTime(time) {\n    var buffer = new Buffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    // Encode time into first 4 bytes\n    buffer[3] = time & 0xff;\n    buffer[2] = (time >> 8) & 0xff;\n    buffer[1] = (time >> 16) & 0xff;\n    buffer[0] = (time >> 24) & 0xff;\n    // Return the new objectId\n    return new ObjectID(buffer);\n};\n\n// Lookup tables\n//var encodeLookup = '0123456789abcdef'.split('');\nvar decodeLookup = [];\ni = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\n\nvar _Buffer = Buffer;\nvar convertToHex = function(bytes) {\n    return bytes.toString('hex');\n};\n\n/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @method\n * @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n */\nObjectID.createFromHexString = function createFromHexString(string) {\n    // Throw an error if it's not a valid setup\n    if (typeof string === 'undefined' || (string != null && string.length !== 24)) {\n        throw new Error(\n            'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n        );\n    }\n\n    // Use Buffer.from method if available\n    if (hasBufferType) return new ObjectID(new Buffer(string, 'hex'));\n\n    // Calculate lengths\n    var array = new _Buffer(12);\n    var n = 0;\n    var i = 0;\n\n    while (i < 24) {\n        array[n++] = (decodeLookup[string.charCodeAt(i++)] << 4) | decodeLookup[string.charCodeAt(i++)];\n    }\n\n    return new ObjectID(array);\n};\n\n/**\n * Checks if a value is a valid bson ObjectId\n *\n * @method\n * @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n */\nObjectID.isValid = function isValid(id) {\n    if (id == null) return false;\n\n    if (typeof id === 'number') {\n        return true;\n    }\n\n    if (typeof id === 'string') {\n        return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));\n    }\n\n    if (id instanceof ObjectID) {\n        return true;\n    }\n\n    if (id instanceof _Buffer) {\n        return true;\n    }\n\n    // Duck-Typing detection of ObjectId like objects\n    if (id.toHexString) {\n        return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));\n    }\n\n    return false;\n};\n\n/**\n * @ignore\n */\nObject.defineProperty(ObjectID.prototype, 'generationTime', {\n    enumerable: true,\n    get: function() {\n        return this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n    },\n    set: function(value) {\n        // Encode time into first 4 bytes\n        this.id[3] = value & 0xff;\n        this.id[2] = (value >> 8) & 0xff;\n        this.id[1] = (value >> 16) & 0xff;\n        this.id[0] = (value >> 24) & 0xff;\n    }\n});\n\n/**\n * Expose.\n */\nmodule.exports = ObjectID;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.ObjectId = ObjectID;"]},"metadata":{},"sourceType":"module"}