{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nimport Service from './service';\nimport Realtime from './realtime';\nimport moment from \"moment\";\nimport { ObjectID } from './helpers/objectid';\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.service = new Service();\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = this.getUserFromLocalStorage();\n    this.token = this.getTokenFromLocalStorage();\n    this.users = new OrderedMap();\n    this.realtime = new Realtime(this);\n    this.fetchUserChannels();\n    this.search = {\n      users: new OrderedMap()\n    };\n  }\n\n  uploadUserAvatar(formData) {\n    const userToken = this.getUserTokenId();\n\n    if (userToken) {\n      this.service.post('api/user/uploadavatar', formData).then(res => {\n        console.log(res.data.success);\n\n        if (!res.data.success) {\n          console.log(res.data.error);\n        }\n\n        if (res.data.success) {\n          this.editInfoUser('avatar', res.data.url);\n        }\n      }).catch(err => {\n        console.log(\"Send Error: \", err);\n      });\n    }\n  }\n\n  editUser(field, value) {\n    console.log(field, value, typeof value);\n  }\n\n  setThemeToLocalStorage(isDark = false) {\n    console.log(\"Select theme Dark: \", isDark);\n    localStorage.setItem('themeOfChat', isDark);\n  }\n\n  getThemeFromLocalStorage() {\n    let theme = null;\n    const data = localStorage.getItem('themeOfChat');\n\n    if (data) {\n      try {\n        theme = data;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    console.log(\"Get theme Dark from localStorage: \", theme);\n    return theme;\n  }\n\n  upLoadfile(formData) {\n    const userToken = this.getUserTokenId();\n\n    if (userToken) {\n      this.service.post('api/messages/uploadfiles', formData).then(res => {\n        console.log(res.data.success);\n\n        if (!res.data.success) {\n          console.log(res.data.error);\n        }\n\n        if (res.data.success) {\n          const messageId = new ObjectID().toString();\n          const channel = this.getActiveChannel();\n\n          const channelId = _.get(channel, '_id', null);\n\n          const currentUser = this.getCurrentUser();\n          const message = {\n            _id: messageId,\n            channelId: channelId,\n            body: res.data.url,\n            userId: _.get(currentUser, '_id'),\n            type: \"VideoOrImage\",\n            me: true\n          };\n          this.addMessage(messageId, message);\n        }\n      }).catch(err => {\n        console.log(\"Send files Error: \", err);\n      });\n    }\n  }\n\n  fetchUserChannels() {\n    const userToken = this.getUserTokenId();\n\n    if (userToken) {\n      const options = {\n        headers: {\n          authorization: userToken\n        }\n      };\n      this.service.get(`api/me/channels`, options).then(res => {\n        const channels = res.data;\n\n        _.each(channels, c => {\n          this.realtime.onAddChannel(c);\n        });\n\n        const firstChannelId = _.get(channels, '[0]._id', null);\n\n        this.fetchChannelMessages(firstChannelId);\n      }).catch(err => {\n        console.log(\"An error fetch user channlels\", err);\n      });\n    }\n  }\n\n  addUserToCache(user) {\n    user.avatar = this.loadUserAvatar(user);\n\n    const id = _.toString(user._id);\n\n    this.users = this.users.set(id, user);\n    return user;\n  }\n\n  getUserTokenId() {\n    return _.get(this.token, '_id', null);\n  }\n\n  loadUserAvatar(user) {\n    return `https://avatar.oxro.io/avatar.svg?name=nDs&background=Random&caps=3&bold=true`;\n  }\n\n  startSearchUsers(q = \"\") {\n    this.search.users = this.search.users.clear(); //query to backend server and get list of users\n\n    const data = {\n      search: q\n    };\n    this.service.post('api/users/search', data).then(res => {\n      //list off users match\n      const users = _.get(res, 'data', []); // console.log(\"Get from server: \", users);\n\n\n      _.each(users, user => {\n        //cache to this.users\n        //add user to this.search.users\n        user.avatar = this.loadUserAvatar(user);\n        const userId = `${user._id}`;\n        this.users = this.users.set(userId, user);\n        this.search.users = this.search.users.set(userId, user);\n      });\n\n      this.update();\n    }).catch(err => {\n      console.log(\" searching error\", err);\n    });\n  }\n\n  setUserToken(accessToken) {\n    if (!accessToken) {\n      this.localStorage.removeItem('token');\n      this.token = null;\n      return;\n    }\n\n    this.token = accessToken;\n    localStorage.setItem('token', JSON.stringify(accessToken));\n  }\n\n  clearCacheData() {\n    this.channels = this.channels.clear();\n    this.users = this.users.clear();\n    this.messages = this.messages.clear();\n  }\n\n  signOut() {\n    const userId = _.toString(_.get(this.user, '_id', null)); //request server and logout this user\n\n\n    const tokenId = _.get(this.token, '_id', null);\n\n    const options = {\n      headers: {\n        authorization: tokenId\n      }\n    };\n    this.service.get('api/user/logout', options); // this.isConnected();\n\n    this.user = null;\n    localStorage.removeItem('me');\n    localStorage.removeItem('token');\n\n    if (userId) {\n      this.users = this.users.remove(userId);\n    }\n\n    this.clearCacheData();\n    this.update();\n  }\n\n  getTokenFromLocalStorage() {\n    if (this.token) {\n      return this.token;\n    }\n\n    let token = null;\n    const data = localStorage.getItem('token');\n\n    if (data) {\n      try {\n        token = JSON.parse(data);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    return token;\n  }\n\n  getUserFromLocalStorage() {\n    let user = null;\n    const data = localStorage.getItem('me');\n\n    try {\n      user = JSON.parse(data);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (user) {\n      //connect to backend server verify this user\n      const token = this.getTokenFromLocalStorage();\n\n      const tokenId = _.get(token, '_id');\n\n      const options = {\n        headers: {\n          authorization: tokenId\n        }\n      };\n      this.service.get('api/users/me', options).then(res => {\n        //user login with token id\n        const accessToken = res.data;\n\n        const user = _.get(accessToken, 'user');\n\n        this.setCurrentUser(user);\n        this.setUserToken(accessToken);\n      }).catch(err => {\n        this.signOut();\n      });\n    }\n\n    return user;\n  }\n\n  setCurrentUser(user) {\n    if (!user.avatar) {\n      user.avatar = this.loadUserAvatar(user);\n    }\n\n    this.user = user;\n\n    if (user) {\n      localStorage.setItem('me', JSON.stringify(user)); //save to local store\n\n      const userId = `${user._id}`;\n      this.users = this.users.set(userId, user);\n    }\n\n    this.update();\n  }\n\n  register(user) {\n    return new Promise((resolve, reject) => {\n      this.service.post('api/users', user).then(res => {\n        console.log(\"Account Created \", res.data);\n        return resolve(res.data);\n      }).catch(err => {\n        const message = _.get(err, 'response.data.error.message', 'Register Error!');\n\n        return reject(message);\n      });\n    });\n  }\n\n  login(email = null, password = null, ipClient = null) {\n    const userEmail = _.toLower(email);\n\n    const user = {\n      email: userEmail,\n      password: password,\n      ipClient: ipClient\n    };\n    console.log(\"Logining with: \", user);\n    return new Promise((resolve, reject) => {\n      this.service.post('api/users/login', user).then(res => {\n        //that mean successful login\n        const accessToken = _.get(res, 'data');\n\n        const user = _.get(accessToken, 'user');\n\n        this.setCurrentUser(user);\n        this.setUserToken(accessToken);\n        this.realtime.connect(); // begin fetch user's channel\n\n        this.fetchUserChannels(); //Call to realtime and connect again to socket server with this user\n      }).catch(err => {\n        // login error\n        const message = _.get(err, 'response.data.error.message', 'Login Error');\n\n        return reject(message);\n      });\n    }); // const _this = this;\n    // return new Promise((resolve, reject) => {\n    //     const user = users.find((user) => user.email === userEmail);\n    //     if( user ) {\n    //         _this.setCurrentUser(user);\n    //     }\n    //     return user ? resolve(user) : reject(\"User not found!\")\n    // });\n  }\n\n  addUserToChannel(channelId, userId) {\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      channel.members = channel.members.set(userId, true);\n      this.channels = this.channels.set(channelId, channel);\n      this.update();\n    }\n  }\n\n  getSearchUsers() {\n    // const keyword = _.toLower(search);\n    // let searchItems = new OrderedMap();\n    // const currentUser =this.getCurrentUser();\n    // const currentUserId = _.get(currentUser, '_id');\n    // if(_.trim(search).length){\n    //    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n    // }\n    return this.search.users.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, \"_id\");\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId);\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  fetchChannelMessages(channelId) {\n    let channel = this.channels.get(channelId);\n\n    if (channel && !_.get(channel, 'isFetchMessages')) {\n      const token = _.get(this.token, '_id');\n\n      const options = {\n        headers: {\n          authorization: token\n        }\n      };\n      this.service.get(`api/channels/${channelId}/messages`, options).then(res => {\n        channel.isFetchMessages = true;\n        const messages = res.data;\n\n        _.each(messages, message => {\n          this.realtime.onAddMessage(message);\n        });\n\n        this.channels = this.channels.set(channelId, channel);\n      }).catch(err => {\n        console.log(\"An error fetching channel 's messages\", err);\n      });\n    }\n  }\n\n  isConnected() {\n    return this.realtime.isConnected;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.fetchChannelMessages(id);\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  setMessage(message, notify = false) {\n    const id = _.toString(_.get(message, '_id'));\n\n    this.messages = this.messages.set(id, message);\n\n    const channelId = _.toString(message.channelId);\n\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      channel.messages = channel.messages.set(id, true);\n      channel.lastMessage = _.get(message, 'body', '');\n      channel.notify = notify;\n      this.channels = this.channels.set(channelId, channel);\n    } else {\n      // fetch to the server with channel info\n      this.service.get(`api/channels/${channelId}`).then(response => {\n        const channel = _.get(response, 'data');\n        /*const users = _.get(channel, 'users');\r\n        _.each(users, (user) => {\r\n              this.addUserToCache(user);\r\n        });*/\n\n\n        this.realtime.onAddChannel(channel);\n      });\n    }\n\n    this.update();\n  }\n\n  editInfoUser(field, value) {\n    const userId = `${_.get(this.user, '_id', null)}`;\n\n    if (value) {\n      const obj = {\n        payload: value,\n        field: field,\n        user: userId\n      };\n      this.realtime.send({\n        action: 'edit_user',\n        payload: {\n          obj\n        }\n      });\n    }\n\n    this.update();\n  }\n\n  addTyping(channel, typing = false) {\n    if (channel) {\n      const userId = `${_.get(this.user, '_id', null)}`;\n\n      const channelId = _.get(channel, '_id');\n\n      const obj = {\n        channelId: channelId,\n        payload: typing,\n        typier: userId\n      };\n      console.log(\"channel typing: \", channelId);\n      this.realtime.send({\n        action: 'typing_status',\n        payload: {\n          obj\n        }\n      });\n    }\n\n    this.update();\n  }\n\n  addMessage(id, message = {}) {\n    const user = this.getCurrentUser();\n    message.user = user;\n    this.messages = this.messages.set(id, message); //add new message to \n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      let channel = this.channels.get(channelId);\n      channel.lastMessage = _.get(message, 'body', ''); //now i send this channel to the server\n\n      this.realtime.send({\n        action: 'create_channel',\n        payload: channel\n      }); // send to the via websocket to create new message and notify other\n\n      this.realtime.send({\n        action: 'create_message',\n        payload: message\n      });\n      channel.messages = channel.messages.set(id, true);\n      channel.isNew = false;\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  removeMemberFromChannel(channel = null, user = null) {\n    if (!channel || !user) {\n      return;\n    }\n\n    const channelId = _.get(channel, '_id');\n\n    const userId = _.get(user, '_id');\n\n    channel.members = channel.members.remove(userId);\n    this.channels = this.channels.set(channelId, channel);\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = new OrderedMap();\n\n    if (channel) {\n      channel.messages.forEach((value, key) => {\n        const message = this.messages.get(key);\n        messages = messages.set(key, message);\n      });\n    }\n\n    return messages.valueSeq();\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.forEach((value, key) => {\n        const userId = `${key}`;\n        const user = this.users.get(userId); // console.log(\"User from Channel: \", user);\n\n        const loggedUser = this.getCurrentUser();\n\n        if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n          members = members.set(key, user);\n        }\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel); // console.log(channel);\n    // console.log(\"Mess get from server to client: \", channel);\n\n    this.update();\n  }\n\n  getChannels() {\n    this.channels = this.channels.sort((a, b) => a.updated - b.updated);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/store.js"],"names":["OrderedMap","_","Service","Realtime","moment","ObjectID","Store","constructor","appComponent","app","service","messages","channels","activeChannelId","user","getUserFromLocalStorage","token","getTokenFromLocalStorage","users","realtime","fetchUserChannels","search","uploadUserAvatar","formData","userToken","getUserTokenId","post","then","res","console","log","data","success","error","editInfoUser","url","catch","err","editUser","field","value","setThemeToLocalStorage","isDark","localStorage","setItem","getThemeFromLocalStorage","theme","getItem","upLoadfile","messageId","toString","channel","getActiveChannel","channelId","get","currentUser","getCurrentUser","message","_id","body","userId","type","me","addMessage","options","headers","authorization","each","c","onAddChannel","firstChannelId","fetchChannelMessages","addUserToCache","avatar","loadUserAvatar","id","set","startSearchUsers","q","clear","update","setUserToken","accessToken","removeItem","JSON","stringify","clearCacheData","signOut","tokenId","remove","parse","setCurrentUser","register","Promise","resolve","reject","login","email","password","ipClient","userEmail","toLower","connect","addUserToChannel","members","getSearchUsers","valueSeq","onCreateNewChannel","addChannel","setActiveChannelId","isFetchMessages","onAddMessage","isConnected","first","setMessage","notify","lastMessage","response","obj","payload","send","action","addTyping","typing","typier","isNew","removeMemberFromChannel","getMessages","getMessagesFromChannel","forEach","key","getMembersFromChannel","loggedUser","index","getChannels","sort","a","b","updated","forceUpdate"],"mappings":"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","sourcesContent":["import { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\nimport Service from './service';\r\nimport Realtime from './realtime';\r\nimport moment from \"moment\";\r\nimport {ObjectID} from './helpers/objectid';\r\n\r\n\r\nexport default class Store {\r\n    constructor(appComponent){\r\n        this.app = appComponent;\r\n        this.service = new Service();\r\n        this.messages = new OrderedMap();\r\n        this.channels = new OrderedMap();\r\n        this.activeChannelId = null;\r\n\r\n        this.user = this.getUserFromLocalStorage();\r\n        this.token = this.getTokenFromLocalStorage();\r\n        this.users = new OrderedMap();\r\n\r\n        this.realtime = new Realtime(this);\r\n        this.fetchUserChannels();\r\n        this.search = {\r\n            users: new OrderedMap(),\r\n        }\r\n    }\r\n    uploadUserAvatar(formData){\r\n        const userToken = this.getUserTokenId();\r\n\r\n        if(userToken){\r\n\r\n            this.service.post('api/user/uploadavatar', formData).then((res) => {\r\n\r\n                console.log(res.data.success);\r\n                if(!res.data.success){\r\n                    console.log(res.data.error)\r\n                }\r\n                if (res.data.success) {\r\n                    this.editInfoUser('avatar', res.data.url )\r\n                }\r\n\r\n            }).catch((err) => {\r\n                console.log(\"Send Error: \", err);\r\n            });\r\n        }\r\n    }\r\n    editUser(field, value){\r\n        console.log(field, value , typeof(value));\r\n    }\r\n    setThemeToLocalStorage(isDark = false ){\r\n\r\n        console.log(\"Select theme Dark: \", isDark);\r\n        localStorage.setItem('themeOfChat', isDark);\r\n       \r\n    }\r\n    getThemeFromLocalStorage(){\r\n        let theme = null;\r\n        const data = localStorage.getItem('themeOfChat');\r\n        if(data){\r\n            try{\r\n                theme = data;\r\n            }\r\n            catch (err){\r\n                console.log(err);\r\n            }\r\n        }\r\n        console.log(\"Get theme Dark from localStorage: \", theme);\r\n        return theme;\r\n    }\r\n\r\n    upLoadfile(formData){\r\n        const userToken = this.getUserTokenId();\r\n\r\n        if(userToken){\r\n\r\n            this.service.post('api/messages/uploadfiles', formData).then((res) => {\r\n\r\n                console.log(res.data.success);\r\n                if(!res.data.success){\r\n                    console.log(res.data.error)\r\n                }\r\n                if (res.data.success) {\r\n                    const messageId = new ObjectID().toString();\r\n                    const channel = this.getActiveChannel();\r\n                    const channelId = _.get(channel , '_id', null);\r\n                    const currentUser = this.getCurrentUser();\r\n                    const message = {\r\n                        _id: messageId,\r\n                        channelId: channelId,\r\n                        body : res.data.url,\r\n                        userId: _.get(currentUser, '_id'),\r\n                        type:\"VideoOrImage\",\r\n                        me: true,\r\n                };\r\n                this.addMessage(messageId, message);\r\n\r\n            }\r\n            }).catch((err) => {\r\n                console.log(\"Send files Error: \", err);\r\n            });\r\n        }\r\n    \r\n       \r\n    }\r\n    fetchUserChannels(){\r\n        const userToken =this.getUserTokenId();\r\n        if(userToken){\r\n            const options = {\r\n                headers: {\r\n                    authorization: userToken,\r\n                }\r\n            }\r\n            this.service.get(`api/me/channels`, options).then((res) => {\r\n                const channels = res.data;\r\n                _.each(channels, (c) => {\r\n                    this.realtime.onAddChannel(c);\r\n                });\r\n\r\n                const firstChannelId = _.get(channels, '[0]._id', null);\r\n                this.fetchChannelMessages(firstChannelId);\r\n            }).catch((err) => {\r\n\r\n                console.log(\"An error fetch user channlels\", err);\r\n            })\r\n        }\r\n    }\r\n    addUserToCache(user){\r\n        user.avatar = this.loadUserAvatar(user);\r\n        const id = _.toString(user._id);\r\n        this.users = this.users.set(id, user);\r\n        return user;\r\n    }\r\n\r\n    getUserTokenId(){\r\n        return _.get(this.token, '_id', null);\r\n    }\r\n    loadUserAvatar(user){\r\n\r\n            return `https://avatar.oxro.io/avatar.svg?name=nDs&background=Random&caps=3&bold=true`\r\n       \r\n    }\r\n    startSearchUsers(q = \"\"){\r\n        this.search.users = this.search.users.clear();\r\n        //query to backend server and get list of users\r\n        const data = {search : q};\r\n        \r\n        this.service.post('api/users/search', data).then((res) => {\r\n            //list off users match\r\n            const users = _.get(res, 'data', []);\r\n            // console.log(\"Get from server: \", users);\r\n            _.each(users, (user) => {\r\n               //cache to this.users\r\n               //add user to this.search.users\r\n               user.avatar = this.loadUserAvatar(user);\r\n               const userId = `${user._id}`;\r\n               this.users = this.users.set(userId, user);\r\n               this.search.users = this.search.users.set(userId, user);\r\n\r\n           });\r\n           this.update();\r\n\r\n        }).catch((err) => {\r\n            console.log(\" searching error\", err);\r\n        }); \r\n    }\r\n\r\n\r\n    setUserToken(accessToken){\r\n        if(!accessToken){\r\n            this.localStorage.removeItem('token');\r\n            this.token = null;\r\n            return;\r\n        }\r\n        this.token = accessToken;\r\n        localStorage.setItem('token', JSON.stringify(accessToken));\r\n    }\r\n\r\n    clearCacheData(){\r\n        this.channels = this.channels.clear();\r\n        this.users = this.users.clear();\r\n        this.messages = this.messages.clear();\r\n    }\r\n    signOut(){\r\n\r\n        const userId = _.toString(_.get(this.user, '_id', null));\r\n        //request server and logout this user\r\n        const tokenId = _.get(this.token, '_id', null);\r\n\r\n        const options = {\r\n            headers : {\r\n                authorization: tokenId\r\n            }\r\n        }\r\n        this.service.get('api/user/logout', options);\r\n        // this.isConnected();\r\n        this.user = null;\r\n        localStorage.removeItem('me');\r\n        localStorage.removeItem('token');\r\n        if(userId){\r\n            this.users = this.users.remove(userId);\r\n        }\r\n        this.clearCacheData();\r\n        this.update();\r\n    }\r\n\r\n    getTokenFromLocalStorage(){\r\n\r\n        if(this.token){\r\n            return this.token;\r\n        }\r\n\r\n        let token = null;\r\n        const data = localStorage.getItem('token');\r\n        if(data){\r\n            try{\r\n                token = JSON.parse(data);\r\n            }\r\n            catch (err){\r\n                console.log(err);\r\n            }\r\n            \r\n        }\r\n        return token;\r\n    }\r\n\r\n    getUserFromLocalStorage(){\r\n\r\n        let user = null;\r\n        const data = localStorage.getItem('me');\r\n         try {\r\n                user = JSON.parse(data);\r\n         }\r\n         catch(err) {\r\n             console.log(err);\r\n         }\r\n         if(user){\r\n            //connect to backend server verify this user\r\n            const token = this.getTokenFromLocalStorage();\r\n            const tokenId = _.get(token, '_id');\r\n            const options = {\r\n                headers: {\r\n                    authorization: tokenId,\r\n                }\r\n            }\r\n            \r\n            this.service.get('api/users/me', options).then((res) => {\r\n                //user login with token id\r\n                const accessToken = res.data;\r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n\r\n            }).catch(err => {\r\n                this.signOut();\r\n            });\r\n        }\r\n\r\n         return user;\r\n    }    \r\n        \r\n    \r\n    setCurrentUser(user){\r\n        if(!user.avatar){\r\n            user.avatar = this.loadUserAvatar(user);\r\n        }\r\n        this.user = user;\r\n        if(user){\r\n            \r\n            localStorage.setItem('me', JSON.stringify(user));\r\n            //save to local store\r\n            const userId =`${user._id}`;\r\n            this.users = this.users.set(userId, user);\r\n\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    register(user){\r\n        return new Promise((resolve, reject) => {\r\n            this.service.post('api/users', user).then((res) =>{\r\n\r\n                console.log(\"Account Created \", res.data);\r\n                return resolve(res.data);\r\n                \r\n            }).catch((err) => {\r\n                const message = _.get(err, 'response.data.error.message', 'Register Error!');\r\n                return reject(message);\r\n\r\n            });\r\n        })\r\n\r\n    }\r\n\r\n\r\n    login(email = null, password = null, ipClient = null){\r\n\r\n        const userEmail = _.toLower(email);\r\n        const user = {\r\n            email: userEmail,\r\n            password: password,\r\n            ipClient: ipClient,\r\n        }\r\n        console.log(\"Logining with: \", user);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this.service.post('api/users/login', user).then((res) => {\r\n                //that mean successful login\r\n                const accessToken = _.get(res, 'data'); \r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n                this.realtime.connect();\r\n\r\n                // begin fetch user's channel\r\n                this.fetchUserChannels();\r\n                //Call to realtime and connect again to socket server with this user\r\n                \r\n\r\n\r\n            }).catch((err) => {\r\n                // login error\r\n                const message = _.get(err, 'response.data.error.message', 'Login Error');\r\n                return reject(message);\r\n            })\r\n\r\n        });\r\n        // const _this = this;\r\n        // return new Promise((resolve, reject) => {\r\n        //     const user = users.find((user) => user.email === userEmail);\r\n        //     if( user ) {\r\n        //         _this.setCurrentUser(user);\r\n        //     }\r\n        //     return user ? resolve(user) : reject(\"User not found!\")\r\n        // });\r\n    }\r\n\r\n    addUserToChannel(channelId, userId) {\r\n        const channel = this.channels.get(channelId);\r\n        if(channel) {\r\n            channel.members = channel.members.set(userId, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n            this.update();\r\n        }\r\n      \r\n    }\r\n    getSearchUsers(){\r\n        // const keyword = _.toLower(search);\r\n\r\n        // let searchItems = new OrderedMap();\r\n        // const currentUser =this.getCurrentUser();\r\n        // const currentUserId = _.get(currentUser, '_id');\r\n       \r\n        // if(_.trim(search).length){\r\n        //    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\r\n        // }\r\n\r\n        return this.search.users.valueSeq();\r\n    }\r\n\r\n    onCreateNewChannel(channel = {}){\r\n        const channelId = _.get(channel, \"_id\");\r\n        this.addChannel(channelId, channel );\r\n        this.setActiveChannelId(channelId);\r\n    \r\n    }\r\n\r\n    getCurrentUser(){\r\n        return this.user;\r\n    }\r\n\r\n    fetchChannelMessages(channelId){\r\n\r\n        let channel = this.channels.get(channelId);\r\n            if( channel && !_.get(channel, 'isFetchMessages')){\r\n\r\n                const token = _.get(this.token, '_id');\r\n                const options = {\r\n                    headers: {\r\n                        authorization: token,\r\n                    }\r\n                }\r\n\r\n                this.service.get(`api/channels/${channelId}/messages`, options).then((res) => {\r\n                    channel.isFetchMessages = true;\r\n\r\n                    const messages = res.data;\r\n                \r\n                    _.each(messages, (message) => {\r\n                        this.realtime.onAddMessage(message);\r\n                    });\r\n                    this.channels = this.channels.set(channelId, channel);\r\n\r\n                }).catch((err) => {\r\n                    console.log(\"An error fetching channel 's messages\", err);\r\n\r\n                }\r\n            )}\r\n        }   \r\n    \r\n\r\n    isConnected(){\r\n        return this.realtime.isConnected;\r\n    }\r\n\r\n    setActiveChannelId(id) {\r\n        this.activeChannelId = id;\r\n        this.fetchChannelMessages(id);\r\n        this.update();\r\n    }\r\n    getActiveChannel(){\r\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\r\n        return channel;\r\n    }\r\n\r\n    setMessage(message, notify = false){\r\n        const id = _.toString(_.get(message, '_id'));\r\n        this.messages = this.messages.set(id, message);\r\n        const channelId = _.toString(message.channelId);\r\n        const channel = this.channels.get(channelId);\r\n\r\n        if (channel) {\r\n            channel.messages = channel.messages.set(id, true);\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            channel.notify = notify;\r\n\r\n            this.channels = this.channels.set(channelId, channel);\r\n        } else {\r\n\r\n            // fetch to the server with channel info\r\n            this.service.get(`api/channels/${channelId}`).then((response) => {\r\n\r\n\r\n                const channel = _.get(response, 'data');\r\n\r\n                /*const users = _.get(channel, 'users');\r\n                _.each(users, (user) => {\r\n\r\n                    this.addUserToCache(user);\r\n                });*/\r\n\r\n                this.realtime.onAddChannel(channel);\r\n\r\n\r\n            })\r\n        }\r\n        this.update();\r\n    }\r\n    editInfoUser(field, value){\r\n        const userId = `${_.get(this.user, '_id', null)}`;\r\n        if(value){\r\n\r\n        const obj = {\r\n            payload: value,\r\n            field: field,\r\n            user: userId,\r\n        }\r\n            this.realtime.send(\r\n                {\r\n                    action: 'edit_user',\r\n                    payload: {obj},\r\n                }\r\n            );\r\n        }\r\n    this.update();\r\n    }\r\n\r\n    addTyping(channel, typing = false){\r\n        \r\n        if(channel){\r\n            const userId = `${_.get(this.user, '_id', null)}`;\r\n            const channelId = _.get(channel, '_id');\r\n            const obj = {\r\n                channelId: channelId,\r\n                payload: typing,\r\n                typier: userId,\r\n            }\r\n            console.log(\"channel typing: \", channelId);\r\n            this.realtime.send(\r\n                {\r\n                    action: 'typing_status',\r\n                    payload: {obj},\r\n                }\r\n            );\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    addMessage(id, message = {}){\r\n\r\n        const user = this.getCurrentUser();\r\n        message.user = user;\r\n        this.messages = this.messages.set(id, message);\r\n        //add new message to \r\n        const channelId = _.get(message, 'channelId');\r\n        if(channelId){\r\n\r\n            \r\n            let channel = this.channels.get(channelId);\r\n\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            //now i send this channel to the server\r\n            \r\n           this.realtime.send(\r\n               {\r\n                    action: 'create_channel',\r\n                    payload: channel,\r\n                }\r\n            );\r\n            // send to the via websocket to create new message and notify other\r\n            this.realtime.send(\r\n                {\r\n                    action: 'create_message',\r\n                    payload: message,\r\n                }\r\n            );\r\n\r\n            channel.messages = channel.messages.set(id, true);\r\n\r\n\r\n            channel.isNew = false;\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeMemberFromChannel( channel = null, user = null){\r\n        if(!channel || !user ){\r\n            return;\r\n        }\r\n        const channelId = _.get(channel, '_id')\r\n        const userId = _.get(user, '_id');\r\n        channel.members = channel.members.remove(userId);\r\n        this.channels = this.channels.set(channelId, channel);\r\n        this.update();\r\n    }\r\n\r\n    getMessages(){\r\n        return this.messages.valueSeq();\r\n    }\r\n    getMessagesFromChannel(channel){\r\n        let messages = new OrderedMap();\r\n\r\n        if(channel){\r\n            channel.messages.forEach((value, key) => {\r\n\r\n                const message = this.messages.get(key);\r\n                messages = messages.set( key, message);\r\n    \r\n            });\r\n        }\r\n        return messages.valueSeq();\r\n        \r\n    }\r\n\r\n    getMembersFromChannel(channel){\r\n        let members = new OrderedMap();\r\n        if(channel){\r\n            channel.members.forEach((value, key) => {\r\n\r\n                const userId = `${key}`\r\n                const user = this.users.get(userId);\r\n                // console.log(\"User from Channel: \", user);\r\n                const loggedUser = this.getCurrentUser();\r\n                if( _.get(loggedUser, '_id') !== _.get(user, '_id')){\r\n                    members = members.set(key, user);\r\n                   \r\n                }\r\n            });\r\n               \r\n        }\r\n        return members.valueSeq();\r\n    }\r\n\r\n\r\n    addChannel(index, channel = {}){\r\n        this.channels = this.channels.set(`${index}`, channel);\r\n        // console.log(channel);\r\n        // console.log(\"Mess get from server to client: \", channel);\r\n        this.update();\r\n    }\r\n\r\n    getChannels(){\r\n        this.channels = this.channels.sort((a, b) => a.updated - b.updated);\r\n        return this.channels.valueSeq();\r\n    }\r\n    update(){\r\n        this.app.forceUpdate();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}