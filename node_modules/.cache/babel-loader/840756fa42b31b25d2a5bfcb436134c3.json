{"ast":null,"code":"export default class Realtime {\n  constructor(store) {\n    this.store = store;\n    this.ws = null;\n    this.isConnected = false;\n    this.connect();\n  }\n\n  send(msg = {}) {\n    const isConnected = this.isConnected;\n\n    if (isConnected) {\n      const msgString = JSON.stringify(msg);\n      this.ws.send(msgString);\n    }\n  }\n\n  authentication() {\n    const store = this.store;\n    const tokenId = store.getUserTokenId();\n    const message = {\n      action: 'auth',\n      payload: `${tokenId}`\n    };\n    this.send(message);\n  }\n\n  connect() {\n    this.ws = new WebSocket('ws://localhost:8080');\n    this.ws = ws;\n\n    ws.onopen = () => {\n      //tell to server who are you ?\n      this.isConnected = true;\n      this.authentication();\n\n      ws.onmessage = e => {\n        console.log(\"Mess from server: \", e.data);\n      };\n    };\n\n    ws.onclose = () => {\n      this.isConnected = false; //\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/realtime.js"],"names":["Realtime","constructor","store","ws","isConnected","connect","send","msg","msgString","JSON","stringify","authentication","tokenId","getUserTokenId","message","action","payload","WebSocket","onopen","onmessage","e","console","log","data","onclose"],"mappings":"AAAA,eAAe,MAAMA,QAAN,CAAc;AAEzBC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,OAAL;AAEH;;AACDC,EAAAA,IAAI,CAAEC,GAAG,GAAG,EAAR,EAAW;AACX,UAAMH,WAAW,GAAG,KAAKA,WAAzB;;AACA,QAAGA,WAAH,EAAe;AACX,YAAMI,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAAlB;AACA,WAAKJ,EAAL,CAAQG,IAAR,CAAaE,SAAb;AACH;AACJ;;AACDG,EAAAA,cAAc,GAAE;AACZ,UAAMT,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMU,OAAO,GAAGV,KAAK,CAACW,cAAN,EAAhB;AACA,UAAMC,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,MADI;AAEZC,MAAAA,OAAO,EAAG,GAAEJ,OAAQ;AAFR,KAAhB;AAII,SAAKN,IAAL,CAAUQ,OAAV;AACP;;AAEDT,EAAAA,OAAO,GAAE;AAEL,SAAKF,EAAL,GAAU,IAAIc,SAAJ,CAAc,qBAAd,CAAV;AACA,SAAKd,EAAL,GAAUA,EAAV;;AACAA,IAAAA,EAAE,CAACe,MAAH,GAAY,MAAM;AACd;AACA,WAAKd,WAAL,GAAmB,IAAnB;AACA,WAAKO,cAAL;;AAEAR,MAAAA,EAAE,CAACgB,SAAH,GAAgBC,CAAD,IAAO;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,CAAC,CAACG,IAApC;AACH,OAFD;AAGH,KARD;;AASApB,IAAAA,EAAE,CAACqB,OAAH,GAAa,MAAM;AACf,WAAKpB,WAAL,GAAmB,KAAnB,CADe,CAEf;AACH,KAHD;AAIH;;AA3CwB","sourcesContent":["export default class Realtime{\r\n\r\n    constructor(store){\r\n        this.store = store;\r\n        this.ws = null;\r\n        this.isConnected = false;\r\n        this.connect();\r\n\r\n    }\r\n    send( msg = {}){\r\n        const isConnected = this.isConnected;\r\n        if(isConnected){\r\n            const msgString = JSON.stringify(msg);\r\n            this.ws.send(msgString);\r\n        }\r\n    }\r\n    authentication(){\r\n        const store = this.store;\r\n        const tokenId = store.getUserTokenId();\r\n        const message = {\r\n            action: 'auth',\r\n            payload: `${tokenId}`\r\n        }\r\n            this.send(message);\r\n    }\r\n\r\n    connect(){\r\n\r\n        this.ws = new WebSocket('ws://localhost:8080');\r\n        this.ws = ws;\r\n        ws.onopen = () => {\r\n            //tell to server who are you ?\r\n            this.isConnected = true;\r\n            this.authentication();\r\n            \r\n            ws.onmessage = (e) => {\r\n                console.log(\"Mess from server: \", e.data);\r\n            }\r\n        }\r\n        ws.onclose = () => {\r\n            this.isConnected = false;\r\n            //\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}