{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\App3.js\";\nimport React, { Component } from 'react';\n\nclass Video extends Component {\n  constructor(props) {\n    super(props);\n\n    this.mutemic = e => {\n      const stream = this.video.srcObject.getTracks().filter(track => track.kind === 'audio');\n      this.setState(prevState => {\n        if (stream) stream[0].enabled = !prevState.mic;\n        return {\n          mic: !prevState.mic\n        };\n      });\n    };\n\n    this.mutecamera = e => {\n      const stream = this.video.srcObject.getTracks().filter(track => track.kind === 'video');\n      this.setState(prevState => {\n        if (stream) stream[0].enabled = !prevState.camera;\n        return {\n          camera: !prevState.camera\n        };\n      });\n    };\n\n    this.state = {\n      mic: true,\n      camera: true,\n      // currentStream: new MediaStream(),\n      // videoTrack: false,\n      videoVisible: true\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.videoStream) {\n      this.video.srcObject = this.props.videoStream;\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // console.log('1. nextProps', this.props.showMuteControls, nextProps.videoStream && nextProps.videoStream.getTracks())\n    console.log('1', this.props.videoType, nextProps.videoStream); // This is done only once\n\n    if (nextProps.videoStream && nextProps.videoStream !== this.props.videoStream) {\n      // if (!this.props.videoStream) {\n      console.log('2', this.props.videoType, nextProps.videoStream);\n      this.video.srcObject = nextProps.videoStream;\n    } // This is done only once when we receive a video track\n\n\n    const videoTrack = nextProps.videoStream && nextProps.videoStream.getVideoTracks();\n\n    if (this.props.videoType === 'remoteVideo' && videoTrack && videoTrack.length) {\n      videoTrack[0].onmute = () => {\n        // alert('muted')\n        this.setState({\n          videoVisible: false\n        });\n        this.props.videoMuted(nextProps.videoStream);\n      };\n\n      videoTrack[0].onunmute = () => {\n        this.setState({\n          videoVisible: true\n        });\n        this.props.videoMuted(nextProps.videoStream);\n      };\n    }\n\n    const audioTrack = nextProps.videoStream && nextProps.videoStream.getAudioTracks();\n\n    if (this.props.videoType === 'remoteVideo' && audioTrack && audioTrack.length) {\n      audioTrack[0].onmute = () => {\n        alert('muted'); // this.setState({\n        //   videoVisible: false,\n        // })\n        // this.props.videoMuted(nextProps.videoStream)\n      };\n    }\n  }\n\n  render() {\n    const muteControls = this.props.showMuteControls && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      onClick: this.mutemic,\n      style: {\n        cursor: 'pointer',\n        padding: 5,\n        fontSize: 20,\n        color: this.state.mic && 'white' || 'red'\n      },\n      class: \"material-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, this.state.mic && 'mic' || 'mic_off'), /*#__PURE__*/React.createElement(\"i\", {\n      onClick: this.mutecamera,\n      style: {\n        cursor: 'pointer',\n        padding: 5,\n        fontSize: 20,\n        color: this.state.camera && 'white' || 'red'\n      },\n      class: \"material-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, this.state.camera && 'videocam' || 'videocam_off'));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: { ...this.props.frameStyle\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      id: this.props.id,\n      muted: this.props.muted,\n      autoPlay: true,\n      style: {\n        visibility: this.state.videoVisible && 'visible' || 'hidden',\n        ...this.props.videoStyles\n      } // ref={ this.props.videoRef }\n      ,\n      ref: ref => {\n        this.video = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }), muteControls);\n  }\n\n}\n\nexport default Video;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/App3.js"],"names":["React","Component","Video","constructor","props","mutemic","e","stream","video","srcObject","getTracks","filter","track","kind","setState","prevState","enabled","mic","mutecamera","camera","state","videoVisible","componentDidMount","videoStream","componentWillReceiveProps","nextProps","console","log","videoType","videoTrack","getVideoTracks","length","onmute","videoMuted","onunmute","audioTrack","getAudioTracks","alert","render","muteControls","showMuteControls","cursor","padding","fontSize","color","frameStyle","id","muted","visibility","videoStyles","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Video extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      mic: true,\r\n      camera: true,\r\n      // currentStream: new MediaStream(),\r\n      // videoTrack: false,\r\n      videoVisible: true,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.videoStream) {\r\n      this.video.srcObject = this.props.videoStream\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n\r\n    // console.log('1. nextProps', this.props.showMuteControls, nextProps.videoStream && nextProps.videoStream.getTracks())\r\n    console.log('1', this.props.videoType, nextProps.videoStream)\r\n\r\n    // This is done only once\r\n    if (nextProps.videoStream && nextProps.videoStream !== this.props.videoStream) {\r\n    // if (!this.props.videoStream) {\r\n      console.log('2', this.props.videoType, nextProps.videoStream)\r\n      this.video.srcObject = nextProps.videoStream\r\n    }\r\n\r\n    // This is done only once when we receive a video track\r\n    const videoTrack = nextProps.videoStream && nextProps.videoStream.getVideoTracks()\r\n    if (this.props.videoType === 'remoteVideo' && videoTrack && videoTrack.length) {\r\n\r\n      videoTrack[0].onmute = () => {\r\n        // alert('muted')\r\n        this.setState({\r\n          videoVisible: false,\r\n        })\r\n        this.props.videoMuted(nextProps.videoStream)\r\n      }\r\n\r\n      videoTrack[0].onunmute = () => {\r\n        this.setState({\r\n          videoVisible: true,\r\n        })\r\n        this.props.videoMuted(nextProps.videoStream)\r\n      }\r\n    }\r\n\r\n\r\n    const audioTrack = nextProps.videoStream && nextProps.videoStream.getAudioTracks()\r\n    if (this.props.videoType === 'remoteVideo' && audioTrack && audioTrack.length) {\r\n      audioTrack[0].onmute = () => {\r\n        alert('muted')\r\n        // this.setState({\r\n        //   videoVisible: false,\r\n        // })\r\n        // this.props.videoMuted(nextProps.videoStream)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  mutemic = (e) => {\r\n    const stream = this.video.srcObject.getTracks().filter(track => track.kind === 'audio')\r\n    this.setState(prevState => {\r\n      if (stream) stream[0].enabled = !prevState.mic\r\n      return {mic: !prevState.mic}\r\n    })\r\n  }\r\n\r\n  mutecamera = (e) => {\r\n    const stream = this.video.srcObject.getTracks().filter(track => track.kind === 'video')\r\n    this.setState(prevState => {\r\n      if (stream) stream[0].enabled = !prevState.camera\r\n      return {camera: !prevState.camera}\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const muteControls = this.props.showMuteControls && (\r\n      <div>\r\n        <i onClick={this.mutemic} style={{ cursor: 'pointer', padding: 5, fontSize: 20, color: this.state.mic && 'white' || 'red' }} class='material-icons'>{this.state.mic && 'mic' || 'mic_off'}</i>\r\n        <i onClick={this.mutecamera} style={{ cursor: 'pointer', padding: 5, fontSize: 20, color: this.state.camera && 'white' || 'red' }} class='material-icons'>{this.state.camera && 'videocam' || 'videocam_off'}</i>\r\n      </div>\r\n    )\r\n\r\n    return (\r\n      <div\r\n        style={{ ...this.props.frameStyle,  }}\r\n      >\r\n        {/* <audio id={this.props.id} muted={this.props.muted} ref={ (ref) => {this.video = ref }}></audio> */}\r\n        <video\r\n          id={this.props.id}\r\n          muted={this.props.muted}\r\n          autoPlay\r\n          style={{\r\n            visibility: this.state.videoVisible && 'visible' || 'hidden',\r\n            ...this.props.videoStyles,\r\n          }}\r\n          // ref={ this.props.videoRef }\r\n          ref={ (ref) => {this.video = ref }}\r\n        ></video>\r\n        {muteControls}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Video"]},"metadata":{},"sourceType":"module"}