{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\player\\\\TopBar.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { IconButton, Grid, Slider, LinearProgress, makeStyles, withStyles } from \"@material-ui/core/\";\nimport { ExpandMore, GetApp, Reply, DoneOutline, Done, AlarmOff } from \"@material-ui/icons/\";\nimport VolumeController from \"./VolumeController\";\nimport { useSongMethods } from \"../RenderDatabase\";\nimport { downloadSong } from \"../../external/saveSong\";\nimport SleepTimer from './SleepTimer';\nimport { GlobalContext } from \"../GlobalState\";\nconst DownloadLoader = withStyles({\n  root: {\n    height: 2,\n    width: \"70%\",\n    margin: \"0 auto\",\n    transform: \"translateY(-10px)\"\n  }\n})(LinearProgress);\n\nconst TopBar = ({\n  song,\n  player,\n  setPlayerState,\n  history\n}) => {\n  const {\n    snackbarMsg\n  } = useContext(GlobalContext);\n  const [isSongDownloaded, setSongDownloaded] = useState(false);\n  const [isSongDownloading, setSongDownloading] = useState(false);\n  const {\n    handleDownload,\n    handleRemoveSong,\n    deleteDialogComponent\n  } = useSongMethods();\n  useEffect(() => {\n    if (snackbarMsg === \"Song Downloaded\" || song.audio) {\n      setSongDownloaded(true);\n      setSongDownloading(false);\n    }\n  }, [snackbarMsg]); // if the song is downloaded we will change\n  // share prompt using chrome web api\n\n  const shareSong = () => {\n    if (navigator.share) {\n      navigator.share({\n        title: \"Share This Song\",\n        text: `Hey Listen to ${song.title} on nDs Music`,\n        url: window.location.href //get the current window url\n\n      }).then(() => console.log(\"Successful share\")).catch(error => console.log(\"Error sharing\", error));\n    }\n  };\n\n  const minimizePlayer = () => {\n    setPlayerState(\"minimized\");\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    direction: \"row\",\n    style: {\n      padding: \" 0 10px\",\n      marginTop: \"10px\",\n      position: \"absolute\",\n      top: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(VolumeController, {\n    player: player,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), deleteDialogComponent, /*#__PURE__*/React.createElement(Reply, {\n    style: {\n      transform: \" scaleX(-1) translateY(-2px)\"\n    },\n    onClick: shareSong,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SleepTimer, {\n    player: player,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, isSongDownloaded ? /*#__PURE__*/React.createElement(DoneOutline, {\n    color: \"primary\",\n    onClick: () => handleRemoveSong(song.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }) //song will be removed\n  :\n  /*#__PURE__*/\n  React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GetApp, {\n    color: \"primary\",\n    onClick: () => {\n      handleDownload(song.id);\n      setSongDownloading(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  })), isSongDownloading ? /*#__PURE__*/React.createElement(DownloadLoader, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 30\n    }\n  }) : null), /*#__PURE__*/React.createElement(ExpandMore, {\n    onClick: minimizePlayer,\n    color: \"primary\",\n    fontSize: \"large\",\n    style: {\n      transform: \"translateY(-7px)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TopBar;","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/player/TopBar.js"],"names":["React","useState","useContext","useEffect","IconButton","Grid","Slider","LinearProgress","makeStyles","withStyles","ExpandMore","GetApp","Reply","DoneOutline","Done","AlarmOff","VolumeController","useSongMethods","downloadSong","SleepTimer","GlobalContext","DownloadLoader","root","height","width","margin","transform","TopBar","song","player","setPlayerState","history","snackbarMsg","isSongDownloaded","setSongDownloaded","isSongDownloading","setSongDownloading","handleDownload","handleRemoveSong","deleteDialogComponent","audio","shareSong","navigator","share","title","text","url","window","location","href","then","console","log","catch","error","minimizePlayer","padding","marginTop","position","top","id"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Grid,\r\n  Slider,\r\n  LinearProgress,\r\n  makeStyles,\r\n  withStyles\r\n} from \"@material-ui/core/\";\r\n\r\nimport {\r\n  ExpandMore,\r\n  GetApp,\r\n  Reply,\r\n  DoneOutline,\r\n  Done,\r\n  AlarmOff\r\n} from \"@material-ui/icons/\";\r\nimport VolumeController from \"./VolumeController\";\r\nimport { useSongMethods } from \"../RenderDatabase\";\r\nimport { downloadSong } from \"../../external/saveSong\";\r\nimport SleepTimer from './SleepTimer'\r\nimport { GlobalContext } from \"../GlobalState\";\r\n\r\nconst DownloadLoader = withStyles({\r\n  root: {\r\n    height: 2,\r\n    width: \"70%\",\r\n    margin: \"0 auto\",\r\n    transform: \"translateY(-10px)\"\r\n  }\r\n})(LinearProgress);\r\n\r\nconst TopBar = ({ song, player, setPlayerState, history }) => {\r\n  const { snackbarMsg } = useContext(GlobalContext);\r\n  const [isSongDownloaded, setSongDownloaded] = useState(false);\r\n  const [isSongDownloading, setSongDownloading] = useState(false);\r\n\r\n  const {\r\n    handleDownload,\r\n    handleRemoveSong,\r\n    deleteDialogComponent\r\n  } = useSongMethods();\r\n\r\n  useEffect(() => {\r\n    if (snackbarMsg === \"Song Downloaded\" || song.audio) {\r\n      setSongDownloaded(true);\r\n      setSongDownloading(false);\r\n    }\r\n  }, [snackbarMsg]);\r\n  // if the song is downloaded we will change\r\n\r\n  // share prompt using chrome web api\r\n  const shareSong = () => {\r\n    if (navigator.share) {\r\n      navigator\r\n        .share({\r\n          title: \"Share This Song\",\r\n          text: `Hey Listen to ${song.title} on nDs Music`,\r\n          url: window.location.href //get the current window url\r\n        })\r\n        .then(() => console.log(\"Successful share\"))\r\n        .catch(error => console.log(\"Error sharing\", error));\r\n    }\r\n  };\r\n\r\n  const minimizePlayer = () => {\r\n    setPlayerState(\"minimized\");\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"space-between\"\r\n      direction=\"row\"\r\n      style={{\r\n        padding: \" 0 10px\",\r\n        marginTop: \"10px\",\r\n        position: \"absolute\",\r\n        top: \"0\"\r\n      }}\r\n    >\r\n      <VolumeController player={player} />\r\n      {deleteDialogComponent}\r\n      <Reply\r\n        style={{ transform: \" scaleX(-1) translateY(-2px)\" }}\r\n        onClick={shareSong}\r\n        color=\"primary\"\r\n      />\r\n      \r\n      <SleepTimer player={player}/>\r\n\r\n      <div>\r\n        {isSongDownloaded ? (\r\n          <DoneOutline\r\n            color=\"primary\"\r\n            onClick={() => handleRemoveSong(song.id)}\r\n          /> //song will be removed\r\n        ) : (\r\n          <>\r\n            <GetApp\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                handleDownload(song.id);\r\n                setSongDownloading(true);\r\n              }}\r\n            />\r\n          </>\r\n        )}\r\n        {isSongDownloading ? <DownloadLoader color=\"primary\" /> : null}\r\n        {/* if the song is downloading we will show loading */}\r\n      </div>\r\n\r\n      <ExpandMore\r\n        onClick={minimizePlayer}\r\n        color=\"primary\"\r\n        fontSize=\"large\"\r\n        style={{ transform: \"translateY(-7px)\" }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TopBar;\r\n"]},"metadata":{},"sourceType":"module"}