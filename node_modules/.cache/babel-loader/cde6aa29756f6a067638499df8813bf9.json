{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\player\\\\TimelineController.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { withStyles, Typography, Grid, Slider } from \"@material-ui/core/\"; // import { PauseCircleFilled } from \"@material-ui/icons/\";\n\nconst PrettoSlider = withStyles({\n  root: {\n    height: 6,\n    color: \"rgb(27, 154, 238)\",\n    textAlign: \"center\"\n  },\n  thumb: {\n    color: \"rgb(27, 154, 238)\",\n    height: 16,\n    width: 16,\n    marginTop: -5.3,\n    marginLeft: -8,\n    \"&::before\": {\n      content: \"''\",\n      height: \"inherit\",\n      width: \"inherit\",\n      position: \"absolute\",\n      transform: \"scale(1.6)\",\n      borderRadius: \"50px\",\n      border: \"1px solid\"\n    }\n  },\n  track: {\n    height: 6,\n    borderRadius: 4\n  },\n  rail: {\n    height: 6,\n    borderRadius: 4\n  }\n})(Slider);\nconst MiniSlider = withStyles({\n  root: {\n    height: 5,\n    position: \"relative\",\n    bottom: \"16px\",\n    color: \"#ffff\",\n    padding: 0\n  },\n  thumb: {\n    display: \"none\"\n  },\n  track: {\n    height: 4,\n    borderRadius: 0\n  },\n  rail: {\n    height: 4,\n    borderRadius: 0\n  }\n})(Slider);\n\nconst formatTime = secs => {\n  let minutes = Math.floor(secs / 60);\n  let seconds = Math.ceil(secs - minutes * 60);\n  if (seconds < 10) seconds = `0${seconds}`;\n  return `${minutes}:${seconds}`;\n};\n\nconst TimelineController = ({\n  audioState,\n  player,\n  minimized\n}) => {\n  // const [value, setValue] = useState(50);\n  const [currentTime, setCurrentTime] = useState(0);\n  useEffect(() => {\n    if (player) {\n      setCurrentTime(player.currentTime);\n    } // we will update the time of player every 800ms\n\n\n    let setTimeInterval;\n\n    if (audioState === \"playing\") {\n      setTimeInterval = setInterval(() => {\n        setCurrentTime(player.currentTime);\n        console.log();\n      }, 800);\n    } else {\n      clearInterval(setTimeInterval);\n    }\n\n    return () => clearInterval(setTimeInterval);\n  }, [audioState, player]);\n\n  const handleChange = (event, newValue) => {\n    player.currentTime = newValue;\n    setCurrentTime(newValue);\n  };\n\n  const showDuration = () => {\n    if (player) {\n      if (player.duration) {\n        return formatTime(player.duration);\n      } else {\n        return \"0:00\";\n      }\n    } else {\n      return 0;\n    }\n  }; // condition rendering\n\n\n  if (minimized) {\n    return /*#__PURE__*/React.createElement(MiniSlider, {\n      value: currentTime,\n      max: player ? player.duration : 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: \"0 auto\",\n        width: \"90%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body1\",\n      className: \"timeright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, formatTime(currentTime)), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body1\",\n      className: \"timeright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, showDuration())), /*#__PURE__*/React.createElement(PrettoSlider, {\n      value: currentTime,\n      onChange: handleChange,\n      max: player ? player.duration : 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }));\n  }\n};\n\nexport default TimelineController;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/player/TimelineController.js"],"names":["React","useState","useEffect","withStyles","Typography","Grid","Slider","PrettoSlider","root","height","color","textAlign","thumb","width","marginTop","marginLeft","content","position","transform","borderRadius","border","track","rail","MiniSlider","bottom","padding","display","formatTime","secs","minutes","Math","floor","seconds","ceil","TimelineController","audioState","player","minimized","currentTime","setCurrentTime","setTimeInterval","setInterval","console","log","clearInterval","handleChange","event","newValue","showDuration","duration","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { withStyles, Typography, Grid, Slider } from \"@material-ui/core/\";\r\n// import { PauseCircleFilled } from \"@material-ui/icons/\";\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    height: 6,\r\n    color: \"rgb(27, 154, 238)\",\r\n    textAlign: \"center\",\r\n  },\r\n  thumb: {\r\n    color: \"rgb(27, 154, 238)\",\r\n    height: 16,\r\n    width: 16,\r\n    marginTop: -5.3,\r\n    marginLeft: -8,\r\n    \"&::before\": {\r\n      content: \"''\",\r\n      height: \"inherit\",\r\n      width: \"inherit\",\r\n      position: \"absolute\",\r\n      transform: \"scale(1.6)\",\r\n      borderRadius: \"50px\",\r\n      border: \"1px solid\"\r\n    }\r\n  },\r\n  track: {\r\n    height: 6,\r\n    borderRadius: 4\r\n  },\r\n  rail: {\r\n    height: 6,\r\n    borderRadius: 4\r\n  }\r\n})(Slider);\r\n\r\nconst MiniSlider = withStyles({\r\n  root: {\r\n    height: 5,\r\n    position: \"relative\",\r\n    bottom: \"16px\",\r\n    color: \"#ffff\",\r\n    padding: 0\r\n  },\r\n  thumb: {\r\n    display: \"none\"\r\n  },\r\n  track: {\r\n    height: 4,\r\n    borderRadius: 0\r\n  },\r\n  rail: {\r\n    height: 4,\r\n    borderRadius: 0\r\n  }\r\n})(Slider);\r\n\r\nconst formatTime = secs => {\r\n  let minutes = Math.floor(secs / 60);\r\n  let seconds = Math.ceil(secs - minutes * 60);\r\n\r\n  if (seconds < 10) seconds = `0${seconds}`;\r\n\r\n  return `${minutes}:${seconds}`;\r\n};\r\n\r\nconst TimelineController = ({ audioState, player, minimized }) => {\r\n  // const [value, setValue] = useState(50);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (player) {\r\n      setCurrentTime(player.currentTime);\r\n    }\r\n    // we will update the time of player every 800ms\r\n    let setTimeInterval;\r\n    if (audioState === \"playing\") {\r\n      setTimeInterval = setInterval(() => {\r\n        setCurrentTime(player.currentTime);\r\n        console.log()\r\n      }, 800);\r\n    } else {\r\n      clearInterval(setTimeInterval);\r\n    }\r\n    return () => clearInterval(setTimeInterval);\r\n  }, [audioState, player]);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    player.currentTime = newValue;\r\n    setCurrentTime(newValue);\r\n  };\r\n\r\n  const showDuration = () => {\r\n    if (player) {\r\n      if (player.duration) {\r\n        return formatTime(player.duration);\r\n      } else {\r\n        return \"0:00\";\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // condition rendering\r\n  if (minimized) {\r\n    return (\r\n      <MiniSlider value={currentTime} max={player ? player.duration : 0} />\r\n    );\r\n  } else {\r\n    return (\r\n      <div style={{ margin: \"0 auto\", width: \"90%\" }}>\r\n        <Grid container direction=\"row\" justify=\"space-between\">\r\n          <Typography variant=\"body1\" className=\"timeright\">\r\n            {formatTime(currentTime)}\r\n          </Typography>\r\n          <Typography variant=\"body1\" className=\"timeright\">\r\n            {showDuration()}\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <PrettoSlider\r\n          value={currentTime}\r\n          onChange={handleChange}\r\n          max={player ? player.duration : 0}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default TimelineController;\r\n"]},"metadata":{},"sourceType":"module"}