{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nimport Service from './service';\nimport Realtime from './realtime';\nimport moment from \"moment\";\nimport { ObjectID } from './helpers/objectid';\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.service = new Service();\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = this.getUserFromLocalStorage();\n    this.token = this.getTokenFromLocalStorage();\n    this.users = new OrderedMap();\n    this.realtime = new Realtime(this);\n    this.fetchUserChannels();\n    this.search = {\n      users: new OrderedMap()\n    };\n  }\n\n  upLoadfile(formData) {\n    const userToken = this.getUserTokenId();\n\n    if (userToken) {\n      this.service.post('api/messages/uploadfiles', formData).then(res => {\n        console.log(res.success);\n        console.log(res); //     if (res.data.success) {\n        //         const messageId = new ObjectID().toString();\n        //         const channel = this.getActiveChannel();\n        //         const channelId = _.get(channel , '_id', null);\n        //         const currentUser = this.getCurrentUser();\n        //         const message = {\n        //             _id: messageId,\n        //             channelId: channelId,\n        //             body : res.data.url,\n        //             userId: _.get(currentUser, '_id'),\n        //             type:\"VideoOrImage\",\n        //             me: true,\n        //     };\n        //     this.addMessage(messageId, message);\n        // }\n        // }).catch((err) => {\n        //     console.log(\"Send files Error: \", err);\n      });\n    }\n  }\n\n  fetchUserChannels() {\n    const userToken = this.getUserTokenId();\n\n    if (userToken) {\n      const options = {\n        headers: {\n          authorization: userToken\n        }\n      };\n      this.service.get(`api/me/channels`, options).then(res => {\n        const channels = res.data;\n\n        _.each(channels, c => {\n          this.realtime.onAddChannel(c);\n        });\n\n        const firstChannelId = _.get(channels, '[0]._id', null);\n\n        this.fetchChannelMessages(firstChannelId);\n      }).catch(err => {\n        console.log(\"An error fetch user channlels\", err);\n      });\n    }\n  }\n\n  addUserToCache(user) {\n    user.avatar = this.loadUserAvatar(user);\n\n    const id = _.toString(user._id);\n\n    this.users = this.users.set(id, user);\n    return user;\n  }\n\n  getUserTokenId() {\n    return _.get(this.token, '_id', null);\n  }\n\n  loadUserAvatar(user) {\n    return `https://api.adorable.io/avatars/100/${user._id}.png`;\n  }\n\n  startSearchUsers(q = \"\") {\n    this.search.users = this.search.users.clear(); //query to backend server and get list of users\n\n    const data = {\n      search: q\n    };\n    this.service.post('api/users/search', data).then(res => {\n      //list off users match\n      const users = _.get(res, 'data', []); // console.log(\"Get from server: \", users);\n\n\n      _.each(users, user => {\n        //cache to this.users\n        //add user to this.search.users\n        user.avatar = this.loadUserAvatar(user);\n        const userId = `${user._id}`;\n        this.users = this.users.set(userId, user);\n        this.search.users = this.search.users.set(userId, user);\n      });\n\n      this.update();\n    }).catch(err => {\n      console.log(\" searching error\", err);\n    });\n  }\n\n  setUserToken(accessToken) {\n    if (!accessToken) {\n      this.localStorage.removeItem('token');\n      this.token = null;\n      return;\n    }\n\n    this.token = accessToken;\n    localStorage.setItem('token', JSON.stringify(accessToken));\n  }\n\n  clearCacheData() {\n    this.channels = this.channels.clear();\n    this.users = this.users.clear();\n    this.messages = this.messages.clear();\n  }\n\n  signOut() {\n    const userId = _.toString(_.get(this.user, '_id', null)); //request server and logout this user\n\n\n    const tokenId = _.get(this.token, '_id', null);\n\n    const options = {\n      headers: {\n        authorization: tokenId\n      }\n    };\n    this.service.get('api/user/logout', options);\n    this.isConnected();\n    this.user = null;\n    localStorage.removeItem('me');\n    localStorage.removeItem('token');\n\n    if (userId) {\n      this.users = this.users.remove(userId);\n    }\n\n    this.clearCacheData();\n    this.update();\n  }\n\n  getTokenFromLocalStorage() {\n    if (this.token) {\n      return this.token;\n    }\n\n    let token = null;\n    const data = localStorage.getItem('token');\n\n    if (data) {\n      try {\n        token = JSON.parse(data);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    return token;\n  }\n\n  getUserFromLocalStorage() {\n    let user = null;\n    const data = localStorage.getItem('me');\n\n    try {\n      user = JSON.parse(data);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (user) {\n      //connect to backend server verify this user\n      const token = this.getTokenFromLocalStorage();\n\n      const tokenId = _.get(token, '_id');\n\n      const options = {\n        headers: {\n          authorization: tokenId\n        }\n      };\n      this.service.get('api/users/me', options).then(res => {\n        //user login with token id\n        const accessToken = res.data;\n\n        const user = _.get(accessToken, 'user');\n\n        this.setCurrentUser(user);\n        this.setUserToken(accessToken);\n      }).catch(err => {\n        this.signOut();\n      });\n    }\n\n    return user;\n  }\n\n  setCurrentUser(user) {\n    user.avatar = this.loadUserAvatar(user);\n    this.user = user;\n\n    if (user) {\n      localStorage.setItem('me', JSON.stringify(user)); //save to local store\n\n      const userId = `${user._id}`;\n      this.users = this.users.set(userId, user);\n    }\n\n    this.update();\n  }\n\n  register(user) {\n    return new Promise((resolve, reject) => {\n      this.service.post('api/users', user).then(user => {\n        console.log(\"Account Created \", user);\n        return resolve(user);\n      }).catch(err => {\n        return reject(\"An Error create your account!\");\n      });\n    });\n  }\n\n  login(email = null, password = null) {\n    const userEmail = _.toLower(email);\n\n    const user = {\n      email: userEmail,\n      password: password\n    };\n    console.log(\"Logining with: \", user);\n    return new Promise((resolve, reject) => {\n      this.service.post('api/users/login', user).then(res => {\n        //that mean successful login\n        const accessToken = _.get(res, 'data');\n\n        const user = _.get(accessToken, 'user');\n\n        this.setCurrentUser(user);\n        this.setUserToken(accessToken);\n        this.realtime.connect(); // begin fetch user's channel\n\n        this.fetchUserChannels(); //Call to realtime and connect again to socket server with this user\n      }).catch(err => {\n        const message = _.get(err, 'res.data.err.message', 'Login Error');\n\n        return reject(message);\n      });\n    }); // const _this = this;\n    // return new Promise((resolve, reject) => {\n    //     const user = users.find((user) => user.email === userEmail);\n    //     if( user ) {\n    //         _this.setCurrentUser(user);\n    //     }\n    //     return user ? resolve(user) : reject(\"User not found!\")\n    // });\n  }\n\n  addUserToChannel(channelId, userId) {\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      channel.members = channel.members.set(userId, true);\n      this.channels = this.channels.set(channelId, channel);\n      this.update();\n    }\n  }\n\n  getSearchUsers() {\n    // const keyword = _.toLower(search);\n    // let searchItems = new OrderedMap();\n    // const currentUser =this.getCurrentUser();\n    // const currentUserId = _.get(currentUser, '_id');\n    // if(_.trim(search).length){\n    //    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n    // }\n    return this.search.users.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, \"_id\");\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId);\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  fetchChannelMessages(channelId) {\n    let channel = this.channels.get(channelId);\n\n    if (channel && !_.get(channel, 'isFetchMessages')) {\n      const token = _.get(this.token, '_id');\n\n      const options = {\n        headers: {\n          authorization: token\n        }\n      };\n      this.service.get(`api/channels/${channelId}/messages`, options).then(res => {\n        channel.isFetchMessages = true;\n        const messages = res.data;\n\n        _.each(messages, message => {\n          this.realtime.onAddMessage(message);\n        });\n\n        this.channels = this.channels.set(channelId, channel);\n      }).catch(err => {\n        console.log(\"An error fetching channel 's messages\", err);\n      });\n    }\n  }\n\n  isConnected() {\n    return this.realtime.isConnected;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.fetchChannelMessages(id);\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  setMessage(message, notify = false) {\n    const id = _.toString(_.get(message, '_id'));\n\n    this.messages = this.messages.set(id, message);\n\n    const channelId = _.toString(message.channelId);\n\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      channel.messages = channel.messages.set(id, true);\n      channel.lastMessage = _.get(message, 'body', '');\n      channel.notify = notify;\n      this.channels = this.channels.set(channelId, channel);\n    } else {\n      // fetch to the server with channel info\n      this.service.get(`api/channels/${channelId}`).then(response => {\n        const channel = _.get(response, 'data');\n        /*const users = _.get(channel, 'users');\r\n        _.each(users, (user) => {\r\n              this.addUserToCache(user);\r\n        });*/\n\n\n        this.realtime.onAddChannel(channel);\n      });\n    }\n\n    this.update();\n  }\n\n  addTyping(channel, typing = false) {\n    if (channel) {\n      const userId = `${_.get(this.user, '_id', null)}`;\n\n      const channelId = _.get(channel, '_id');\n\n      const obj = {\n        channelId: channelId,\n        payload: typing,\n        typier: userId\n      };\n      console.log(\"channel typing: \", channelId);\n      this.realtime.send({\n        action: 'typing_status',\n        payload: {\n          obj\n        }\n      });\n    }\n\n    this.update();\n  }\n\n  addMessage(id, message = {}) {\n    const user = this.getCurrentUser();\n    message.user = user;\n    this.messages = this.messages.set(id, message); //add new message to \n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      let channel = this.channels.get(channelId);\n      channel.lastMessage = _.get(message, 'body', ''); //now i send this channel to the server\n\n      this.realtime.send({\n        action: 'create_channel',\n        payload: channel\n      }); // send to the via websocket to create new message and notify other\n\n      this.realtime.send({\n        action: 'create_message',\n        payload: message\n      });\n      channel.messages = channel.messages.set(id, true);\n      channel.isNew = false;\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  removeMemberFromChannel(channel = null, user = null) {\n    if (!channel || !user) {\n      return;\n    }\n\n    const channelId = _.get(channel, '_id');\n\n    const userId = _.get(user, '_id');\n\n    channel.members = channel.members.remove(userId);\n    this.channels = this.channels.set(channelId, channel);\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = new OrderedMap();\n\n    if (channel) {\n      channel.messages.forEach((value, key) => {\n        const message = this.messages.get(key);\n        messages = messages.set(key, message);\n      });\n    }\n\n    return messages.valueSeq();\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.forEach((value, key) => {\n        const userId = `${key}`;\n        const user = this.users.get(userId); // console.log(\"User from Channel: \", user);\n\n        const loggedUser = this.getCurrentUser();\n\n        if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n          members = members.set(key, user);\n        }\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel); // console.log(channel);\n    // console.log(\"Mess get from server to client: \", channel);\n\n    this.update();\n  }\n\n  getChannels() {\n    this.channels = this.channels.sort((a, b) => a.updated - b.updated);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/store.js"],"names":["OrderedMap","_","Service","Realtime","moment","ObjectID","Store","constructor","appComponent","app","service","messages","channels","activeChannelId","user","getUserFromLocalStorage","token","getTokenFromLocalStorage","users","realtime","fetchUserChannels","search","upLoadfile","formData","userToken","getUserTokenId","post","then","res","console","log","success","options","headers","authorization","get","data","each","c","onAddChannel","firstChannelId","fetchChannelMessages","catch","err","addUserToCache","avatar","loadUserAvatar","id","toString","_id","set","startSearchUsers","q","clear","userId","update","setUserToken","accessToken","localStorage","removeItem","setItem","JSON","stringify","clearCacheData","signOut","tokenId","isConnected","remove","getItem","parse","setCurrentUser","register","Promise","resolve","reject","login","email","password","userEmail","toLower","connect","message","addUserToChannel","channelId","channel","members","getSearchUsers","valueSeq","onCreateNewChannel","addChannel","setActiveChannelId","getCurrentUser","isFetchMessages","onAddMessage","getActiveChannel","first","setMessage","notify","lastMessage","response","addTyping","typing","obj","payload","typier","send","action","addMessage","isNew","removeMemberFromChannel","getMessages","getMessagesFromChannel","forEach","value","key","getMembersFromChannel","loggedUser","index","getChannels","sort","a","b","updated","forceUpdate"],"mappings":"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","sourcesContent":["import { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\nimport Service from './service';\r\nimport Realtime from './realtime';\r\nimport moment from \"moment\";\r\nimport {ObjectID} from './helpers/objectid';\r\n\r\n\r\nexport default class Store {\r\n    constructor(appComponent){\r\n        this.app = appComponent;\r\n        this.service = new Service();\r\n        this.messages = new OrderedMap();\r\n        this.channels = new OrderedMap();\r\n        this.activeChannelId = null;\r\n\r\n        this.user = this.getUserFromLocalStorage();\r\n        this.token = this.getTokenFromLocalStorage();\r\n        this.users = new OrderedMap();\r\n\r\n        this.realtime = new Realtime(this);\r\n        this.fetchUserChannels();\r\n        this.search = {\r\n            users: new OrderedMap(),\r\n        }\r\n\r\n    }\r\n\r\n    upLoadfile(formData){\r\n        const userToken = this.getUserTokenId();\r\n\r\n        if(userToken){\r\n\r\n            this.service.post('api/messages/uploadfiles', formData).then((res) => {\r\n\r\n                console.log(res.success);\r\n                console.log(res);\r\n            //     if (res.data.success) {\r\n            //         const messageId = new ObjectID().toString();\r\n            //         const channel = this.getActiveChannel();\r\n            //         const channelId = _.get(channel , '_id', null);\r\n            //         const currentUser = this.getCurrentUser();\r\n            //         const message = {\r\n            //             _id: messageId,\r\n            //             channelId: channelId,\r\n            //             body : res.data.url,\r\n            //             userId: _.get(currentUser, '_id'),\r\n            //             type:\"VideoOrImage\",\r\n            //             me: true,\r\n            //     };\r\n            //     this.addMessage(messageId, message);\r\n\r\n            // }\r\n            // }).catch((err) => {\r\n            //     console.log(\"Send files Error: \", err);\r\n            });\r\n        }\r\n    \r\n       \r\n    }\r\n    fetchUserChannels(){\r\n        const userToken =this.getUserTokenId();\r\n        if(userToken){\r\n            const options = {\r\n                headers: {\r\n                    authorization: userToken,\r\n                }\r\n            }\r\n            this.service.get(`api/me/channels`, options).then((res) => {\r\n                const channels = res.data;\r\n                _.each(channels, (c) => {\r\n                    this.realtime.onAddChannel(c);\r\n                });\r\n\r\n                const firstChannelId = _.get(channels, '[0]._id', null);\r\n                this.fetchChannelMessages(firstChannelId);\r\n            }).catch((err) => {\r\n\r\n                console.log(\"An error fetch user channlels\", err);\r\n            })\r\n        }\r\n    }\r\n    addUserToCache(user){\r\n        user.avatar = this.loadUserAvatar(user);\r\n        const id = _.toString(user._id);\r\n        this.users = this.users.set(id, user);\r\n        return user;\r\n    }\r\n\r\n    getUserTokenId(){\r\n        return _.get(this.token, '_id', null);\r\n    }\r\n    loadUserAvatar(user){\r\n\r\n            return `https://api.adorable.io/avatars/100/${user._id}.png`\r\n       \r\n    }\r\n    startSearchUsers(q = \"\"){\r\n        this.search.users = this.search.users.clear();\r\n        //query to backend server and get list of users\r\n        const data = {search : q};\r\n        \r\n        this.service.post('api/users/search', data).then((res) => {\r\n            //list off users match\r\n            const users = _.get(res, 'data', []);\r\n            // console.log(\"Get from server: \", users);\r\n            _.each(users, (user) => {\r\n               //cache to this.users\r\n               //add user to this.search.users\r\n               user.avatar = this.loadUserAvatar(user);\r\n               const userId = `${user._id}`;\r\n               this.users = this.users.set(userId, user);\r\n               this.search.users = this.search.users.set(userId, user);\r\n\r\n           });\r\n           this.update();\r\n\r\n        }).catch((err) => {\r\n            console.log(\" searching error\", err);\r\n        }); \r\n    }\r\n\r\n\r\n    setUserToken(accessToken){\r\n        if(!accessToken){\r\n            this.localStorage.removeItem('token');\r\n            this.token = null;\r\n            return;\r\n        }\r\n        this.token = accessToken;\r\n        localStorage.setItem('token', JSON.stringify(accessToken));\r\n    }\r\n    clearCacheData(){\r\n        this.channels = this.channels.clear();\r\n        this.users = this.users.clear();\r\n        this.messages = this.messages.clear();\r\n    }\r\n    signOut(){\r\n\r\n        const userId = _.toString(_.get(this.user, '_id', null));\r\n        //request server and logout this user\r\n        const tokenId = _.get(this.token, '_id', null);\r\n\r\n        const options = {\r\n            headers : {\r\n                authorization: tokenId\r\n            }\r\n        }\r\n        this.service.get('api/user/logout', options);\r\n        this.isConnected();\r\n        this.user = null;\r\n        localStorage.removeItem('me');\r\n        localStorage.removeItem('token');\r\n        if(userId){\r\n            this.users = this.users.remove(userId);\r\n        }\r\n        this.clearCacheData();\r\n        this.update();\r\n    }\r\n\r\n    getTokenFromLocalStorage(){\r\n\r\n        if(this.token){\r\n            return this.token;\r\n        }\r\n\r\n        let token = null;\r\n        const data = localStorage.getItem('token');\r\n        if(data){\r\n            try{\r\n                token = JSON.parse(data);\r\n            }\r\n            catch (err){\r\n                console.log(err);\r\n            }\r\n            \r\n        }\r\n        return token;\r\n    }\r\n\r\n    getUserFromLocalStorage(){\r\n\r\n        let user = null;\r\n        const data = localStorage.getItem('me');\r\n         try {\r\n                user = JSON.parse(data);\r\n         }\r\n         catch(err) {\r\n             console.log(err);\r\n         }\r\n         if(user){\r\n            //connect to backend server verify this user\r\n            const token = this.getTokenFromLocalStorage();\r\n            const tokenId = _.get(token, '_id');\r\n            const options = {\r\n                headers: {\r\n                    authorization: tokenId,\r\n                }\r\n            }\r\n            \r\n            this.service.get('api/users/me', options).then((res) => {\r\n                //user login with token id\r\n                const accessToken = res.data;\r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n\r\n            }).catch(err => {\r\n                this.signOut();\r\n            });\r\n        }\r\n\r\n         return user;\r\n    }    \r\n        \r\n    \r\n    setCurrentUser(user){\r\n        user.avatar = this.loadUserAvatar(user);\r\n        this.user = user;\r\n        if(user){\r\n            \r\n            localStorage.setItem('me', JSON.stringify(user));\r\n            //save to local store\r\n            const userId =`${user._id}`;\r\n            this.users = this.users.set(userId, user);\r\n\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    register(user){\r\n        return new Promise((resolve, reject) => {\r\n            this.service.post('api/users', user).then((user) =>{\r\n                console.log(\"Account Created \", user);\r\n                return resolve(user);\r\n            }).catch((err) => {\r\n\r\n                return reject(\"An Error create your account!\");\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    login(email = null, password = null){\r\n\r\n        const userEmail = _.toLower(email);\r\n        const user = {\r\n            email: userEmail,\r\n            password: password,\r\n        }\r\n        console.log(\"Logining with: \", user);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this.service.post('api/users/login', user).then((res) => {\r\n                //that mean successful login\r\n                const accessToken = _.get(res, 'data'); \r\n                const user = _.get(accessToken, 'user');\r\n\r\n                this.setCurrentUser(user);\r\n                this.setUserToken(accessToken);\r\n                this.realtime.connect();\r\n\r\n                // begin fetch user's channel\r\n                this.fetchUserChannels();\r\n                //Call to realtime and connect again to socket server with this user\r\n                \r\n\r\n\r\n\r\n\r\n            }).catch((err) => {\r\n                \r\n                const message = _.get(err, 'res.data.err.message', 'Login Error');\r\n                return reject(message);\r\n            })\r\n        });\r\n        // const _this = this;\r\n        // return new Promise((resolve, reject) => {\r\n        //     const user = users.find((user) => user.email === userEmail);\r\n        //     if( user ) {\r\n        //         _this.setCurrentUser(user);\r\n        //     }\r\n        //     return user ? resolve(user) : reject(\"User not found!\")\r\n        // });\r\n    }\r\n\r\n    addUserToChannel(channelId, userId) {\r\n        const channel = this.channels.get(channelId);\r\n        if(channel) {\r\n            channel.members = channel.members.set(userId, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n            this.update();\r\n        }\r\n      \r\n    }\r\n    getSearchUsers(){\r\n        // const keyword = _.toLower(search);\r\n\r\n        // let searchItems = new OrderedMap();\r\n        // const currentUser =this.getCurrentUser();\r\n        // const currentUserId = _.get(currentUser, '_id');\r\n       \r\n        // if(_.trim(search).length){\r\n        //    searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\r\n        // }\r\n\r\n        return this.search.users.valueSeq();\r\n    }\r\n\r\n    onCreateNewChannel(channel = {}){\r\n        const channelId = _.get(channel, \"_id\");\r\n        this.addChannel(channelId, channel );\r\n        this.setActiveChannelId(channelId);\r\n    \r\n    }\r\n\r\n    getCurrentUser(){\r\n        return this.user;\r\n    }\r\n\r\n    fetchChannelMessages(channelId){\r\n\r\n        let channel = this.channels.get(channelId);\r\n            if( channel && !_.get(channel, 'isFetchMessages')){\r\n\r\n                const token = _.get(this.token, '_id');\r\n                const options = {\r\n                    headers: {\r\n                        authorization: token,\r\n                    }\r\n                }\r\n\r\n                this.service.get(`api/channels/${channelId}/messages`, options).then((res) => {\r\n                    channel.isFetchMessages = true;\r\n\r\n                    const messages = res.data;\r\n                \r\n                    _.each(messages, (message) => {\r\n                        this.realtime.onAddMessage(message);\r\n                    });\r\n                    this.channels = this.channels.set(channelId, channel);\r\n\r\n                }).catch((err) => {\r\n                    console.log(\"An error fetching channel 's messages\", err);\r\n\r\n                }\r\n            )}\r\n        }   \r\n    \r\n\r\n    isConnected(){\r\n        return this.realtime.isConnected;\r\n    }\r\n\r\n    setActiveChannelId(id) {\r\n        this.activeChannelId = id;\r\n        this.fetchChannelMessages(id);\r\n        this.update();\r\n    }\r\n    getActiveChannel(){\r\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\r\n        return channel;\r\n    }\r\n\r\n    setMessage(message, notify = false){\r\n        const id = _.toString(_.get(message, '_id'));\r\n        this.messages = this.messages.set(id, message);\r\n        const channelId = _.toString(message.channelId);\r\n        const channel = this.channels.get(channelId);\r\n\r\n        if (channel) {\r\n            channel.messages = channel.messages.set(id, true);\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            channel.notify = notify;\r\n\r\n            this.channels = this.channels.set(channelId, channel);\r\n        } else {\r\n\r\n            // fetch to the server with channel info\r\n            this.service.get(`api/channels/${channelId}`).then((response) => {\r\n\r\n\r\n                const channel = _.get(response, 'data');\r\n\r\n                /*const users = _.get(channel, 'users');\r\n                _.each(users, (user) => {\r\n\r\n                    this.addUserToCache(user);\r\n                });*/\r\n\r\n                this.realtime.onAddChannel(channel);\r\n\r\n\r\n            })\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    addTyping(channel, typing = false){\r\n        \r\n        if(channel){\r\n            const userId = `${_.get(this.user, '_id', null)}`;\r\n            const channelId = _.get(channel, '_id');\r\n            const obj = {\r\n                channelId: channelId,\r\n                payload: typing,\r\n                typier: userId,\r\n            }\r\n            console.log(\"channel typing: \", channelId);\r\n            this.realtime.send(\r\n                {\r\n                    action: 'typing_status',\r\n                    payload: {obj},\r\n                }\r\n            );\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    addMessage(id, message = {}){\r\n\r\n        const user = this.getCurrentUser();\r\n        message.user = user;\r\n        this.messages = this.messages.set(id, message);\r\n        //add new message to \r\n        const channelId = _.get(message, 'channelId');\r\n        if(channelId){\r\n\r\n            \r\n            let channel = this.channels.get(channelId);\r\n\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            //now i send this channel to the server\r\n            \r\n           this.realtime.send(\r\n               {\r\n                    action: 'create_channel',\r\n                    payload: channel,\r\n                }\r\n            );\r\n            // send to the via websocket to create new message and notify other\r\n            this.realtime.send(\r\n                {\r\n                    action: 'create_message',\r\n                    payload: message,\r\n                }\r\n            );\r\n\r\n            channel.messages = channel.messages.set(id, true);\r\n\r\n\r\n            channel.isNew = false;\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeMemberFromChannel( channel = null, user = null){\r\n        if(!channel || !user ){\r\n            return;\r\n        }\r\n        const channelId = _.get(channel, '_id')\r\n        const userId = _.get(user, '_id');\r\n        channel.members = channel.members.remove(userId);\r\n        this.channels = this.channels.set(channelId, channel);\r\n        this.update();\r\n    }\r\n\r\n    getMessages(){\r\n        return this.messages.valueSeq();\r\n    }\r\n    getMessagesFromChannel(channel){\r\n        let messages = new OrderedMap();\r\n\r\n        if(channel){\r\n            channel.messages.forEach((value, key) => {\r\n\r\n                const message = this.messages.get(key);\r\n                messages = messages.set( key, message);\r\n    \r\n            });\r\n        }\r\n        return messages.valueSeq();\r\n        \r\n    }\r\n\r\n    getMembersFromChannel(channel){\r\n        let members = new OrderedMap();\r\n        if(channel){\r\n            channel.members.forEach((value, key) => {\r\n\r\n                const userId = `${key}`\r\n                const user = this.users.get(userId);\r\n                // console.log(\"User from Channel: \", user);\r\n                const loggedUser = this.getCurrentUser();\r\n                if( _.get(loggedUser, '_id') !== _.get(user, '_id')){\r\n                    members = members.set(key, user);\r\n                   \r\n                }\r\n            });\r\n               \r\n        }\r\n        return members.valueSeq();\r\n    }\r\n\r\n\r\n    addChannel(index, channel = {}){\r\n        this.channels = this.channels.set(`${index}`, channel);\r\n        // console.log(channel);\r\n        // console.log(\"Mess get from server to client: \", channel);\r\n        this.update();\r\n    }\r\n\r\n    getChannels(){\r\n        this.channels = this.channels.sort((a, b) => a.updated - b.updated);\r\n        return this.channels.valueSeq();\r\n    }\r\n    update(){\r\n        this.app.forceUpdate();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}