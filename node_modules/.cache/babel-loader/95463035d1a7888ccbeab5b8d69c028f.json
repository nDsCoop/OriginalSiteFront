{"ast":null,"code":"/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\n\nvar warning = require('fbjs/lib/warning');\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\nvar styleWarnings = {};\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @param {ReactDOMComponent} component\n * @return {string} Normalized style value with dimensions applied.\n */\n\nfunction dangerousStyleValue(name, value, component) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      // Allow '0' to pass through without warning. 0 is already special and\n      // doesn't require units, so we don't need to warn about it.\n      if (component && value !== '0') {\n        var owner = component._currentElement._owner;\n        var ownerName = owner ? owner.getName() : null;\n\n        if (ownerName && !styleWarnings[ownerName]) {\n          styleWarnings[ownerName] = {};\n        }\n\n        var warned = false;\n\n        if (ownerName) {\n          var warnings = styleWarnings[ownerName];\n          warned = warnings[name];\n\n          if (!warned) {\n            warnings[name] = true;\n          }\n        }\n\n        if (!warned) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;\n        }\n      }\n    }\n\n    value = value.trim();\n  }\n\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/node_modules/react-dom/lib/dangerousStyleValue.js"],"names":["CSSProperty","require","warning","isUnitlessNumber","styleWarnings","dangerousStyleValue","name","value","component","isEmpty","isNonNumeric","isNaN","hasOwnProperty","process","env","NODE_ENV","owner","_currentElement","_owner","ownerName","getName","warned","warnings","type","trim","module","exports"],"mappings":"AAAA;;;;;;;;;AAUA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAIE,gBAAgB,GAAGH,WAAW,CAACG,gBAAnC;AACA,IAAIC,aAAa,GAAG,EAApB;AAEA;;;;;;;;;;;AAUA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,SAA1C,EAAqD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAIC,OAAO,GAAGF,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAlC,IAA+CA,KAAK,KAAK,EAAvE;;AACA,MAAIE,OAAJ,EAAa;AACX,WAAO,EAAP;AACD;;AAED,MAAIC,YAAY,GAAGC,KAAK,CAACJ,KAAD,CAAxB;;AACA,MAAIG,YAAY,IAAIH,KAAK,KAAK,CAA1B,IAA+BJ,gBAAgB,CAACS,cAAjB,CAAgCN,IAAhC,KAAyCH,gBAAgB,CAACG,IAAD,CAA5F,EAAoG;AAClG,WAAO,KAAKC,KAAZ,CADkG,CAC/E;AACpB;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA;AACA,UAAIP,SAAS,IAAID,KAAK,KAAK,GAA3B,EAAgC;AAC9B,YAAIS,KAAK,GAAGR,SAAS,CAACS,eAAV,CAA0BC,MAAtC;AACA,YAAIC,SAAS,GAAGH,KAAK,GAAGA,KAAK,CAACI,OAAN,EAAH,GAAqB,IAA1C;;AACA,YAAID,SAAS,IAAI,CAACf,aAAa,CAACe,SAAD,CAA/B,EAA4C;AAC1Cf,UAAAA,aAAa,CAACe,SAAD,CAAb,GAA2B,EAA3B;AACD;;AACD,YAAIE,MAAM,GAAG,KAAb;;AACA,YAAIF,SAAJ,EAAe;AACb,cAAIG,QAAQ,GAAGlB,aAAa,CAACe,SAAD,CAA5B;AACAE,UAAAA,MAAM,GAAGC,QAAQ,CAAChB,IAAD,CAAjB;;AACA,cAAI,CAACe,MAAL,EAAa;AACXC,YAAAA,QAAQ,CAAChB,IAAD,CAAR,GAAiB,IAAjB;AACD;AACF;;AACD,YAAI,CAACe,MAAL,EAAa;AACXR,UAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,OAAO,CAAC,KAAD,EAAQ,gEAAgE,4DAAhE,GAA+H,oDAAvI,EAA6LM,SAAS,CAACS,eAAV,CAA0BM,IAAvN,EAA6NJ,SAAS,IAAI,SAA1O,EAAqPb,IAArP,EAA2PC,KAA3P,CAA/C,GAAmT,KAAK,CAAxT;AACD;AACF;AACF;;AACDA,IAAAA,KAAK,GAAGA,KAAK,CAACiB,IAAN,EAAR;AACD;;AACD,SAAOjB,KAAK,GAAG,IAAf;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiBrB,mBAAjB","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\nvar warning = require('fbjs/lib/warning');\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\nvar styleWarnings = {};\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @param {ReactDOMComponent} component\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value, component) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      // Allow '0' to pass through without warning. 0 is already special and\n      // doesn't require units, so we don't need to warn about it.\n      if (component && value !== '0') {\n        var owner = component._currentElement._owner;\n        var ownerName = owner ? owner.getName() : null;\n        if (ownerName && !styleWarnings[ownerName]) {\n          styleWarnings[ownerName] = {};\n        }\n        var warned = false;\n        if (ownerName) {\n          var warnings = styleWarnings[ownerName];\n          warned = warnings[name];\n          if (!warned) {\n            warnings[name] = true;\n          }\n        }\n        if (!warned) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;\n        }\n      }\n    }\n    value = value.trim();\n  }\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;"]},"metadata":{},"sourceType":"script"}