{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\library\\\\AudioAnalyser.js\";\nimport React, { Component } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\n\nclass AudioAnalyser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      audioData: new Uint8Array(0)\n    };\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    this.analyser = this.audioContext.createAnalyser();\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n    this.source.connect(this.analyser);\n    this.source.connect(this.analyser);\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  tick() {\n    this.analyser.getByteTimeDomainData(this.dataArray);\n    this.setState({\n      audioData: this.dataArray\n    });\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rafId);\n    this.analyser.disconnect();\n    this.source.disconnect();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AudioVisualiser, {\n      audioData: this.state.audioData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default AudioAnalyser;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/library/AudioAnalyser.js"],"names":["React","Component","AudioVisualiser","AudioAnalyser","constructor","props","state","audioData","Uint8Array","tick","bind","componentDidMount","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","frequencyBinCount","source","createMediaStreamSource","audio","connect","rafId","requestAnimationFrame","getByteTimeDomainData","setState","componentWillUnmount","cancelAnimationFrame","disconnect","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AACpCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,SAAS,EAAE,IAAIC,UAAJ,CAAe,CAAf;AAAb,KAAb;AACA,SAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAZ;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,YAAL,GAAoB,KAAKC,MAAM,CAACC,YAAP,IACvBD,MAAM,CAACE,kBADW,GAApB;AAEA,SAAKC,QAAL,GAAgB,KAAKJ,YAAL,CAAkBK,cAAlB,EAAhB;AACA,SAAKC,SAAL,GAAiB,IAAIV,UAAJ,CAAe,KAAKQ,QAAL,CAAcG,iBAA7B,CAAjB;AACA,SAAKC,MAAL,GAAc,KAAKR,YAAL,CAAkBS,uBAAlB,CAA0C,KAAKhB,KAAL,CAAWiB,KAArD,CAAd;AACA,SAAKF,MAAL,CAAYG,OAAZ,CAAoB,KAAKP,QAAzB;AACA,SAAKI,MAAL,CAAYG,OAAZ,CAAoB,KAAKP,QAAzB;AACA,SAAKQ,KAAL,GAAaC,qBAAqB,CAAC,KAAKhB,IAAN,CAAlC;AACD;;AACDA,EAAAA,IAAI,GAAG;AACL,SAAKO,QAAL,CAAcU,qBAAd,CAAoC,KAAKR,SAAzC;AACA,SAAKS,QAAL,CAAc;AAAEpB,MAAAA,SAAS,EAAE,KAAKW;AAAlB,KAAd;AACA,SAAKM,KAAL,GAAaC,qBAAqB,CAAC,KAAKhB,IAAN,CAAlC;AACD;;AACDmB,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,oBAAoB,CAAC,KAAKL,KAAN,CAApB;AACA,SAAKR,QAAL,CAAcc,UAAd;AACA,SAAKV,MAAL,CAAYU,UAAZ;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,wBAAO,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKzB,KAAL,CAAWC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA5BmC;;AA+BtC,eAAeJ,aAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport AudioVisualiser from './AudioVisualiser';\r\n\r\nclass AudioAnalyser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { audioData: new Uint8Array(0) };\r\n    this.tick = this.tick.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.audioContext = new (window.AudioContext ||\r\n      window.webkitAudioContext)();\r\n    this.analyser = this.audioContext.createAnalyser();\r\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n    this.source = this.audioContext.createMediaStreamSource(this.props.audio);\r\n    this.source.connect(this.analyser);\r\n    this.source.connect(this.analyser);\r\n    this.rafId = requestAnimationFrame(this.tick);\r\n  }\r\n  tick() {\r\n    this.analyser.getByteTimeDomainData(this.dataArray);\r\n    this.setState({ audioData: this.dataArray });\r\n    this.rafId = requestAnimationFrame(this.tick);\r\n  }\r\n  componentWillUnmount() {\r\n    cancelAnimationFrame(this.rafId);\r\n    this.analyser.disconnect();\r\n    this.source.disconnect();\r\n  }\r\n  render() {\r\n    return <AudioVisualiser audioData={this.state.audioData} />;\r\n  }\r\n}\r\n\r\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}