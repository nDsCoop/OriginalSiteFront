{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nconst users = OrderedMap({\n  '1': {\n    _id: '1',\n    name: \"nDs\",\n    created: new Date(),\n    avatar: \"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"\n  },\n  '2': {\n    _id: '2',\n    name: \"nDs0\",\n    created: new Date(),\n    avatar: \"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"\n  },\n  '3': {\n    _id: '3',\n    name: \"nDs1\",\n    created: new Date(),\n    avatar: \"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"\n  }\n});\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = {};\n  }\n\n  addUserToChannel(channelId, userId) {\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      channel.members = channel.members.set(userId, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  searchUsers(search = \"\") {\n    const keyword = _.toLower(search);\n\n    let searchItems = new OrderedMap();\n    const currentUser = this.getCurrentUser();\n\n    const currentUserId = _.get(currentUser, '_id');\n\n    if (_.trim(search).length) {\n      searchItems = users.filter(user => _.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n    }\n\n    return searchItems.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, \"_id\");\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId);\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    const user = this.getCurrentUser();\n    message.user = user;\n    this.messages = this.messages.set(`${id}`, message); //add new message to \n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      let channel = this.channels.get(channelId);\n      channel.isNew = false;\n      channel.lastMessage = _.get(message, 'body', '');\n      channel.messages = channel.messages.set(id, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  removeMemberFromChannel(channel = null, user = null) {\n    if (!channel || !user) {\n      return;\n    }\n\n    const channelId = _.get(channel, '_id');\n\n    const userId = _.get(user, '_id');\n\n    channel.members = channel.members.remove(userId);\n    this.channels = this.channels.set(channelId, channel);\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = [];\n\n    if (channel) {\n      channel.messages.map((value, key) => {\n        const message = this.messages.get(key);\n        messages.push(message);\n      });\n    }\n\n    return messages;\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.map((value, key) => {\n        const user = users.get(key);\n        const loggedUser = this.getCurrentUser();\n\n        if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n          members = members.set(key, user);\n        }\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    this.channels = this.channels.sort((a, b) => b.created - a.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/store.js"],"names":["OrderedMap","_","users","_id","name","created","Date","avatar","Store","constructor","appComponent","app","messages","channels","activeChannelId","user","addUserToChannel","channelId","userId","channel","get","members","set","update","searchUsers","search","keyword","toLower","searchItems","currentUser","getCurrentUser","currentUserId","trim","length","filter","includes","valueSeq","onCreateNewChannel","addChannel","setActiveChannelId","id","getActiveChannel","first","addMessage","message","isNew","lastMessage","removeMemberFromChannel","remove","getMessages","getMessagesFromChannel","map","value","key","push","getMembersFromChannel","loggedUser","index","getChannels","sort","a","b","forceUpdate"],"mappings":"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","sourcesContent":["import { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\n\r\n\r\nconst users = OrderedMap({\r\n    '1': {_id:'1', name:\"nDs\", created: new Date(), avatar:\"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"},\r\n    '2': {_id:'2', name:\"nDs0\", created: new Date(), avatar:\"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"},\r\n    '3': {_id:'3', name:\"nDs1\", created: new Date() ,avatar:\"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"},\r\n})\r\nexport default class Store {\r\n    constructor(appComponent){\r\n        this.app = appComponent;\r\n        this.messages = new OrderedMap();\r\n        this.channels = new OrderedMap();\r\n        this.activeChannelId = null;\r\n        this.user = {\r\n           \r\n        }\r\n    }\r\n\r\n    addUserToChannel(channelId, userId) {\r\n        const channel = this.channels.get(channelId);\r\n        if(channel) {\r\n            channel.members = channel.members.set(userId, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n    searchUsers(search = \"\"){\r\n        const keyword = _.toLower(search);\r\n        let searchItems = new OrderedMap();\r\n        const currentUser =this.getCurrentUser();\r\n        const currentUserId = _.get(currentUser, '_id');\r\n       \r\n        if(_.trim(search).length){\r\n           searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\r\n        }\r\n\r\n        return searchItems.valueSeq();\r\n    }\r\n\r\n    onCreateNewChannel(channel = {}){\r\n        const channelId = _.get(channel, \"_id\");\r\n        this.addChannel(channelId, channel );\r\n        this.setActiveChannelId(channelId);\r\n    \r\n    }\r\n\r\n    getCurrentUser(){\r\n        return this.user;\r\n    }\r\n\r\n    setActiveChannelId(id) {\r\n        this.activeChannelId = id;\r\n        this.update();\r\n    }\r\n    getActiveChannel(){\r\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\r\n        return channel;\r\n    }\r\n\r\n    addMessage(id, message = {}){\r\n\r\n        const user = this.getCurrentUser();\r\n        message.user = user;\r\n        this.messages = this.messages.set(`${id}`, message);\r\n        //add new message to \r\n        const channelId = _.get(message, 'channelId');\r\n        if(channelId){\r\n            let channel = this.channels.get(channelId);\r\n            channel.isNew = false;\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            channel.messages = channel.messages.set(id, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeMemberFromChannel( channel = null, user = null){\r\n        if(!channel || !user ){\r\n            return;\r\n        }\r\n        const channelId = _.get(channel, '_id')\r\n        const userId = _.get(user, '_id');\r\n        channel.members = channel.members.remove(userId);\r\n        this.channels = this.channels.set(channelId, channel);\r\n        this.update();\r\n    }\r\n\r\n    getMessages(){\r\n        return this.messages.valueSeq();\r\n    }\r\n    getMessagesFromChannel(channel){\r\n        let messages = [];\r\n\r\n        if(channel){\r\n            channel.messages.map((value, key) => {\r\n\r\n                const message = this.messages.get(key);\r\n                messages.push(message);\r\n            });\r\n        }\r\n        return messages;\r\n        \r\n    }\r\n\r\n    getMembersFromChannel(channel){\r\n        let members = new OrderedMap();\r\n        if(channel){\r\n            channel.members.map((value, key) => {\r\n                const user = users.get(key);\r\n                const loggedUser = this.getCurrentUser();\r\n                if( _.get(loggedUser, '_id') !== _.get(user, '_id')){\r\n                    members = members.set(key, user)\r\n                }\r\n            });\r\n        }\r\n        return members.valueSeq();\r\n    }\r\n\r\n\r\n    addChannel(index, channel = {}){\r\n        this.channels = this.channels.set(`${index}`, channel);\r\n        this.update();\r\n    }\r\n\r\n    getChannels(){\r\n        this.channels = this.channels.sort((a, b) => b.created - a.created);\r\n        return this.channels.valueSeq();\r\n    }\r\n    update(){\r\n        this.app.forceUpdate();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}