{"ast":null,"code":"import { OrderedMap } from \"immutable\";\nimport _ from 'lodash';\nexport default class Realtime {\n  constructor(store) {\n    this.store = store;\n    this.ws = null;\n    this.isConnected = false;\n    this.connect();\n    this.reconnect();\n  }\n\n  reconnect() {\n    const store = this.store;\n    window.setInterval(() => {\n      const user = store.getCurrentUser();\n\n      if (user && !this.isConnected) {\n        this.connect();\n      }\n    }, 3000);\n  }\n\n  decoMessage(msg) {\n    let message = {};\n\n    try {\n      message = JSON.parse(msg);\n    } catch (err) {\n      console.log(err);\n    }\n\n    return message;\n  }\n\n  readMessage(msg) {\n    const store = this.store;\n    const currentUser = store.getCurrentUser();\n\n    const currentUserId = _.toString(_.get(currentUser, '_id'));\n\n    const message = this.decoMessage(msg);\n\n    const action = _.get(message, 'action');\n\n    const payload = _.get(message, 'payload');\n\n    switch (action) {\n      case 'typing_status':\n        console.log(payload);\n\n        const obj = _.get(payload, 'obj');\n\n        const channelId = _.get(obj, 'channelId');\n\n        let typing = _.get(obj, 'payload');\n\n        this.onUpdateTypestatus(channelId, typing);\n        break;\n\n      case 'user_offline':\n        this.onUpdateUserStatus(payload, false);\n        break;\n\n      case 'user_online':\n        const isOnline = true;\n        this.onUpdateUserStatus(payload, isOnline);\n        break;\n\n      case 'message_added':\n        const activeChannel = store.getActiveChannel();\n\n        let notify = _.get(activeChannel, '_id') !== _.get(payload, 'channelId') && currentUserId !== _.get(payload, 'userId');\n\n        this.onAddMessage(payload, notify);\n        break;\n\n      default:\n        break;\n\n      case 'channel_added':\n        //to do check payload and insert new channel\n        this.onAddChannel(payload);\n        break;\n    }\n  }\n\n  onUpdateTypestatus(channelId, isTyping = false) {\n    const store = this.store;\n    store.channels = store.channels.update(channelId, channel => {\n      if (channel) {\n        channel.typing = isTyping;\n      }\n\n      return channel;\n    });\n    store.update();\n  }\n\n  onUpdateUserStatus(userId, isOnline = false) {\n    const store = this.store;\n    store.users = store.users.update(userId, user => {\n      if (user) {\n        user.online = isOnline;\n      }\n\n      return user;\n    });\n    store.update();\n  }\n\n  onAddMessage(payload, notify = false) {\n    let user = _.get(payload, 'user');\n\n    const store = this.store;\n    const currentUser = store.getCurrentUser();\n\n    const currentUserId = _.toString(_.get(currentUser, '_id')); //add user to cache\n\n\n    user = store.addUserToCache(user);\n    const messageObject = {\n      _id: payload._id,\n      body: _.get(payload, 'body', ''),\n      userId: _.get(payload, 'userId'),\n      channelId: _.get(payload, 'channelId'),\n      created: _.get(payload, 'created', new Date()),\n      me: currentUserId === _.toString(_.get(payload, 'userId')),\n      user: user\n    };\n    console.log(\"Mess listen from fetch: \", messageObject);\n    store.setMessage(messageObject, notify);\n  }\n\n  onAddChannel(payload) {\n    const store = this.store;\n    const channelId = `${payload._id}`;\n    const userId = `${payload.userId}`;\n\n    const users = _.get(payload, 'users', []);\n\n    let channel = {\n      _id: channelId,\n      title: _.get(payload, 'title', ''),\n      lastMessage: _.get(payload, 'lastMessage', ''),\n      members: new OrderedMap(),\n      messages: new OrderedMap(),\n      isNew: false,\n      userId: userId,\n      created: new Date(),\n      typing: false\n    };\n\n    _.each(users, user => {\n      //add this user to store.users collection\n      const memberId = `${user._id}`;\n      this.store.addUserToCache(user);\n      channel.members = channel.members.set(memberId, true);\n    });\n\n    const channelMessages = store.messages.filter(m => _.toString(m.channelId) === channelId);\n    channelMessages.forEach(msg => {\n      const msgId = _.toString(_.get(msg, '_id'));\n\n      channel.messages = channel.messages.set(msgId, true);\n    });\n    store.addChannel(channelId, channel);\n  }\n\n  send(msg = {}) {\n    const isConnected = this.isConnected;\n\n    if (this.ws && isConnected) {\n      const msgString = JSON.stringify(msg);\n      this.ws.send(msgString);\n    }\n  }\n\n  authentication() {\n    const store = this.store;\n    const tokenId = store.getUserTokenId();\n    const message = {\n      action: 'auth',\n      payload: `${tokenId}`\n    };\n    this.send(message);\n  }\n\n  connect() {\n    const ws = new WebSocket('ws://localhost:8080');\n    this.ws = ws;\n\n    ws.onopen = () => {\n      //tell to server who are you ?\n      this.isConnected = true;\n      this.authentication();\n\n      ws.onmessage = e => {\n        this.readMessage(_.get(e, 'data', ''));\n        console.log(\"Message from server: \", e.data);\n      };\n    };\n\n    ws.onclose = () => {\n      this.isConnected = false;\n      this.store.update();\n    };\n\n    ws.onerror = () => {\n      this.isConnected = false;\n      this.store.update();\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/realtime.js"],"names":["OrderedMap","_","Realtime","constructor","store","ws","isConnected","connect","reconnect","window","setInterval","user","getCurrentUser","decoMessage","msg","message","JSON","parse","err","console","log","readMessage","currentUser","currentUserId","toString","get","action","payload","obj","channelId","typing","onUpdateTypestatus","onUpdateUserStatus","isOnline","activeChannel","getActiveChannel","notify","onAddMessage","onAddChannel","isTyping","channels","update","channel","userId","users","online","addUserToCache","messageObject","_id","body","created","Date","me","setMessage","title","lastMessage","members","messages","isNew","each","memberId","set","channelMessages","filter","m","forEach","msgId","addChannel","send","msgString","stringify","authentication","tokenId","getUserTokenId","WebSocket","onopen","onmessage","e","data","onclose","onerror"],"mappings":"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","sourcesContent":["import { OrderedMap } from \"immutable\";\r\nimport _ from 'lodash';\r\n\r\nexport default class Realtime{\r\n\r\n    constructor(store){\r\n        this.store = store;\r\n        this.ws = null;\r\n        this.isConnected = false;\r\n        this.connect();\r\n        this.reconnect();\r\n\r\n    }\r\n    reconnect(){\r\n        const store = this.store;\r\n        window.setInterval(() => {\r\n            const user = store.getCurrentUser();\r\n            if(user && !this.isConnected) {\r\n                this.connect();\r\n            }\r\n        }, 3000)\r\n    }\r\n    decoMessage(msg){\r\n        let message = {};\r\n        try{\r\n            message = JSON.parse(msg);\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        return message;\r\n    }\r\n    readMessage(msg){\r\n        const store = this.store;\r\n        const currentUser = store.getCurrentUser();\r\n        const currentUserId = _.toString(_.get(currentUser, '_id'));\r\n        const message = this.decoMessage(msg);\r\n        const action = _.get(message, 'action');\r\n        const payload = _.get(message, 'payload');\r\n\r\n        switch(action){\r\n            case 'typing_status':\r\n                console.log(payload);\r\n                const obj = _.get(payload, 'obj');\r\n                const channelId =  _.get(obj, 'channelId');\r\n                let typing = _.get(obj, 'payload');\r\n                this.onUpdateTypestatus(channelId, typing);\r\n                break;\r\n            case 'user_offline':\r\n                \r\n                this.onUpdateUserStatus(payload, false);\r\n                break;\r\n            case 'user_online':\r\n                const isOnline = true;\r\n                this.onUpdateUserStatus(payload, isOnline);\r\n                break;\r\n            case 'message_added':\r\n                \r\n                const activeChannel = store.getActiveChannel();\r\n                let notify = _.get(activeChannel, '_id') !== _.get(payload, 'channelId') && currentUserId !== _.get(payload, 'userId');\r\n                this.onAddMessage(payload, notify);\r\n\r\n            break;\r\n            default:\r\n                break;\r\n            case 'channel_added':\r\n                //to do check payload and insert new channel\r\n                this.onAddChannel(payload);\r\n                break;\r\n        }\r\n    }\r\n    onUpdateTypestatus(channelId, isTyping = false){\r\n        const store = this.store;\r\n        store.channels = store.channels.update(channelId, (channel) => {\r\n            if(channel){\r\n                channel.typing = isTyping;\r\n            }\r\n            \r\n            return channel;\r\n        });\r\n        store.update();\r\n    }\r\n\r\n    onUpdateUserStatus(userId, isOnline = false){\r\n        const store = this.store;\r\n    \r\n        store.users = store.users.update(userId, (user) => {\r\n            if(user){\r\n                user.online = isOnline;\r\n            }\r\n            \r\n            return user;\r\n        });\r\n        store.update();\r\n        \r\n    }\r\n\r\n    onAddMessage(payload, notify = false){\r\n        let user = _.get(payload, 'user');\r\n        const store = this.store;\r\n        const currentUser = store.getCurrentUser();\r\n        const currentUserId = _.toString(_.get(currentUser, '_id'));\r\n\r\n        //add user to cache\r\n        user = store.addUserToCache(user);\r\n\r\n        const messageObject = {\r\n            _id: payload._id,\r\n            body: _.get(payload, 'body', ''),\r\n            userId: _.get(payload, 'userId'),\r\n            channelId: _.get(payload, 'channelId'),\r\n            created: _.get(payload, 'created', new Date()),\r\n            me: currentUserId === _.toString(_.get(payload, 'userId')),\r\n            user: user,\r\n        };\r\n        console.log(\"Mess listen from fetch: \", messageObject);\r\n        store.setMessage(messageObject, notify);\r\n\r\n    }\r\n\r\n    onAddChannel(payload){\r\n        const store = this.store;\r\n        const channelId = `${payload._id}`;\r\n        const userId = `${payload.userId}`;\r\n        const users = _.get(payload, 'users', []);\r\n        let channel = { \r\n            \r\n            _id:channelId,  \r\n            title: _.get(payload, 'title', '' ),\r\n            lastMessage: _.get(payload, 'lastMessage', ''),\r\n            members: new OrderedMap(),\r\n            messages: new OrderedMap(),\r\n            isNew: false,\r\n            userId: userId,\r\n            created: new Date(),\r\n            typing: false,\r\n        };\r\n        _.each(users, (user) => {\r\n            //add this user to store.users collection\r\n            const memberId = `${user._id}`;\r\n            this.store.addUserToCache(user);\r\n            channel.members = channel.members.set(memberId, true);\r\n        });\r\n        const channelMessages = store.messages.filter((m) => _.toString(m.channelId) === channelId);\r\n        channelMessages.forEach((msg) => {\r\n            const msgId = _.toString(_.get(msg, '_id'));\r\n            channel.messages = channel.messages.set(msgId, true);\r\n        })\r\n        store.addChannel(channelId, channel);\r\n    }\r\n    send( msg = {}){\r\n        const isConnected = this.isConnected;\r\n        if(this.ws && isConnected){\r\n            const msgString = JSON.stringify(msg);\r\n            this.ws.send(msgString);\r\n        }\r\n    }\r\n    authentication(){\r\n        const store = this.store;\r\n        const tokenId = store.getUserTokenId();\r\n        const message = {\r\n            action: 'auth',\r\n            payload: `${tokenId}`\r\n        }\r\n            this.send(message);\r\n    }\r\n\r\n    connect(){\r\n\r\n        const ws = new WebSocket('ws://localhost:8080');\r\n        this.ws = ws;\r\n        ws.onopen = () => {\r\n            //tell to server who are you ?\r\n            this.isConnected = true;\r\n            this.authentication();\r\n            \r\n            ws.onmessage = (e) => {\r\n                this.readMessage(_.get(e, 'data',''));\r\n                console.log(\"Message from server: \", e.data);\r\n            }\r\n        }\r\n\r\n        ws.onclose = () => {\r\n            this.isConnected = false;\r\n            this.store.update();\r\n\r\n        }\r\n\r\n        ws.onerror = () => {\r\n            this.isConnected = false;\r\n            this.store.update();\r\n        }\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}