{"ast":null,"code":"import _slicedToArray from\"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import Dexie from\"dexie\";import\"dexie-observable\";import{promised}from\"q\";import{promises}from\"fs\";// Define your database\nexport var db=new Dexie(\"Song_Database\");// create new databse\n// our schema is of storing a song\ndb.version(1).stores({songs:\"&videoId, timestamp, playbackTimes, [rating+timestamp], [downloadState+timestamp]\"});db.version(2).stores({});// add or update song on play\nexport var updatePlayingSong=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data){var videoObj,song;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:videoObj={videoId:data.id,timestamp:Date.now(),title:data.title,channelTitle:data.channelTitle,playbackTimes:1};_context.next=3;return db.songs.get({videoId:data.id});case 3:song=_context.sent;if(!song){_context.next=10;break;}db.songs.update(data.id,{timestamp:Date.now(),playbackTimes:song.playbackTimes+1});console.log(\"song updated\");return _context.abrupt(\"return\",song.rating);case 10:// we will add a new song\nconsole.log(\"song added\");db.songs.add(videoObj);case 12:case\"end\":return _context.stop();}}},_callee);}));return function updatePlayingSong(_x){return _ref.apply(this,arguments);};}();// like or dislike a song on database\nexport var rateSong=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id,rating){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// if user likes the song then only download it\ndb.songs.update(id,{rating:rating});case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function rateSong(_x2,_x3){return _ref2.apply(this,arguments);};}();export var getHistory=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var songsByTimeStamp;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return db.songs.orderBy(\"timestamp\").limit(500).reverse().toArray();case 2:songsByTimeStamp=_context3.sent;return _context3.abrupt(\"return\",songsByTimeStamp);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function getHistory(){return _ref3.apply(this,arguments);};}();export var getLikedSongs=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var likedSongs;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return db.songs.where(\"[rating+timestamp]\")//this will filter song based on time and liked\n.between([\"liked\",Dexie.minKey],[\"liked\",Dexie.maxKey]).reverse().toArray();case 2:likedSongs=_context4.sent;return _context4.abrupt(\"return\",likedSongs);case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function getLikedSongs(){return _ref4.apply(this,arguments);};}();export var getDownloadedSongs=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var downloadedSongs;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return db.songs.where(\"[downloadState+timestamp]\")//this will filter song based on time and downloaded\n.between([\"downloaded\",Dexie.minKey],[\"downloaded\",Dexie.maxKey]).reverse().toArray();case 2:downloadedSongs=_context5.sent;return _context5.abrupt(\"return\",downloadedSongs);case 4:case\"end\":return _context5.stop();}}},_callee5);}));return function getDownloadedSongs(){return _ref5.apply(this,arguments);};}();export var removeDownloadingState=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var songs;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return db.songs.where(\"[downloadState+timestamp]\").between([\"downloading\",Dexie.minKey],[\"downloading\",Dexie.maxKey]).modify(function(x){delete x.downloadState;});case 2:songs=_context6.sent;console.log(songs);case 4:case\"end\":return _context6.stop();}}},_callee6);}));return function removeDownloadingState(){return _ref6.apply(this,arguments);};}();export var downloadSong=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id,url){var thumbURL,_yield$Promise$all,_yield$Promise$all2,thumbnailBlob,songBlob;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;db.songs.update(id,{downloadState:\"downloading\"});thumbURL=\"https://i.ytimg.com/vi/\".concat(id,\"/hqdefault.jpg\");_context7.next=5;return Promise.all([fetchProxiedBlob(thumbURL),fetchProxiedBlob(url)]);case 5:_yield$Promise$all=_context7.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);thumbnailBlob=_yield$Promise$all2[0];songBlob=_yield$Promise$all2[1];db.songs.update(id,{downloadState:\"downloaded\",thumbnail:thumbnailBlob,audio:songBlob});return _context7.abrupt(\"return\",\"downloaded\");case 13:_context7.prev=13;_context7.t0=_context7[\"catch\"](0);return _context7.abrupt(\"return\",_context7.t0);case 16:case\"end\":return _context7.stop();}}},_callee7,null,[[0,13]]);}));return function downloadSong(_x4,_x5){return _ref7.apply(this,arguments);};}();export var deleteSongAudio=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(id){return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return db.songs.where({videoId:id}).modify(function(x){delete x.audio;delete x.downloadState;});case 2:return _context8.abrupt(\"return\",\"song deleted\");case 3:case\"end\":return _context8.stop();}}},_callee8);}));return function deleteSongAudio(_x6){return _ref8.apply(this,arguments);};}();function fetchProxiedBlob(url){var URL=url;return new Promise(function(resolve,reject){var xhr=new XMLHttpRequest();xhr.open(\"GET\",\"https://server.ylight.xyz/proxy/\"+URL);xhr.responseType=\"blob\";xhr.onload=function(){var status=xhr.status;if(status>=200&&status<300){resolve(xhr.response);}else{reject({status:status,statusText:xhr.statusText});}};xhr.send();setTimeout(function(){xhr.abort();xhr.open(\"GET\",\"https://server.ylight.xyz/proxy/\"+URL);xhr.send();},1000);});}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/external/saveSong.js"],"names":["Dexie","promised","promises","db","version","stores","songs","updatePlayingSong","data","videoObj","videoId","id","timestamp","Date","now","title","channelTitle","playbackTimes","get","song","update","console","log","rating","add","rateSong","getHistory","orderBy","limit","reverse","toArray","songsByTimeStamp","getLikedSongs","where","between","minKey","maxKey","likedSongs","getDownloadedSongs","downloadedSongs","removeDownloadingState","modify","x","downloadState","downloadSong","url","thumbURL","Promise","all","fetchProxiedBlob","thumbnailBlob","songBlob","thumbnail","audio","deleteSongAudio","URL","resolve","reject","xhr","XMLHttpRequest","open","responseType","onload","status","response","statusText","send","setTimeout","abort"],"mappings":"udAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,kBAAP,CACA,OAASC,QAAT,KAAyB,GAAzB,CACA,OAASC,QAAT,KAAyB,IAAzB,CAEA;AACA,MAAO,IAAMC,CAAAA,EAAE,CAAG,GAAIH,CAAAA,KAAJ,CAAU,eAAV,CAAX,CAEP;AACA;AACAG,EAAE,CAACC,OAAH,CAAW,CAAX,EAAcC,MAAd,CAAqB,CACnBC,KAAK,CACH,mFAFiB,CAArB,EAKAH,EAAE,CAACC,OAAH,CAAW,CAAX,EAAcC,MAAd,CAAqB,EAArB,EAEA;AACA,MAAO,IAAME,CAAAA,iBAAiB,0FAAG,iBAAMC,IAAN,oIACzBC,QADyB,CACd,CACfC,OAAO,CAAEF,IAAI,CAACG,EADC,CAEfC,SAAS,CAAEC,IAAI,CAACC,GAAL,EAFI,CAGfC,KAAK,CAAEP,IAAI,CAACO,KAHG,CAIfC,YAAY,CAAER,IAAI,CAACQ,YAJJ,CAKfC,aAAa,CAAE,CALA,CADc,uBASZd,CAAAA,EAAE,CAACG,KAAH,CAASY,GAAT,CAAa,CAAER,OAAO,CAAEF,IAAI,CAACG,EAAhB,CAAb,CATY,QASzBQ,IATyB,mBAW3BA,IAX2B,0BAY7BhB,EAAE,CAACG,KAAH,CAASc,MAAT,CAAgBZ,IAAI,CAACG,EAArB,CAAyB,CACvBC,SAAS,CAAEC,IAAI,CAACC,GAAL,EADY,CAEvBG,aAAa,CAAEE,IAAI,CAACF,aAAL,CAAqB,CAFb,CAAzB,EAIAI,OAAO,CAACC,GAAR,CAAY,cAAZ,EAhB6B,gCAiBtBH,IAAI,CAACI,MAjBiB,UAoB7B;AACAF,OAAO,CAACC,GAAR,CAAY,YAAZ,EACAnB,EAAE,CAACG,KAAH,CAASkB,GAAT,CAAaf,QAAb,EAtB6B,uDAAH,kBAAjBF,CAAAA,iBAAiB,4CAAvB,CA0BP;AACA,MAAO,IAAMkB,CAAAA,QAAQ,2FAAG,kBAAOd,EAAP,CAAWY,MAAX,sHACtB;AAEApB,EAAE,CAACG,KAAH,CAASc,MAAT,CAAgBT,EAAhB,CAAoB,CAClBY,MAAM,CAAEA,MADU,CAApB,EAHsB,wDAAH,kBAARE,CAAAA,QAAQ,kDAAd,CAQP,MAAO,IAAMC,CAAAA,UAAU,2FAAG,oLACOvB,CAAAA,EAAE,CAACG,KAAH,CAC5BqB,OAD4B,CACpB,WADoB,EAE5BC,KAF4B,CAEtB,GAFsB,EAG5BC,OAH4B,GAI5BC,OAJ4B,EADP,QAClBC,gBADkB,iDAMjBA,gBANiB,0DAAH,kBAAVL,CAAAA,UAAU,2CAAhB,CASP,MAAO,IAAMM,CAAAA,aAAa,2FAAG,8KACF7B,CAAAA,EAAE,CAACG,KAAH,CACtB2B,KADsB,CAChB,oBADgB,CACM;AADN,CAEtBC,OAFsB,CAEd,CAAC,OAAD,CAAUlC,KAAK,CAACmC,MAAhB,CAFc,CAEW,CAAC,OAAD,CAAUnC,KAAK,CAACoC,MAAhB,CAFX,EAGtBP,OAHsB,GAItBC,OAJsB,EADE,QACrBO,UADqB,iDAMpBA,UANoB,0DAAH,kBAAbL,CAAAA,aAAa,2CAAnB,CASP,MAAO,IAAMM,CAAAA,kBAAkB,2FAAG,mLACFnC,CAAAA,EAAE,CAACG,KAAH,CAC3B2B,KAD2B,CACrB,2BADqB,CACQ;AADR,CAE3BC,OAF2B,CAEnB,CAAC,YAAD,CAAelC,KAAK,CAACmC,MAArB,CAFmB,CAEW,CAAC,YAAD,CAAenC,KAAK,CAACoC,MAArB,CAFX,EAG3BP,OAH2B,GAI3BC,OAJ2B,EADE,QAC1BS,eAD0B,iDAMzBA,eANyB,0DAAH,kBAAlBD,CAAAA,kBAAkB,2CAAxB,CASP,MAAO,IAAME,CAAAA,sBAAsB,2FAAG,yKAEhBrC,CAAAA,EAAE,CAACG,KAAH,CACjB2B,KADiB,CACX,2BADW,EAEjBC,OAFiB,CAET,CAAC,aAAD,CAAgBlC,KAAK,CAACmC,MAAtB,CAFS,CAEsB,CAAC,aAAD,CAAgBnC,KAAK,CAACoC,MAAtB,CAFtB,EAGjBK,MAHiB,CAGV,SAAAC,CAAC,CAAI,CACX,MAAOA,CAAAA,CAAC,CAACC,aAAT,CACD,CALiB,CAFgB,QAE9BrC,KAF8B,gBAQpCe,OAAO,CAACC,GAAR,CAAYhB,KAAZ,EARoC,wDAAH,kBAAtBkC,CAAAA,sBAAsB,2CAA5B,CAWP,MAAO,IAAMI,CAAAA,YAAY,2FAAG,kBAAOjC,EAAP,CAAWkC,GAAX,kNAExB1C,EAAE,CAACG,KAAH,CAASc,MAAT,CAAgBT,EAAhB,CAAoB,CAClBgC,aAAa,CAAE,aADG,CAApB,EAGMG,QALkB,kCAKmBnC,EALnB,0CAMgBoC,CAAAA,OAAO,CAACC,GAAR,CAAY,CAClDC,gBAAgB,CAACH,QAAD,CADkC,CAElDG,gBAAgB,CAACJ,GAAD,CAFkC,CAAZ,CANhB,mGAMjBK,aANiB,wBAMFC,QANE,wBAUxBhD,EAAE,CAACG,KAAH,CAASc,MAAT,CAAgBT,EAAhB,CAAoB,CAClBgC,aAAa,CAAE,YADG,CAElBS,SAAS,CAAEF,aAFO,CAGlBG,KAAK,CAAEF,QAHW,CAApB,EAVwB,iCAejB,YAfiB,qLAAH,kBAAZP,CAAAA,YAAY,kDAAlB,CAqBP,MAAO,IAAMU,CAAAA,eAAe,2FAAG,kBAAM3C,EAAN,6IACvBR,CAAAA,EAAE,CAACG,KAAH,CAAS2B,KAAT,CAAe,CAAEvB,OAAO,CAAEC,EAAX,CAAf,EAAgC8B,MAAhC,CAAuC,SAAAC,CAAC,CAAI,CAChD,MAAOA,CAAAA,CAAC,CAACW,KAAT,CACA,MAAOX,CAAAA,CAAC,CAACC,aAAT,CACD,CAHK,CADuB,yCAKtB,cALsB,0DAAH,kBAAfW,CAAAA,eAAe,8CAArB,CAQP,QAASL,CAAAA,gBAAT,CAA0BJ,GAA1B,CAA+B,CAC7B,GAAMU,CAAAA,GAAG,CAAGV,GAAZ,CACA,MAAO,IAAIE,CAAAA,OAAJ,CAAY,SAASS,OAAT,CAAkBC,MAAlB,CAA0B,CAC3C,GAAIC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAV,CACAD,GAAG,CAACE,IAAJ,CAAS,KAAT,CAAgB,mCAAqCL,GAArD,EACAG,GAAG,CAACG,YAAJ,CAAmB,MAAnB,CACAH,GAAG,CAACI,MAAJ,CAAa,UAAW,CACtB,GAAIC,CAAAA,MAAM,CAAGL,GAAG,CAACK,MAAjB,CACA,GAAIA,MAAM,EAAI,GAAV,EAAiBA,MAAM,CAAG,GAA9B,CAAmC,CACjCP,OAAO,CAACE,GAAG,CAACM,QAAL,CAAP,CACD,CAFD,IAEO,CACLP,MAAM,CAAC,CACLM,MAAM,CAAEA,MADH,CAELE,UAAU,CAAEP,GAAG,CAACO,UAFX,CAAD,CAAN,CAID,CACF,CAVD,CAWAP,GAAG,CAACQ,IAAJ,GACAC,UAAU,CAAC,UAAM,CACfT,GAAG,CAACU,KAAJ,GACAV,GAAG,CAACE,IAAJ,CAAS,KAAT,CAAgB,mCAAqCL,GAArD,EAEAG,GAAG,CAACQ,IAAJ,GACD,CALS,CAKP,IALO,CAAV,CAMD,CAtBM,CAAP,CAuBD","sourcesContent":["import Dexie from \"dexie\";\r\nimport \"dexie-observable\";\r\nimport { promised } from \"q\";\r\nimport { promises } from \"fs\";\r\n\r\n// Define your database\r\nexport const db = new Dexie(\"Song_Database\");\r\n\r\n// create new databse\r\n// our schema is of storing a song\r\ndb.version(1).stores({\r\n  songs:\r\n    \"&videoId, timestamp, playbackTimes, [rating+timestamp], [downloadState+timestamp]\"\r\n});\r\n\r\ndb.version(2).stores({});\r\n\r\n// add or update song on play\r\nexport const updatePlayingSong = async data => {\r\n  const videoObj = {\r\n    videoId: data.id,\r\n    timestamp: Date.now(),\r\n    title: data.title,\r\n    channelTitle: data.channelTitle,\r\n    playbackTimes: 1\r\n  };\r\n\r\n  const song = await db.songs.get({ videoId: data.id });\r\n  // if song exists we will just update the timestamp and the playback\r\n  if (song) {\r\n    db.songs.update(data.id, {\r\n      timestamp: Date.now(),\r\n      playbackTimes: song.playbackTimes + 1\r\n    });\r\n    console.log(\"song updated\");\r\n    return song.rating;\r\n    // return the rating\r\n  } else {\r\n    // we will add a new song\r\n    console.log(\"song added\");\r\n    db.songs.add(videoObj);\r\n  }\r\n};\r\n\r\n// like or dislike a song on database\r\nexport const rateSong = async (id, rating) => {\r\n  // if user likes the song then only download it\r\n\r\n  db.songs.update(id, {\r\n    rating: rating\r\n  });\r\n};\r\n\r\nexport const getHistory = async () => {\r\n  const songsByTimeStamp = await db.songs\r\n    .orderBy(\"timestamp\")\r\n    .limit(500)\r\n    .reverse()\r\n    .toArray();\r\n  return songsByTimeStamp;\r\n};\r\n\r\nexport const getLikedSongs = async () => {\r\n  const likedSongs = await db.songs\r\n    .where(\"[rating+timestamp]\") //this will filter song based on time and liked\r\n    .between([\"liked\", Dexie.minKey], [\"liked\", Dexie.maxKey])\r\n    .reverse()\r\n    .toArray();\r\n  return likedSongs;\r\n};\r\n\r\nexport const getDownloadedSongs = async () => {\r\n  const downloadedSongs = await db.songs\r\n    .where(\"[downloadState+timestamp]\") //this will filter song based on time and downloaded\r\n    .between([\"downloaded\", Dexie.minKey], [\"downloaded\", Dexie.maxKey])\r\n    .reverse()\r\n    .toArray();\r\n  return downloadedSongs;\r\n};\r\n\r\nexport const removeDownloadingState = async () => {\r\n  // find all the downloadState which is downloading and remove that\r\n  const songs = await db.songs\r\n    .where(\"[downloadState+timestamp]\")\r\n    .between([\"downloading\", Dexie.minKey], [\"downloading\", Dexie.maxKey])\r\n    .modify(x => {\r\n      delete x.downloadState;\r\n    });\r\n  console.log(songs);\r\n};\r\n\r\nexport const downloadSong = async (id, url) => {\r\n  try {\r\n    db.songs.update(id, {\r\n      downloadState: \"downloading\"\r\n    });\r\n    const thumbURL = `https://i.ytimg.com/vi/${id}/hqdefault.jpg`;\r\n    const [thumbnailBlob, songBlob] = await Promise.all([\r\n      fetchProxiedBlob(thumbURL),\r\n      fetchProxiedBlob(url)\r\n    ]);\r\n    db.songs.update(id, {\r\n      downloadState: \"downloaded\",\r\n      thumbnail: thumbnailBlob,\r\n      audio: songBlob\r\n    });\r\n    return \"downloaded\";\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const deleteSongAudio = async id => {\r\n  await db.songs.where({ videoId: id }).modify(x => {\r\n    delete x.audio;\r\n    delete x.downloadState;\r\n  });\r\n  return \"song deleted\";\r\n};\r\n\r\nfunction fetchProxiedBlob(url) {\r\n  const URL = url;\r\n  return new Promise(function(resolve, reject) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\"GET\", \"https://server.ylight.xyz/proxy/\" + URL);\r\n    xhr.responseType = \"blob\";\r\n    xhr.onload = function() {\r\n      var status = xhr.status;\r\n      if (status >= 200 && status < 300) {\r\n        resolve(xhr.response);\r\n      } else {\r\n        reject({\r\n          status: status,\r\n          statusText: xhr.statusText\r\n        });\r\n      }\r\n    };\r\n    xhr.send();\r\n    setTimeout(() => {\r\n      xhr.abort();\r\n      xhr.open(\"GET\", \"https://server.ylight.xyz/proxy/\" + URL);\r\n\r\n      xhr.send();\r\n    }, 1000);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}