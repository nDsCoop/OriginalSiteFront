{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\App3.js\";\nimport React, { Component } from 'react';\nimport defaultImg from \"../images/Logosvg3.svg\";\nimport className from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nimport { ObjectID } from \"../helpers/objectid\";\nimport { IconButton } from '@material-ui/core';\nimport { MdSettings, MdDeleteForever } from 'react-icons/md';\nimport { CgSoftwareUpload } from 'react-icons/cg';\nimport moment from 'moment';\nimport { UserBar } from \"./UserBar\";\nimport Dropzone from \"react-dropzone\";\nimport Picker, { SKIN_TONE_MEDIUM_DARK } from 'emoji-picker-react';\nexport default class App3 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onDrop = files => {\n      const {\n        store\n      } = this.props;\n      console.log(files);\n      let formData = new FormData();\n      formData.append(\"file\", files[0]);\n      store.upLoadfile(formData);\n    };\n\n    this.sendTyping = () => {\n      const {\n        store\n      } = this.props;\n      const activeChannel = store.getActiveChannel();\n      this.lastUpdateTime = Date.now();\n\n      if (!this.state.isTyping) {\n        this.setState({\n          isTyping: true\n        });\n        store.addTyping(activeChannel, true);\n        this.startCheckingTyping();\n      }\n    };\n\n    this.startCheckingTyping = () => {\n      console.log(\"Typing\");\n      this.typingInterval = setInterval(() => {\n        if (Date.now() - this.lastUpdateTime > 350) {\n          this.setState({\n            isTyping: false\n          });\n          this.stopCheckingTyping();\n        }\n      }, 300);\n    };\n\n    this.stopCheckingTyping = () => {\n      const {\n        store\n      } = this.props;\n      const activeChannel = store.getActiveChannel();\n      console.log(\"Stop Typing\");\n\n      if (this.typingInterval) {\n        clearInterval(this.typingInterval);\n        store.addTyping(activeChannel, false); // console.log(this.state.isTyping);\n      }\n    };\n\n    this.renderChannelTitle = (channel = null) => {\n      const {\n        store\n      } = this.props;\n      const members = store.getMembersFromChannel(channel);\n      const names = [];\n      members.forEach(user => {\n        const name = _.get(user, 'name');\n\n        names.push(name);\n      });\n\n      let title = _.join(names, ', ');\n\n      if (!title && _.get(channel, 'isNew')) {\n        title = 'New Mss';\n      }\n\n      return /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 16\n        }\n      }, title);\n    };\n\n    this.handleOnClick = user => {\n      const {\n        store\n      } = this.props;\n\n      const userId = _.get(user, '_id');\n\n      const channelId = _.get(store.getActiveChannel(), '_id');\n\n      store.addUserToChannel(channelId, userId);\n      this.setState({\n        searchUser: ''\n      });\n    };\n\n    this._onCreateChannel = e => {\n      e.preventDefault();\n      const {\n        store\n      } = this.props;\n      const currentUser = store.getCurrentUser();\n\n      const currentUserId = _.get(currentUser, '_id');\n\n      const channelId = new ObjectID().toString();\n      const channel = {\n        _id: channelId,\n        title: \"\",\n        lastMessage: \"Let's a chat\",\n        members: new OrderedMap(),\n        messages: new OrderedMap(),\n        isNew: true,\n        userId: currentUserId,\n        created: new Date(),\n        typing: false\n      };\n      channel.members = channel.members.set(currentUserId, true);\n      store.onCreateNewChannel(channel);\n    };\n\n    this.scrollMessagesToBottom = () => {\n      if (this.messagesRef) {\n        this.messagesRef.scrollTop = this.messagesRef.scrollHeight;\n      }\n    };\n\n    this.handleSubmit = e => {\n      const {\n        newMessage\n      } = this.state;\n      const {\n        store\n      } = this.props;\n      e.preventDefault();\n\n      if (_.trim(newMessage).length) {\n        const messageId = new ObjectID().toString();\n        const channel = store.getActiveChannel();\n\n        const channelId = _.get(channel, '_id', null);\n\n        const currentUser = store.getCurrentUser();\n        const message = {\n          _id: messageId,\n          channelId: channelId,\n          body: newMessage,\n          userId: _.get(currentUser, '_id'),\n          type: \"text\",\n          me: true\n        };\n        store.addMessage(messageId, message);\n        this.setState({\n          newMessage: \"\"\n        });\n      }\n\n      this.setState({\n        newMessage: \"\"\n      });\n    };\n\n    this._onResi = () => {\n      this.setState({\n        height: window.innerHeight\n      });\n    };\n\n    this.state = {\n      height: window.innerHeight,\n      newMessage: '',\n      searchUser: '',\n      showSearchUser: false,\n      isTyping: false\n    };\n  } //  onEmojiClick = (event, emojiObject) => {\n  //     setChosenEmoji(emojiObject);\n  //   };\n\n\n  componentWillUnmount() {\n    this.stopCheckingTyping();\n  }\n\n  renderChannelAvatar(channel) {\n    const {\n      store\n    } = this.props;\n    const members = store.getMembersFromChannel(channel);\n    const maxDisplay = 4;\n    const total = members.size > maxDisplay ? maxDisplay : members.size;\n    const avatars = members.map((user, index) => {\n      return index < maxDisplay ? /*#__PURE__*/React.createElement(\"img\", {\n        key: index,\n        src: _.get(user, 'avatar'),\n        alt: _.get(user, 'name'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 42\n        }\n      }) : null;\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: className('channel-avatars', `channel-avatars-${total}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 16\n      }\n    }, avatars);\n  }\n\n  // addTestMessages = () => {\n  //     const {store} = this.props\n  //     for(let i = 0; i < 20; i++){\n  //         let isMe = false;\n  //         if(i % 2 === 0) {\n  //             isMe = true;\n  //         }\n  //         const newMsg = {\n  //             _id: `${i}`,\n  //             author: `Author: ${i}`,\n  //             body: `The body of message ${i}`,\n  //             avatar: defaultImg,\n  //             me: isMe,\n  //             timing: '0:00'\n  //         }\n  //         store.addMessage(i, newMsg);\n  //     }\n  //     for (let c = 0; c<10; c++){\n  //         const newChannel ={\n  //             _id: `${c}`,\n  //             title: `Channel title ${c}`,\n  //             lastMessage: `Hey there is.. ${c}`,\n  //             members: new OrderedMap({\n  //                 '1': true,\n  //                 '2': true,\n  //             }),\n  //             messages: new OrderedMap(),\n  //             created: new Date(),\n  //         }\n  //         const moreMsgId =`${c + 1}`;\n  //         const msgId = `${c}`;\n  //         newChannel.messages = newChannel.messages.set(msgId, true);\n  //         newChannel.messages = newChannel.messages.set(moreMsgId, true);\n  //         store.addChannel(c, newChannel);\n  //     }\n  // }\n  componentDidUpdate() {\n    this.scrollMessagesToBottom();\n    console.log(\"CDidUpdate\");\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._onResi); // this.addTestMessages();\n\n    console.log(\"CDidMount\");\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._onResi);\n    console.log(\"CWillUnMount\");\n  }\n\n  render() {\n    const {\n      height,\n      newMessage,\n      isTyping\n    } = this.state;\n    const {\n      store\n    } = this.props; // const isConnected = store.isConnected();\n\n    const activeChannel = store.getActiveChannel();\n    const messages = store.getMessagesFromChannel(activeChannel);\n    const members = store.getMembersFromChannel(activeChannel);\n    const channels = store.getChannels();\n    const usersList = store.getSearchUsers();\n    const me = store.getCurrentUser();\n\n    const onEmojiClick = (event, emojiObject) => {\n      this.setState({\n        newMessage: `${emojiObject.emoji}`\n      });\n      console.log(`${emojiObject.emoji}`);\n    };\n\n    const style = {\n      height: height\n    };\n\n    const resultSearch = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"search-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 25\n        }\n      }, usersList.map((user, index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          onClick: () => this.handleOnClick(user),\n          key: index,\n          className: \"user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 36\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: user.avatar,\n          alt: user.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 29\n          }\n        }, user.name));\n      })));\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      className: \"app3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"action\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      onClick: e => this._onCreateChannel(e),\n      className: \"btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 29\n      }\n    }, \"AddNew\"))), _.get(activeChannel, 'isNew') ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 54\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"tool\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      value: this.state.searchUser,\n      placeholder: \"To UserName/Email\",\n      onChange: e => {\n        const searchTxt = _.get(e, 'target.value');\n\n        this.setState({\n          searchUser: searchTxt\n        }, () => {\n          store.startSearchUsers(searchTxt);\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 29\n      }\n    })), resultSearch()) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-mid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 21\n      }\n    }, this.renderChannelTitle(activeChannel)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(UserBar, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolsRight-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      style: {\n        color: \"rgba(0, 0, 0, 0.5)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MdSettings, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 29\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chanels\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 25\n      }\n    }, channels.map((channel, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: index => {\n          store.setActiveChannelId(channel._id);\n        },\n        key: channel._id,\n        className: className('chanel', {\n          'active': _.get(activeChannel, '_id') === _.get(channel, '_id', null)\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 41\n        }\n      }, this.renderChannelAvatar(channel)), /*#__PURE__*/React.createElement(\"div\", {\n        className: className('chanel-info', {\n          'notify': _.get(channel, 'notify', null)\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 41\n        }\n      }, this.renderChannelTitle(channel)));\n    })), /*#__PURE__*/React.createElement(Picker, {\n      onEmojiClick: onEmojiClick,\n      skinTone: SKIN_TONE_MEDIUM_DARK,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolChat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Dropzone, {\n      onDrop: this.onDrop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 25\n      }\n    }, ({\n      getRootProps,\n      getInputProps\n    }) => /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CgSoftwareUpload, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 49\n      }\n    })))))), /*#__PURE__*/React.createElement(\"div\", {\n      ref: ref => this.messagesRef = ref,\n      className: \"messages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 25\n      }\n    }, messages.map((mess, index) => {\n      const user = _.get(mess, 'user');\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: `${mess.me ? 'message-me' : 'message'}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: _.get(user, 'avatar'),\n        alt: \"user-img\",\n        className: \"img-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 45\n        }\n      }, `${mess.me ? 'You' : _.get(mess, 'user.name')}`, \" say: \"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"message-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 45\n        }\n      }, `${mess.body}`.substring(0, 8) === \"uploads/\" ? // this will be either video or image \n      `${mess.body}`.substring(`${mess.body}`.length - 3, `${mess.body}`.length) === 'mp3' ? /*#__PURE__*/React.createElement(\"video\", {\n        style: {\n          maxWidth: '20rem'\n        },\n        src: `http://localhost:8080/${mess.body}`,\n        alt: \"video\",\n        type: \"video/mp4\",\n        controls: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 57\n        }\n      }) : /*#__PURE__*/React.createElement(\"img\", {\n        style: {\n          maxWidth: '20rem'\n        },\n        src: `http://localhost:8080/${mess.body}`,\n        alt: \"img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 57\n        }\n      }) : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 49\n        }\n      }, mess.body), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"timing\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 49\n        }\n      }, mess.timing))));\n    })), _.get(activeChannel, 'typing') && _.get(activeChannel, 'typier') !== _.get(me, '_id') ? /*#__PURE__*/React.createElement(\"div\", {\n      disabled: newMessage.length > 1,\n      className: \"typing-status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 114\n      }\n    }, \"Is Typing..\") : null, members.size > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 48\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      disabled: newMessage.length < 1,\n      className: \"message-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(CgSoftwareUpload, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"message\",\n      ref: input => this.input = input,\n      type: \"text\",\n      className: \"form-control\",\n      value: newMessage,\n      autoComplete: 'off',\n      placeholder: \"Type something interesting\",\n      onKeyUp: e => {\n        {\n          if (e.keyCode === 13 && !e.shiftKey) {\n            this.handleSubmit(e);\n          }\n        }\n        {\n          if (e.keyCode !== 13) {\n            this.sendTyping();\n          }\n        }\n      },\n      onChange: ({\n        target\n      }) => {\n        this.setState({\n          newMessage: target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(IconButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CgSoftwareUpload, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: newMessage.length < 1,\n      type: \"submit\",\n      className: \"send\",\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 33\n      }\n    }, \" Send \"))) : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 25\n      }\n    }, \"Members\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chanels\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 25\n      }\n    }, members.map((member, index) => {\n      const isOnline = _.get(member, 'online', false);\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"chanel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-img-channel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: _.get(member, 'avatar'),\n        alt: \"user-img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: className('user-status', {\n          'online': isOnline\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chanel-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 45\n        }\n      }, member.name), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 45\n        }\n      }, \"Joined: 2000 years ago\")), /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          store.removeMemberFromChannel(activeChannel, member);\n        },\n        className: \"icon-DelUser\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        style: {\n          color: \"rgb(200, 68, 20)\",\n          fontSize: \"20\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(MdDeleteForever, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 45\n        }\n      }))));\n    })))));\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/App3.js"],"names":["React","Component","className","Link","OrderedMap","_","ObjectID","IconButton","MdSettings","MdDeleteForever","CgSoftwareUpload","moment","UserBar","Dropzone","Picker","SKIN_TONE_MEDIUM_DARK","App3","constructor","props","onDrop","files","store","console","log","formData","FormData","append","upLoadfile","sendTyping","activeChannel","getActiveChannel","lastUpdateTime","Date","now","state","isTyping","setState","addTyping","startCheckingTyping","typingInterval","setInterval","stopCheckingTyping","clearInterval","renderChannelTitle","channel","members","getMembersFromChannel","names","forEach","user","name","get","push","title","join","handleOnClick","userId","channelId","addUserToChannel","searchUser","_onCreateChannel","e","preventDefault","currentUser","getCurrentUser","currentUserId","toString","_id","lastMessage","messages","isNew","created","typing","set","onCreateNewChannel","scrollMessagesToBottom","messagesRef","scrollTop","scrollHeight","handleSubmit","newMessage","trim","length","messageId","message","body","type","me","addMessage","_onResi","height","window","innerHeight","showSearchUser","componentWillUnmount","renderChannelAvatar","maxDisplay","total","size","avatars","map","index","componentDidUpdate","componentDidMount","addEventListener","removeEventListener","render","getMessagesFromChannel","channels","getChannels","usersList","getSearchUsers","onEmojiClick","event","emojiObject","emoji","style","resultSearch","avatar","searchTxt","startSearchUsers","color","setActiveChannelId","getRootProps","getInputProps","ref","mess","substring","maxWidth","timing","input","keyCode","shiftKey","target","value","member","isOnline","removeMemberFromChannel","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport defaultImg from '../images/Logosvg3.svg';\r\nimport className from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\nimport { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\nimport {ObjectID} from \"../helpers/objectid\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { MdSettings, MdDeleteForever } from 'react-icons/md';\r\nimport { CgSoftwareUpload } from 'react-icons/cg';\r\nimport moment from 'moment';\r\nimport { UserBar } from \"./UserBar\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Picker, { SKIN_TONE_MEDIUM_DARK } from 'emoji-picker-react';\r\n\r\n\r\nexport default class App3 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            height: window.innerHeight,\r\n            newMessage: '',\r\n            searchUser: '',\r\n            showSearchUser : false,\r\n            isTyping: false,\r\n        }\r\n\r\n    }\r\n\r\n    //  onEmojiClick = (event, emojiObject) => {\r\n    //     setChosenEmoji(emojiObject);\r\n    //   };\r\n\r\n        onDrop = (files) => {\r\n            const {store} = this.props;\r\n            console.log(files);\r\n            let formData = new FormData;\r\n            formData.append(\"file\", files[0]);\r\n            store.upLoadfile(formData);\r\n        }\r\n\r\n\r\n        componentWillUnmount() {\r\n            this.stopCheckingTyping()\r\n        }\r\n\r\n        sendTyping = () =>{\r\n            const { store } = this.props;\r\n            const activeChannel = store.getActiveChannel();\r\n            this.lastUpdateTime = Date.now()\r\n            if(!this.state.isTyping){\r\n                this.setState({isTyping:true});\r\n                store.addTyping(activeChannel, true);\r\n                this.startCheckingTyping();\r\n\r\n            }\r\n        }\r\n\r\n\t/*\r\n\t*\tstartCheckingTyping\r\n\t*\tStart an interval that checks if the user is typing.\r\n\t*/\r\n        startCheckingTyping = ()=>{\r\n            console.log(\"Typing\");\r\n            this.typingInterval = setInterval(()=>{\r\n                if((Date.now() - this.lastUpdateTime) > 350){\r\n                    this.setState({isTyping:false})\r\n                    this.stopCheckingTyping()\r\n                }\r\n            }, 300)\r\n        }\r\n\t/*\r\n\t*\tstopCheckingTyping\r\n\t*\tStart the interval from checking if the user is typing.\r\n\t*/\r\n        stopCheckingTyping = ()=>{\r\n            const { store } = this.props;\r\n            const activeChannel = store.getActiveChannel();\r\n            console.log(\"Stop Typing\");\r\n            if(this.typingInterval){\r\n                clearInterval(this.typingInterval)\r\n                store.addTyping(activeChannel, false);\r\n            // console.log(this.state.isTyping);\r\n            }\r\n        }\r\n\r\n\r\n    renderChannelAvatar(channel){\r\n        const {store} = this.props;\r\n\r\n        const members = store.getMembersFromChannel(channel);\r\n\r\n        const maxDisplay = 4;\r\n        const total = members.size > maxDisplay ? maxDisplay : members.size;\r\n\r\n        const avatars = members.map((user, index) => {\r\n\r\n\r\n\r\n            return index < maxDisplay ?  <img key={index} src={_.get(user, 'avatar')} alt={_.get(user, 'name')} /> : null\r\n\r\n        });\r\n\r\n\r\n        return <div className={className('channel-avatars', `channel-avatars-${total}`)}>{avatars}</div>\r\n    }\r\n    renderChannelTitle = (channel = null) => {\r\n        const { store } = this.props;\r\n        const members = store.getMembersFromChannel(channel);\r\n         const names = [];\r\n\r\n         members.forEach((user) => {\r\n             const name = _.get(user, 'name')\r\n             names.push(name);\r\n         });\r\n         let title = _.join(names, ', ');\r\n         if(!title && _.get(channel, 'isNew')){\r\n             title = 'New Mss';\r\n         }\r\n        return <h4>{title}</h4>\r\n    }\r\n   \r\n    handleOnClick = (user) => {\r\n       \r\n        const { store } =this.props;\r\n        const userId = _.get(user, '_id');\r\n        const channelId = _.get( store.getActiveChannel(),'_id')\r\n        store.addUserToChannel(channelId, userId);\r\n        this.setState({\r\n            searchUser: '',\r\n        })\r\n    }\r\n    _onCreateChannel = (e) => {\r\n        e.preventDefault()\r\n        const { store } =this.props;\r\n        const currentUser = store.getCurrentUser();\r\n        const currentUserId = _.get(currentUser, '_id');\r\n        const channelId = new ObjectID().toString();\r\n        const channel = {\r\n            _id: channelId,\r\n            title: \"\",\r\n            lastMessage: \"Let's a chat\",\r\n            members: new OrderedMap(),\r\n            messages: new OrderedMap(),\r\n            isNew: true,\r\n            userId: currentUserId,\r\n            created: new Date(),\r\n            typing: false,\r\n        };\r\n        channel.members = channel.members.set(currentUserId, true);\r\n        store.onCreateNewChannel(channel);\r\n    }\r\n    scrollMessagesToBottom = () => {\r\n        if(this.messagesRef){\r\n            this.messagesRef.scrollTop = this.messagesRef.scrollHeight;\r\n        }\r\n    }\r\n    // renderMessage(message){\r\n    //     const txt = _.get(message, 'body' , '');\r\n    //     const html = _.split(txt, '\\n').map((m, key) => {\r\n    //         return <p key={key} dangerouslySetInnerHTML={{ __html: m }}></p>\r\n    //     })\r\n\r\n    //         message.substring(0, 8) === \"uploads/\" ?\r\n    //             // this will be either video or image \r\n\r\n    //             message.substring(message.length - 3, message.length) === 'mp4' ?\r\n    //                 <video\r\n    //                     style={{ maxWidth: '200px' }}\r\n    //                     src={`http://localhost:3000/${message.body}`} alt=\"video\"\r\n    //                     type=\"video/mp4\" controls\r\n    //                 />\r\n    //                 :\r\n    //                 <img\r\n    //                     style={{ maxWidth: '200px' }}\r\n    //                     src={`http://localhost:5000/${message.body}`}\r\n    //                     alt=\"img\"\r\n    //                 />\r\n    //         :\r\n    //         <p>\r\n    //             {message.body}\r\n    //         </p>\r\n\r\n        \r\n        \r\n    //     return html;\r\n    // }\r\n    handleSubmit = (e) => {\r\n\r\n        const { newMessage } = this.state;\r\n        const { store } = this.props;\r\n        e.preventDefault();\r\n\r\n        if(_.trim(newMessage).length){\r\n            const messageId = new ObjectID().toString();\r\n            const channel = store.getActiveChannel();\r\n            const channelId = _.get(channel , '_id', null);\r\n            const currentUser = store.getCurrentUser();\r\n            const message = {\r\n                _id: messageId,\r\n                channelId: channelId,\r\n                body : newMessage,\r\n                userId: _.get(currentUser, '_id'),\r\n                type:\"text\",\r\n                me: true,\r\n            };\r\n            \r\n            store.addMessage(messageId, message);\r\n            this.setState({newMessage: \"\"});\r\n        }\r\n        this.setState({newMessage: \"\"});\r\n\r\n    };\r\n    _onResi = () => {\r\n        this.setState({height: window.innerHeight});\r\n    }\r\n    // addTestMessages = () => {\r\n    //     const {store} = this.props\r\n\r\n      \r\n    //     for(let i = 0; i < 20; i++){\r\n    //         let isMe = false;\r\n    //         if(i % 2 === 0) {\r\n    //             isMe = true;\r\n    //         }\r\n    //         const newMsg = {\r\n    //             _id: `${i}`,\r\n    //             author: `Author: ${i}`,\r\n    //             body: `The body of message ${i}`,\r\n    //             avatar: defaultImg,\r\n    //             me: isMe,\r\n    //             timing: '0:00'\r\n    //         }\r\n    //         store.addMessage(i, newMsg);\r\n\r\n    //     }\r\n\r\n    //     for (let c = 0; c<10; c++){\r\n    //         const newChannel ={\r\n    //             _id: `${c}`,\r\n    //             title: `Channel title ${c}`,\r\n    //             lastMessage: `Hey there is.. ${c}`,\r\n    //             members: new OrderedMap({\r\n    //                 '1': true,\r\n    //                 '2': true,\r\n    //             }),\r\n    //             messages: new OrderedMap(),\r\n    //             created: new Date(),\r\n    //         }\r\n    //         const moreMsgId =`${c + 1}`;\r\n    //         const msgId = `${c}`;\r\n    //         newChannel.messages = newChannel.messages.set(msgId, true);\r\n    //         newChannel.messages = newChannel.messages.set(moreMsgId, true);\r\n    //         store.addChannel(c, newChannel);\r\n    //     }\r\n\r\n    // }\r\n    componentDidUpdate(){\r\n        this.scrollMessagesToBottom();\r\n        console.log(\"CDidUpdate\");\r\n    }\r\n    componentDidMount(){\r\n        window.addEventListener('resize', this._onResi);\r\n        // this.addTestMessages();\r\n        console.log(\"CDidMount\");\r\n    }\r\n    componentWillUnmount(){\r\n        window.removeEventListener('resize', this._onResi);\r\n        console.log(\"CWillUnMount\");\r\n    }\r\n    \r\n    render() {\r\n\r\n        const { height, newMessage, isTyping} = this.state;\r\n        const { store } = this.props;\r\n        // const isConnected = store.isConnected();\r\n        const activeChannel = store.getActiveChannel();\r\n        const messages = store.getMessagesFromChannel(activeChannel);\r\n        const members = store.getMembersFromChannel(activeChannel);\r\n        const channels = store.getChannels();\r\n        const usersList = store.getSearchUsers();\r\n        const me = store.getCurrentUser();\r\n\r\n        const onEmojiClick = (event, emojiObject) => {\r\n            this.setState({newMessage:`${emojiObject.emoji}`});\r\n            console.log(`${emojiObject.emoji}`);\r\n        }\r\n    \r\n     \r\n        const style = {\r\n            height: height,\r\n        }\r\n        const resultSearch = () => {\r\n\r\n                return (\r\n                    <div className=\"search-user\">\r\n                        <div className=\"user-list\">\r\n                        {usersList.map((user, index) =>{\r\n                            return <div onClick={() => this.handleOnClick(user)} key={index} className=\"user\">\r\n                            <img src={user.avatar} alt={user.name} />\r\n                            <span>{user.name}</span>\r\n                        </div>\r\n                        })\r\n                        } \r\n                        </div>\r\n                    </div>\r\n                )\r\n        }\r\n        return (\r\n            <div style={style} className=\"app3\">\r\n               <div className=\"chat-header\">\r\n                    <div className=\"header-left\">\r\n                        <div className=\"action\">\r\n                            <Link onClick={(e) => this._onCreateChannel(e)} className=\"btn-primary\">AddNew</Link>\r\n                        </div>\r\n                    </div>\r\n                    {_.get(activeChannel, 'isNew') ? <div className=\"toolbar\">\r\n                        <form className=\"tool\">\r\n                            <textarea\r\n                            type=\"text\"\r\n                            value ={ this.state.searchUser }\r\n                            placeholder=\"To UserName/Email\"\r\n                            onChange = {(e) => {\r\n                                const searchTxt = _.get(e, 'target.value');\r\n                                this.setState({\r\n                                    searchUser: searchTxt,\r\n                                }, () => {\r\n                                    store.startSearchUsers(searchTxt);\r\n                                })\r\n                                \r\n                            }}\r\n                            />\r\n                        </form>\r\n                        {resultSearch()}\r\n                        </div> : null }\r\n\r\n                    <div className=\"header-mid\">\r\n                        { this.renderChannelTitle(activeChannel) }\r\n                    </div>\r\n                    <div className=\"header-right\">\r\n                        <UserBar store = { store } />\r\n                        <div className=\"toolsRight-bar\">\r\n                        <IconButton  style={{ color: \"rgba(0, 0, 0, 0.5)\"}}>\r\n                            <MdSettings />\r\n                        </IconButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chat-main\">\r\n                    <div className=\"sidebar-left\">\r\n                        <div className=\"chanels\">\r\n                            {channels.map((channel, index) =>{\r\n                                return (\r\n                                    <div onClick= {(index) => {\r\n                                        store.setActiveChannelId(channel._id);\r\n                                    }} key={channel._id} className={className('chanel', {'active' : _.get(activeChannel, '_id') === _.get(channel, '_id', null)})}>\r\n                                        <div className=\"user-img\">\r\n                                            {this.renderChannelAvatar(channel)}\r\n                                        </div>\r\n                                        <div className={className('chanel-info',{'notify': _.get(channel, 'notify', null)})}>\r\n                                            {this.renderChannelTitle(channel)}\r\n                                            {/* <p>{channel.lastMessage}</p> */}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                            \r\n                        </div>\r\n                        <Picker  onEmojiClick={onEmojiClick} skinTone={SKIN_TONE_MEDIUM_DARK}/>\r\n                    </div>\r\n                    <div className=\"chat-content\">\r\n                        <div className=\"toolChat\">\r\n                        <Dropzone onDrop={this.onDrop}>\r\n                                    {({getRootProps, getInputProps}) => (\r\n                                        <section>\r\n                                        <div {...getRootProps()}>\r\n                                            <input {...getInputProps()} />\r\n                                            <IconButton>\r\n                                                <CgSoftwareUpload />\r\n                                            </IconButton>\r\n                                        </div>\r\n                                        </section>\r\n                                    )}\r\n                                    </Dropzone>\r\n                        </div>\r\n                        <div ref={(ref) => this.messagesRef = ref} className=\"messages\">\r\n                            { \r\n                                messages.map((mess, index) => { \r\n                                    const user = _.get(mess, 'user');\r\n                                    return (\r\n                                        <div key={index} className={`${mess.me ? 'message-me' : 'message'}`}>\r\n\r\n                                        <img src={_.get(user, 'avatar')} alt=\"user-img\" className=\"img-user\"></img>\r\n\r\n                                        <div className=\"message-body\">\r\n\r\n                                            <div className=\"username\">{`${mess.me ? 'You' : _.get(mess, 'user.name')}`} say: </div>\r\n                                            \r\n                                            <p className=\"message-text\">\r\n                                                 { `${mess.body}`.substring(0, 8) === \"uploads/\" ?\r\n                                                    // this will be either video or image \r\n\r\n                                                    (`${mess.body}`).substring((`${mess.body}`).length - 3, (`${mess.body}`).length) === 'mp3' ? \r\n                                                        <video\r\n                                                            style={{ maxWidth: '20rem' }}\r\n                                                            src={`http://localhost:8080/${mess.body}`} alt=\"video\"\r\n                                                            type=\"video/mp4\" controls\r\n                                                        />\r\n                                                        :\r\n                                                        <img\r\n                                                            style={{ maxWidth: '20rem' }}\r\n                                                            src={`http://localhost:8080/${mess.body}`}\r\n                                                            alt=\"img\"\r\n                                                        />\r\n                                                :\r\n                                                <p>{mess.body}</p>\r\n                                                } \r\n                                                {/* { this.renderMessage(mess) } */}\r\n                                                <p className=\"timing\">{mess.timing}</p>\r\n\r\n                                            </p>\r\n                                        </div>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                          \r\n                        </div>\r\n                        {_.get(activeChannel, 'typing') && _.get(activeChannel, 'typier') !== _.get(me, '_id') ? <div  disabled = { newMessage.length > 1 } className=\"typing-status\">Is Typing..</div> : null}\r\n                        {   members.size > 0 ? <div className=\"message-input\">\r\n                            <form \r\n                                onSubmit= { this.handleSubmit }\r\n                                disabled = { newMessage.length < 1 }\r\n                                className=\"message-form\">\r\n                                 <IconButton>\r\n                                    <CgSoftwareUpload />\r\n                                </IconButton>\r\n                                <textarea  \r\n                                    id = \"message\"\r\n                                    ref={(input)=> this.input = input}\r\n                                    type = \"text\"\r\n                                    className = \"form-control\"\r\n                                    value = { newMessage }\r\n                                    autoComplete = {'off'}\r\n                                    placeholder = \"Type something interesting\"\r\n                                    onKeyUp = { (e) => { \r\n                                        { if(e.keyCode === 13 && !e.shiftKey) \r\n                                            { this.handleSubmit(e); }}\r\n                                        { if( e.keyCode !== 13 ){ this.sendTyping() }}\r\n                                        }\r\n                                    }\r\n                                    onChange = {\r\n                                    \t({target})=>{\r\n                                    \t\tthis.setState({newMessage:target.value})\r\n                                    \t}\r\n                                    }\r\n                                    />\r\n                                    \r\n                                <IconButton>\r\n                                    <CgSoftwareUpload />\r\n                                </IconButton>\r\n                               \r\n                                <button\r\n                                    disabled = { newMessage.length < 1 }\r\n                                    type = \"submit\"\r\n                                    className = \"send\"\r\n                                    onClick = { this.handleSubmit }\r\n                                > Send </button>\r\n                            </form>\r\n\t\t\t                </div>\r\n                            :\r\n                            null\r\n                        }\r\n                    </div>\r\n                   \r\n                    <div className=\"sidebar-right\">\r\n                        <div className=\"title-right\">Members</div>\r\n                        <div className=\"chanels\">\r\n                            { members.map((member, index) => {\r\n\r\n                                const isOnline = _.get(member, 'online', false);\r\n                                return (\r\n                                    <div key ={ index } className=\"chanel\">\r\n\r\n                                        <div className=\"user-img-channel\">\r\n                                            <img src={_.get(member, 'avatar')} alt=\"user-img\" />\r\n                                            <span className={className('user-status', {'online': isOnline})}></span>\r\n                                        </div>\r\n                                        <div className=\"chanel-info\">\r\n                                            <h4>{ member.name }</h4>\r\n                                            <p>Joined: 2000 years ago</p>\r\n                                        </div>\r\n                                        <div onClick = {() => {\r\n                                            store.removeMemberFromChannel(activeChannel, member);\r\n                                        }}\r\n                                         className=\"icon-DelUser\">\r\n                                        <IconButton  style={{ color: \"rgb(200, 68, 20)\", fontSize: \"20\"}}>\r\n                                            <MdDeleteForever />\r\n                                        </IconButton>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                </div>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}