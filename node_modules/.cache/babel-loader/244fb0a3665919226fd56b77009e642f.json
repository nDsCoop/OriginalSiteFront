{"ast":null,"code":"import crypto from 'crypto';\nimport CryptoJS from 'crypto-js';\nconst keySecret = '3zTvzr3p67VC61jmV54rIYu1545x4TlY';\nconst algorithm = 'aes-256-ctr';\nconst keySecret2 = 'vOVH6sdmpNWjRRIqCc7rdxs01lwHzfr3';\nconst iv = crypto.randomBytes(16);\nexport const encrypt = text => {\n  try {\n    const salt = CryptoJS.lib.WordArray.random(128 / 8);\n    const iv = CryptoJS.lib.WordArray.random(128 / 8);\n    const encrypted = CryptoJS.AES.encrypt(text, CryptoJS.PBKDF2(keySecret, salt, {\n      keySize: 256 / 32,\n      iterations: 100\n    })\n    /* key */\n    , {\n      iv: iv,\n      padding: CryptoJS.pad.Pkcs7,\n      mode: CryptoJS.mode.CBC\n    });\n    const transitmessage = salt.toString() + iv.toString() + encrypted.toString();\n    return transitmessage;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const decrypt = text => {\n  try {\n    const key = CryptoJS.PBKDF2(keySecret, CryptoJS.enc.Hex.parse(text.substr(0, 32))\n    /* Salt */\n    , {\n      keySize: 256 / 32,\n      iterations: 100\n    });\n    const decrypted = CryptoJS.AES.decrypt(text.substring(64)\n    /* encrypted */\n    , key, {\n      iv: CryptoJS.enc.Hex.parse(text.substr(32, 32))\n      /* iv */\n      ,\n      padding: CryptoJS.pad.Pkcs7,\n      mode: CryptoJS.mode.CBC\n    });\n    return decrypted.toString(CryptoJS.enc.Utf8);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const encrypt2 = text => {\n  try {\n    const cipher = crypto.createCipheriv(algorithm, keySecret2, iv);\n    const encrypted = Buffer.concat([cipher.update(text), cipher.final()]);\n    return {\n      iv: iv.toString('hex'),\n      content: encrypted.toString('hex')\n    };\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const decrypt2 = hash => {\n  try {\n    const decipher = crypto.createDecipheriv(algorithm, keySecret2, Buffer.from(hash.iv, 'hex'));\n    const decrpyted = Buffer.concat([decipher.update(Buffer.from(hash.content, 'hex')), decipher.final()]);\n    return decrpyted.toString();\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/helpers/en_deCrypt.js"],"names":["crypto","CryptoJS","keySecret","algorithm","keySecret2","iv","randomBytes","encrypt","text","salt","lib","WordArray","random","encrypted","AES","PBKDF2","keySize","iterations","padding","pad","Pkcs7","mode","CBC","transitmessage","toString","err","console","log","decrypt","key","enc","Hex","parse","substr","decrypted","substring","Utf8","encrypt2","cipher","createCipheriv","Buffer","concat","update","final","content","decrypt2","hash","decipher","createDecipheriv","from","decrpyted"],"mappings":"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","sourcesContent":["\r\nimport crypto from 'crypto';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nconst keySecret = '3zTvzr3p67VC61jmV54rIYu1545x4TlY';\r\nconst algorithm = 'aes-256-ctr';\r\nconst keySecret2 = 'vOVH6sdmpNWjRRIqCc7rdxs01lwHzfr3';\r\nconst iv = crypto.randomBytes(16);\r\n\r\nexport const encrypt = (text) => {\r\n    try{\r\n\r\n        const salt = CryptoJS.lib.WordArray.random(128 / 8)\r\n        const iv = CryptoJS.lib.WordArray.random(128 / 8)\r\n        const encrypted = CryptoJS.AES.encrypt(text, CryptoJS.PBKDF2(keySecret, salt, { keySize: 256 / 32, iterations: 100 }) /* key */, { iv: iv, padding: CryptoJS.pad.Pkcs7, mode: CryptoJS.mode.CBC })\r\n        const transitmessage = salt.toString() + iv.toString() + encrypted.toString();\r\n        return transitmessage;\r\n\r\n    }\r\n    catch (err) \r\n    {\r\n        console.log(err)\r\n    }\r\n   \r\n}\r\n\r\nexport const decrypt = (text) => {\r\n    try{\r\n\r\n        const key = CryptoJS.PBKDF2(keySecret, CryptoJS.enc.Hex.parse(text.substr(0, 32)) /* Salt */, { keySize: 256 / 32, iterations: 100 })\r\n        const decrypted = CryptoJS.AES.decrypt(text.substring(64) /* encrypted */, key, { iv: CryptoJS.enc.Hex.parse(text.substr(32, 32)) /* iv */, padding: CryptoJS.pad.Pkcs7, mode: CryptoJS.mode.CBC })\r\n        return decrypted.toString(CryptoJS.enc.Utf8)\r\n\r\n    }\r\n    catch (err)\r\n    {\r\n        console.log(err)\r\n    }\r\n   \r\n}\r\n\r\nexport const encrypt2 = (text) => {\r\n    try{\r\n\r\n        const cipher = crypto.createCipheriv(algorithm, keySecret2, iv);\r\n        const encrypted = Buffer.concat([cipher.update(text), cipher.final()]);\r\n        return {\r\n            iv: iv.toString('hex'),\r\n            content: encrypted.toString('hex')\r\n\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n  \r\n}\r\n\r\nexport const decrypt2 = (hash) => {\r\n    try {\r\n\r\n        const decipher = crypto.createDecipheriv(algorithm, keySecret2, Buffer.from(hash.iv, 'hex'));\r\n        const decrpyted = Buffer.concat([decipher.update(Buffer.from(hash.content, 'hex')), decipher.final()]);\r\n        return decrpyted.toString();\r\n\r\n    }\r\n    catch (err) {\r\n        console.log(err)\r\n    }\r\n   \r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}