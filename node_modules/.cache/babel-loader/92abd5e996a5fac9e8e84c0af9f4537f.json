{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\header\\\\SearchBox.js\";\nimport React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { InputBase, IconButton, Popper, CircularProgress, Grid } from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { GlobalContext } from \"../GlobalState\";\nimport suggestSearch from \"../../apis/suggestSearch\";\nimport AutoSearchResult from \"./AutoSearchResult\";\nimport youtubeSearch from \"../../apis/youtubeSearch\";\n\nconst SearchBox = ({\n  history,\n  location\n}) => {\n  let params = new URLSearchParams(location.search);\n  const [{\n    searchState\n  }, dispatch] = useContext(GlobalContext);\n  const setSearchState = useCallback(data => {\n    dispatch({\n      type: \"setSearchState\",\n      snippet: data\n    });\n  }, [dispatch]);\n  const setSearchResult = useCallback(data => {\n    console.log(data);\n    dispatch({\n      type: \"setSearchResult\",\n      snippet: data\n    });\n  }, [dispatch]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [autoSearchData, setAutoSearch] = useState(\"\");\n  const [ytSearchQuery, setYtSearchQuery] = useState(null); // toggle popper\n\n  const [isPopperOpen, setPopper] = useState(true);\n  console.log(\"search box re rendered\"); // get back the selected search data\n\n  const onSearchSelect = result => {\n    setSearchQuery(result);\n    setYtSearchQuery(result);\n    setSearchState(\"searching\");\n    history.push({\n      pathname: \"/search\",\n      search: `?q=${result}`\n    });\n  }; // when user hits enter then also fetch the data from yt api\n\n\n  const onSearchSubmit = e => {\n    e.preventDefault();\n    console.log(e.target.lastChild);\n    e.target.lastChild.lastChild.blur();\n    setSearchState(\"searching\");\n    setYtSearchQuery(searchQuery);\n    history.push({\n      pathname: \"/search\",\n      search: `?q=${searchQuery}`\n    });\n  }; // for controlled input change\n\n\n  const onChange = e => {\n    setSearchQuery(e.target.value);\n    getAutocomplete();\n  }; // get autocomplete data form api\n\n\n  const getAutocomplete = async () => {\n    const response = await suggestSearch.get(\"\", {\n      params: {\n        q: searchQuery\n      }\n    });\n    setAutoSearch(response.data[1]);\n  }; // get youtube search result from api\n\n\n  useEffect(() => {\n    const searchYt = async data => {\n      const res = await youtubeSearch.get(\"/search\", {\n        params: {\n          q: data,\n          maxResults: 15\n        }\n      });\n      setSearchResult(res.data.items);\n      setSearchState(\"completed\");\n    }; // only search if there is any value\n\n\n    if (ytSearchQuery && ytSearchQuery !== \"\") {\n      searchYt(ytSearchQuery);\n    } // console.log(ytSearchQuery);\n\n  }, [ytSearchQuery, setSearchResult, setSearchState]);\n  useEffect(() => {\n    console.log(\"search state\", searchState);\n  }, [searchState]);\n  useEffect(() => {\n    // Listen for changes to the current location.\n    const query = params.get(\"q\");\n\n    if (query) {\n      setYtSearchQuery(query);\n      setSearchQuery(query);\n      setSearchState(\"searching\");\n      console.log(\"changing query to\", query);\n    } // const unlisten = history.listen(location => {\n    //   // setYtSearchQuery(params.get(\"q\"));\n    //   // we will se the q from params\n    //   // location is an object like window.location\n    //   const path = location.pathname;\n    //   // if (path.slice(1, 7) === \"search\" || path.slice(1, 5) === \"song\") {\n    //   //   setSearchState(\"searched\");\n    //   // } else {\n    //   //   setSearchState(\"home\");\n    //   // }\n    // });\n\n  }, [setSearchState, setYtSearchQuery]); // show loading icon while we fetch the results from api\n\n  const popperResult = () => {\n    switch (searchState) {\n      case \"searching\":\n        return /*#__PURE__*/React.createElement(Grid, {\n          style: {\n            height: \"100vh\"\n          },\n          container: true,\n          justify: \"center\",\n          alignItems: \"center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(CircularProgress, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }\n        }));\n\n      case \"clicked\":\n        return /*#__PURE__*/React.createElement(AutoSearchResult, {\n          results: autoSearchData,\n          onSearchSelect: onSearchSelect,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 11\n          }\n        });\n\n      case \"completed\":\n        setPopper(false);\n        break;\n\n      default:\n        break;\n    }\n\n    console.log(\"Function ran\");\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: () => {\n      setSearchState(\"home\");\n\n      if (history.location.pathname === \"/search\") {\n        history.goBack();\n      } // only go back if u have searched something\n\n    },\n    color: \"inherit\",\n    \"aria-label\": \"Menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ArrowBack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      width: \"100%\"\n    },\n    onSubmit: e => onSearchSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputBase, {\n    fullWidth: true,\n    placeholder: \"Search...\",\n    autoFocus: true,\n    style: {\n      color: \"#fff\",\n      paddingLeft: \"16px\"\n    },\n    value: searchQuery,\n    onChange: onChange // on click we will show popper\n    ,\n    onClick: () => {\n      setSearchState(\"clicked\");\n      setPopper(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Popper, {\n    className: \"searchPopper\",\n    open: isPopperOpen,\n    anchorEl: document.getElementById(\"navbar\"),\n    popperOptions: {\n      modifiers: {\n        preventOverflow: {\n          padding: 0\n        }\n      }\n    },\n    placement: \"bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, popperResult));\n};\n\nexport default withRouter(SearchBox);","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/header/SearchBox.js"],"names":["React","useContext","useState","useEffect","useCallback","withRouter","InputBase","IconButton","Popper","CircularProgress","Grid","ArrowBack","GlobalContext","suggestSearch","AutoSearchResult","youtubeSearch","SearchBox","history","location","params","URLSearchParams","search","searchState","dispatch","setSearchState","data","type","snippet","setSearchResult","console","log","searchQuery","setSearchQuery","autoSearchData","setAutoSearch","ytSearchQuery","setYtSearchQuery","isPopperOpen","setPopper","onSearchSelect","result","push","pathname","onSearchSubmit","e","preventDefault","target","lastChild","blur","onChange","value","getAutocomplete","response","get","q","searchYt","res","maxResults","items","query","popperResult","height","goBack","width","color","paddingLeft","document","getElementById","modifiers","preventOverflow","padding"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport {\n  InputBase,\n  IconButton,\n  Popper,\n  CircularProgress,\n  Grid\n} from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\n\nimport { GlobalContext } from \"../GlobalState\";\nimport suggestSearch from \"../../apis/suggestSearch\";\nimport AutoSearchResult from \"./AutoSearchResult\";\nimport youtubeSearch from \"../../apis/youtubeSearch\";\n\nconst SearchBox = ({ history, location }) => {\n  let params = new URLSearchParams(location.search);\n\n  const [{ searchState }, dispatch] = useContext(GlobalContext);\n\n  const setSearchState = useCallback(\n    data => {\n      dispatch({ type: \"setSearchState\", snippet: data });\n    },\n    [dispatch]\n  );\n\n  const setSearchResult = useCallback(\n    data => {\n      console.log(data);\n      dispatch({ type: \"setSearchResult\", snippet: data });\n    },\n    [dispatch]\n  );\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [autoSearchData, setAutoSearch] = useState(\"\");\n\n  const [ytSearchQuery, setYtSearchQuery] = useState(null);\n\n  // toggle popper\n  const [isPopperOpen, setPopper] = useState(true);\n\n  console.log(\"search box re rendered\");\n\n  // get back the selected search data\n  const onSearchSelect = result => {\n    setSearchQuery(result);\n    setYtSearchQuery(result);\n    setSearchState(\"searching\");\n    history.push({ pathname: \"/search\", search: `?q=${result}` });\n  };\n\n  // when user hits enter then also fetch the data from yt api\n  const onSearchSubmit = e => {\n    e.preventDefault();\n    console.log(e.target.lastChild);\n    e.target.lastChild.lastChild.blur();\n    setSearchState(\"searching\");\n    setYtSearchQuery(searchQuery);\n    history.push({ pathname: \"/search\", search: `?q=${searchQuery}` });\n  };\n\n  // for controlled input change\n  const onChange = e => {\n    setSearchQuery(e.target.value);\n    getAutocomplete();\n  };\n\n  // get autocomplete data form api\n  const getAutocomplete = async () => {\n    const response = await suggestSearch.get(\"\", {\n      params: {\n        q: searchQuery\n      }\n    });\n    setAutoSearch(response.data[1]);\n  };\n\n  // get youtube search result from api\n  useEffect(() => {\n    const searchYt = async data => {\n      const res = await youtubeSearch.get(\"/search\", {\n        params: {\n          q: data,\n          maxResults: 15\n        }\n      });\n      setSearchResult(res.data.items);\n      setSearchState(\"completed\");\n    };\n    // only search if there is any value\n    if (ytSearchQuery && ytSearchQuery !== \"\") {\n      searchYt(ytSearchQuery);\n    }\n    // console.log(ytSearchQuery);\n  }, [ytSearchQuery, setSearchResult, setSearchState]);\n\n  useEffect(() => {\n    console.log(\"search state\", searchState);\n  }, [searchState]);\n\n  useEffect(() => {\n    // Listen for changes to the current location.\n    const query = params.get(\"q\");\n    if (query) {\n      setYtSearchQuery(query);\n      setSearchQuery(query);\n      setSearchState(\"searching\");\n      console.log(\"changing query to\", query);\n    }\n\n    // const unlisten = history.listen(location => {\n    //   // setYtSearchQuery(params.get(\"q\"));\n    //   // we will se the q from params\n    //   // location is an object like window.location\n    //   const path = location.pathname;\n    //   // if (path.slice(1, 7) === \"search\" || path.slice(1, 5) === \"song\") {\n    //   //   setSearchState(\"searched\");\n    //   // } else {\n    //   //   setSearchState(\"home\");\n    //   // }\n    // });\n  }, [setSearchState, setYtSearchQuery]);\n\n  // show loading icon while we fetch the results from api\n\n  const popperResult = () => {\n    switch (searchState) {\n      case \"searching\":\n        return (\n          <Grid\n            style={{ height: \"100vh\" }}\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <CircularProgress />\n          </Grid>\n        );\n      case \"clicked\":\n        return (\n          <AutoSearchResult\n            results={autoSearchData}\n            onSearchSelect={onSearchSelect}\n          />\n        );\n      case \"completed\":\n        setPopper(false);\n        break;\n      default:\n        break;\n    }\n    console.log(\"Function ran\");\n  };\n\n  return (\n    <>\n      <IconButton\n        onClick={() => {\n          setSearchState(\"home\");\n          if (history.location.pathname === \"/search\") {\n            history.goBack();\n          }\n          // only go back if u have searched something\n        }}\n        color=\"inherit\"\n        aria-label=\"Menu\"\n      >\n        <ArrowBack />\n      </IconButton>\n      <form style={{ width: \"100%\" }} onSubmit={e => onSearchSubmit(e)}>\n        <InputBase\n          fullWidth\n          placeholder=\"Search...\"\n          autoFocus\n          style={{ color: \"#fff\", paddingLeft: \"16px\" }}\n          value={searchQuery}\n          onChange={onChange}\n          // on click we will show popper\n          onClick={() => {\n            setSearchState(\"clicked\");\n            setPopper(true);\n          }}\n        />\n      </form>\n\n      <Popper\n        className=\"searchPopper\"\n        open={isPopperOpen}\n        anchorEl={document.getElementById(\"navbar\")}\n        popperOptions={{\n          modifiers: {\n            preventOverflow: {\n              padding: 0\n            }\n          }\n        }}\n        placement=\"bottom\"\n      >\n        {popperResult}\n      </Popper>\n    </>\n  );\n};\n\nexport default withRouter(SearchBox);\n"]},"metadata":{},"sourceType":"module"}