{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\player\\\\MainPlayer.js\";\nimport React, { useEffect, useContext, useState, useRef } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSwipeable } from \"react-swipeable\";\nimport PlayPauseButton from \"./PlayPauseButton\";\nimport NextButton from \"./NextButton\";\nimport PreviousButton from \"./PreviousButton\";\nimport MusicArt from \"./MusicArt\";\nimport TimelineController from \"./TimelineController\";\nimport TopBar from \"./TopBar\"; // import MiniMusicArt from \"./MiniMusicArt\";\n\nimport RelatedVideos from \"../RelatedVideos\";\nimport getAudioLink from './apis/getAudioLink';\nimport youtubeSearch from \"./apis/youtubeSearch\";\nimport { updatePlayingSong } from \"./external/saveSong\";\nimport \"./external/saveCountry\";\nimport { Context2 } from \"../../Context2\"; // window.onbeforeunload = function() {\n//   return 'You have unsaved changes!';\n// }\n\nlet relatedVideosVar;\n\nconst MainPlayer = ({\n  location,\n  history\n}) => {\n  let params = new URLSearchParams(location.search);\n  const [{\n    currentVideoSnippet,\n    themeSelectValue\n  }, dispatch] = useContext(Context2);\n\n  const setCurrentVideoSnippet = data => {\n    dispatch({\n      type: \"setCurrentVideoSnippet\",\n      snippet: data\n    });\n  };\n\n  const [relatedVideos, setRelatedVideos] = useState([]);\n  const [isItFromPlaylist, setIsItFromPlaylist] = useState(false); //\n\n  const [audioState, setAudioState] = useState(null); // there will be 4 states\n  // loading, loaded, playing, paused\n\n  const [playerState, setPlayerState] = useState(null); // there will be 3 states\n  // maximized, minimized, playlist\n\n  const [minimized, setMinimized] = useState(true);\n  const [isRepeatOn, setIsRepeatOn] = useState(false);\n  const [rating, setRating] = useState(\"none\");\n  const [isNextFromMini, setIsNextFromMini] = useState(false);\n  const [audioURL, setAudioURL] = useState(null);\n  const body = document.querySelector(\"body\");\n  const audioPlayer = useRef();\n  const player = audioPlayer.current;\n\n  const setupMediaSessions = () => {\n    if (\"mediaSession\" in navigator) {\n      console.log(\"navigator setupped\");\n      navigator.mediaSession.metadata = new window.MediaMetadata({\n        title: currentVideoSnippet.title,\n        artist: currentVideoSnippet.channelTitle,\n        artwork: [{\n          src: currentVideoSnippet.sdThumbnail,\n          sizes: \"512x512\",\n          type: \"image/png\"\n        }]\n      });\n      navigator.mediaSession.setActionHandler(\"play\", () => {\n        /* Code excerpted. */\n        playAudio();\n      });\n      navigator.mediaSession.setActionHandler(\"pause\", () => {\n        /* Code excerpted. */\n        audioPlayer.current.pause();\n      });\n      navigator.mediaSession.setActionHandler(\"previoustrack\", () => {\n        playPrevious();\n      });\n      navigator.mediaSession.setActionHandler(\"nexttrack\", () => {\n        playNext();\n      });\n    }\n  };\n\n  const playAudio = () => {\n    audioPlayer.current.play().then(_ => {\n      // Automatic playback started!\n      // Show playing UI.\n      console.log(\"audio played auto\");\n      setupMediaSessions();\n    }).catch(error => {\n      // Auto-play was prevented\n      // Show paused UI.\n      console.log(\"playback prevented\");\n      setAudioState(\"paused\");\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"state changed triggedred\");\n\n    const getAudio = async data => {\n      // audioPlayer.current.src = \"\";\n      // maximize the player every time id changes\n      // only if playlist is not open\n      if (playerState !== \"playlist\" && !isNextFromMini) {\n        setPlayerState(\"maximized\"); //\n\n        console.log(\"maximizing here yar and state is\", playerState);\n      }\n\n      setTimeout(() => {\n        setIsNextFromMini(false); // change it back to false\n      }, 200);\n      setAudioState(\"loading\");\n      const res = await getAudioLink.get(\"/song\", {\n        params: {\n          id: data\n        }\n      }); // set the audio data\n\n      const proxyURL = \"https://server.ylight.xyz/proxy/\";\n      audioPlayer.current.src = res.data;\n      playAudio(); // var audioContext = new AudioContext();\n      // var track = audioContext.createMediaElementSource(audioPlayer.current);\n      // track.connect(audioContext.destination);\n    };\n\n    if (currentVideoSnippet.audio) {\n      console.log(\"yes its downloaded we will play from local file\"); // maximize the player every time id changes\n\n      setPlayerState(\"maximized\");\n      setAudioState(\"loading\");\n      audioPlayer.current.src = window.URL.createObjectURL(currentVideoSnippet.audio);\n      playAudio();\n    } else if (currentVideoSnippet.id) {\n      getAudio(currentVideoSnippet.id);\n    }\n\n    if (currentVideoSnippet.id) {\n      const searchRelated = async () => {\n        const res = await youtubeSearch.get(\"/search\", {\n          params: {\n            relatedToVideoId: currentVideoSnippet.id,\n            maxResults: 10\n          }\n        });\n        setRelatedVideos(res.data.items);\n      }; // if its not from the mini next button then only change history\n\n\n      if (!isNextFromMini) {\n        // if the click is not from playlist then only we will search for realated video\n        if (!isItFromPlaylist) {\n          // console.log(\"searching for related vids\", relatedVideos);\n          // if player is in playlist mode we will just replace history else push it\n          if (location.pathname !== \"/play\") {\n            // prevent duplicating history\n            history.push(`/play?id=${currentVideoSnippet.id}`);\n          }\n\n          searchRelated();\n        } else {\n          history.replace(`/play?id=${currentVideoSnippet.id}`);\n          setIsItFromPlaylist(false);\n        }\n      }\n\n      console.log(currentVideoSnippet);\n    } // set rating to none when we load new song\n\n\n    setRating(\"none\");\n  }, [currentVideoSnippet, setIsItFromPlaylist]); // useEffect(() => {\n  //   console.log(\"from playlist\", isItFromPlaylist);\n  // }, [isItFromPlaylist]);\n\n  useEffect(() => {\n    relatedVideosVar = relatedVideos;\n    console.log(\"related\", relatedVideos);\n  }, [relatedVideos]);\n  useEffect(() => {\n    console.log(\"isnext state\", isNextFromMini);\n  }, [isNextFromMini]);\n\n  const setAudioSrcAndPlay = async id => {\n    const res = await getAudioLink.get(\"/song\", {\n      params: {\n        id: id\n      }\n    }); // set the audio data\n\n    audioPlayer.current.src = res.data;\n    playAudio();\n  };\n\n  const setVideoSnippet = video => {\n    setCurrentVideoSnippet({\n      id: video.id.videoId,\n      title: video.snippet.title,\n      channelTitle: video.snippet.channelTitle,\n      maxThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/hqdefault.jpg`,\n      sdThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/sddefault.jpg` // this is the url of the max resolution of thumbnail\n\n    }); // if window is minimized then only we will run this function\n\n    if (document.hidden) {\n      setAudioSrcAndPlay(video.id.videoId);\n    }\n  };\n\n  const playNext = () => {\n    // also set this is from playlist\n    setIsItFromPlaylist(true);\n    console.log(\"play next related videos\", relatedVideos); // find the index of playing song in the playlist\n\n    const currentIndex = relatedVideosVar.findIndex(video => video.id.videoId === currentVideoSnippet.id);\n    console.log(\"the current index is\", currentIndex);\n    let video;\n    console.log(\"hey we will play next song\");\n    video = relatedVideosVar[currentIndex + 1]; //we will play the next song\n\n    setVideoSnippet(video);\n  };\n\n  const playPrevious = () => {\n    setIsItFromPlaylist(true); // if the player time is greater than 5 sec we will move the time to 0\n\n    if (player.currentTime > 5) {\n      player.currentTime = 0;\n    } else {\n      const currentIndex = relatedVideosVar.findIndex(video => video.id.videoId === currentVideoSnippet.id);\n      let video;\n\n      if (currentIndex !== -1) {\n        video = relatedVideosVar[currentIndex - 1]; //we will play the next song\n\n        setVideoSnippet(video);\n      } else {\n        player.currentTime = 0;\n      }\n    }\n  };\n\n  let playerStyle = {\n    position: \"fixed\",\n    right: 0,\n    bottom: 0,\n    background: \"#fff\",\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: 1400,\n    display: \"inline block\",\n    transition: \"all .3s ease\"\n  };\n\n  if (playerState === \"minimized\") {\n    playerStyle.transform = \"translateY(calc(100% - 106px))\";\n    playerStyle.zIndex = 0; // if theme is not dark then only apply the pink style\n\n    if (themeSelectValue === \"Dark\") {\n      playerStyle.background = \"#333\";\n    } else {\n      playerStyle.background = \"#e91e63\";\n    } // playerStyle.bottom = \"48px\";\n    // calculate the top height and we are subtracting 148px becz\n    // 48 is the value of menu bar and 100px is minimized height\n    // make body overflow scroll 😝\n\n\n    body.style.overflow = \"auto\";\n  }\n\n  if (playerState === \"maximized\") {\n    // make body overflow hidden 🙈\n    body.style.overflow = \"hidden\";\n\n    if (themeSelectValue === \"Dark\") {\n      playerStyle.background = \"#333\";\n    }\n  }\n\n  if (playerState === \"playlist\") {\n    playerStyle.transform = \"translateY(-418px)\";\n  }\n\n  const expandPlayer = () => {\n    if (playerState === \"minimized\") {\n      setPlayerState(\"maximized\");\n      setMinimized(true);\n      history.push({\n        pathname: \"/play\",\n        search: `?id=${currentVideoSnippet.id}`,\n        state: {\n          modal: true\n        }\n      });\n    }\n  };\n\n  const toggleMaxPlaylist = () => {\n    if (playerState === \"playlist\") {\n      setPlayerState(\"maximized\");\n    } else {\n      setPlayerState(\"playlist\");\n    }\n\n    console.log(\"Maximize the playlist\");\n  };\n\n  const updateSongDB = async () => {\n    const rating = await updatePlayingSong(currentVideoSnippet); //  it will update song on db and return the rating\n\n    setRating(rating);\n    console.log(rating);\n  }; // this will be fired when song is ended\n\n\n  const songEnded = () => {\n    // if repeat is false we will play next else just set the time to 0\n    if (!isRepeatOn) {\n      playNext();\n    } else {\n      audioPlayer.current.currentTime = 0;\n      playAudio();\n    }\n  };\n\n  let initPosition = 0;\n  const containerRef = useRef(null);\n  const swipeHandlerMaximized = useSwipeable({\n    onSwipedDown: e => {\n      setPlayerState(\"minimized\");\n      history.goBack();\n    },\n    onSwiping: e => {\n      // console.log(e);\n      // getting the event for touches to extract the position\n      if (initPosition === 0) {\n        initPosition = e.event.changedTouches[0].screenY;\n      }\n\n      const screenY = e.event.changedTouches[0].screenY;\n      let positionDifference = Math.round(screenY - initPosition);\n\n      if (positionDifference < 1) {\n        positionDifference = 0;\n      }\n\n      const containerRefStyle = containerRef.current.style;\n      containerRefStyle.transform = `translateY(${positionDifference}px)`;\n      containerRefStyle.transition = \"none\";\n    },\n    onSwiped: e => {\n      initPosition = 0;\n      containerRef.current.style = \"\"; // we will make the initial position 0 again after user leaves the screen\n    },\n    onSwipedUp: e => {\n      if (playerState === \"minimized\") {\n        setPlayerState(\"maximized\");\n      }\n    },\n    onSwipedRight: e => {\n      const playTimeout = setTimeout(() => {\n        clearTimeout(playTimeout);\n        playNext();\n      }, 250);\n    },\n    onSwipedLeft: e => {\n      const playTimeout = setTimeout(() => {\n        clearTimeout(playTimeout);\n        playPrevious();\n      }, 250);\n    }\n  });\n  const swipeHandlerMin = useSwipeable({\n    onSwipedUp: e => {\n      expandPlayer();\n    }\n  });\n  useEffect(() => {\n    if (location.pathname === \"/play\" && !currentVideoSnippet.id) {\n      console.log(\"history is in play fetching song\");\n      fetchAndSetCurrentVideoSnippet(params.get(\"id\")); // math will give the song id from\n    } // we will only change if its push  otherwise while changing song from playlist changes the state\n    // Listen for changes to the current location.\n\n\n    const unlisten = history.listen(location => {\n      // location is an object like window.location\n      if (location.pathname === \"/play\") {\n        // we will only change if its push  otherwise while changing song from playlist changes the state\n        if (history.action !== \"REPLACE\") {\n          setPlayerState(\"maximized\");\n          console.log(\"set player state to maximized\");\n        }\n      } else {\n        setPlayerState(\"minimized\");\n        console.log(\"set player state to minimized\");\n      }\n\n      console.log(history);\n    });\n  }, [history]);\n  useEffect(() => {\n    console.log(playerState);\n  }, [playerState]);\n\n  const returnMinMaxClass = () => {\n    if (playerState === \"minimized\") {\n      return \"playerMinimized\";\n    } else if (playerState === \"playlist\") {\n      return \"playerPlaylist\";\n    }\n  };\n\n  const returnMaximizedPlayer = () => {\n    if (playerState === \"maximized\" || playerState === \"playlist\") {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"column\",\n        className: \"main-player-inner\",\n        style: {\n          height: \" calc(100vh - 46px)\",\n          justifyContent: \"space-evenly\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TopBar, {\n        song: currentVideoSnippet,\n        player: player,\n        setPlayerState: setPlayerState,\n        history: history,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, swipeHandlerMaximized, {\n        className: \"musicArtContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(MusicArt, {\n        data: currentVideoSnippet,\n        rating: rating,\n        audioEl: player,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(TimelineController, {\n        audioState: audioState,\n        player: player,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"space-evenly\",\n        alignItems: \"center\",\n        style: {\n          maxWidth: \"290px\",\n          height: \"80px\",\n          margin: \"0 auto\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(PreviousButton, {\n        playPrevious: playPrevious,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(PlayPauseButton, {\n        player: player,\n        audioState: audioState,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(NextButton, {\n        onPlayNext: playNext,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(RelatedVideos, {\n        toggleMaxPlaylist: toggleMaxPlaylist,\n        setPlaylist: () => setIsItFromPlaylist(true),\n        playerState: playerState,\n        relatedVideos: relatedVideos,\n        setRelatedVideos: data => setRelatedVideos(data),\n        isRepeatOn: isRepeatOn // this will set the repeat setting\n        ,\n        setIsRepeatOn: () => {\n          setIsRepeatOn(!isRepeatOn);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }\n      }));\n    }\n  };\n\n  const returnMinimizedPlayer = () => {\n    if (playerState === \"minimized\" && currentVideoSnippet.id) {\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, swipeHandlerMin, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(TimelineController, {\n        audioState: audioState,\n        player: player,\n        minimized: minimized,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }\n      }));\n    }\n  };\n\n  const fetchAndSetCurrentVideoSnippet = id => {\n    youtubeSearch.get(\"videos\", {\n      params: {\n        id: id\n      }\n    }).then(res => {\n      const item = res.data.items[0];\n      console.log(currentVideoSnippet);\n      setCurrentVideoSnippet({\n        id: item.id,\n        title: item.snippet.title,\n        channelTitle: item.snippet.channelTitle,\n        maxThumbnail: `https://img.youtube.com/vi/${item.id}/maxresdefault.jpg`,\n        sdThumbnail: `https://img.youtube.com/vi/${item.id}/sddefault.jpg` // this is the url of the max resolution of thumbnail\n\n      });\n    });\n  };\n\n  if (!currentVideoSnippet.id) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    // drag=\"y\"\n    // dragConstraints={{ top: 0, bottom: 600 }}\n    ref: containerRef // style={playerStyle}\n    ,\n    onClick: expandPlayer,\n    className: \"mediaPlayerContainer \" + returnMinMaxClass(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 5\n    }\n  }, returnMaximizedPlayer(), returnMinimizedPlayer(), /*#__PURE__*/React.createElement(\"audio\", {\n    // onTimeUpdate={timeUpdate}\n    onLoadStart: () => {\n      setAudioState(\"loading\");\n    },\n    id: \"audio-element\",\n    onLoadedData: updateSongDB // crossOrigin=\"anonymous\"\n    ,\n    onPlay: () => setAudioState(\"playing\"),\n    onPlaying: () => setAudioState(\"playing\"),\n    onPause: () => setAudioState(\"paused\"),\n    onEnded: songEnded,\n    autoPlay: true,\n    ref: audioPlayer // type=\"audio/mp4\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default MainPlayer;","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/player/MainPlayer.js"],"names":["React","useEffect","useContext","useState","useRef","Grid","useSwipeable","PlayPauseButton","NextButton","PreviousButton","MusicArt","TimelineController","TopBar","RelatedVideos","getAudioLink","youtubeSearch","updatePlayingSong","Context2","relatedVideosVar","MainPlayer","location","history","params","URLSearchParams","search","currentVideoSnippet","themeSelectValue","dispatch","setCurrentVideoSnippet","data","type","snippet","relatedVideos","setRelatedVideos","isItFromPlaylist","setIsItFromPlaylist","audioState","setAudioState","playerState","setPlayerState","minimized","setMinimized","isRepeatOn","setIsRepeatOn","rating","setRating","isNextFromMini","setIsNextFromMini","audioURL","setAudioURL","body","document","querySelector","audioPlayer","player","current","setupMediaSessions","navigator","console","log","mediaSession","metadata","window","MediaMetadata","title","artist","channelTitle","artwork","src","sdThumbnail","sizes","setActionHandler","playAudio","pause","playPrevious","playNext","play","then","_","catch","error","getAudio","setTimeout","res","get","id","proxyURL","audio","URL","createObjectURL","searchRelated","relatedToVideoId","maxResults","items","pathname","push","replace","setAudioSrcAndPlay","setVideoSnippet","video","videoId","maxThumbnail","hidden","currentIndex","findIndex","currentTime","playerStyle","position","right","bottom","background","width","height","zIndex","display","transition","transform","style","overflow","expandPlayer","state","modal","toggleMaxPlaylist","updateSongDB","songEnded","initPosition","containerRef","swipeHandlerMaximized","onSwipedDown","e","goBack","onSwiping","event","changedTouches","screenY","positionDifference","Math","round","containerRefStyle","onSwiped","onSwipedUp","onSwipedRight","playTimeout","clearTimeout","onSwipedLeft","swipeHandlerMin","fetchAndSetCurrentVideoSnippet","unlisten","listen","action","returnMinMaxClass","returnMaximizedPlayer","justifyContent","maxWidth","margin","returnMinimizedPlayer","item"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState, useRef } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\nimport PlayPauseButton from \"./PlayPauseButton\";\r\nimport NextButton from \"./NextButton\";\r\nimport PreviousButton from \"./PreviousButton\";\r\nimport MusicArt from \"./MusicArt\";\r\nimport TimelineController from \"./TimelineController\";\r\nimport TopBar from \"./TopBar\";\r\n// import MiniMusicArt from \"./MiniMusicArt\";\r\nimport RelatedVideos from \"../RelatedVideos\";\r\nimport getAudioLink from './apis/getAudioLink';\r\nimport youtubeSearch from \"./apis/youtubeSearch\";\r\nimport { updatePlayingSong } from \"./external/saveSong\";\r\n\r\nimport \"./external/saveCountry\";\r\n\r\nimport { Context2 } from \"../../Context2\";\r\n\r\n// window.onbeforeunload = function() {\r\n//   return 'You have unsaved changes!';\r\n// }\r\nlet relatedVideosVar;\r\n\r\nconst MainPlayer = ({ location, history }) => {\r\n  let params = new URLSearchParams(location.search);\r\n\r\n  const [{ currentVideoSnippet, themeSelectValue }, dispatch] = useContext(Context2);\r\n\r\n  const setCurrentVideoSnippet = data => {\r\n    dispatch({ type: \"setCurrentVideoSnippet\", snippet: data });\r\n  };\r\n\r\n  const [relatedVideos, setRelatedVideos] = useState([]);\r\n  const [isItFromPlaylist, setIsItFromPlaylist] = useState(false);\r\n  //\r\n  const [audioState, setAudioState] = useState(null);\r\n  // there will be 4 states\r\n  // loading, loaded, playing, paused\r\n\r\n  const [playerState, setPlayerState] = useState(null);\r\n  // there will be 3 states\r\n  // maximized, minimized, playlist\r\n\r\n  const [minimized, setMinimized] = useState(true);\r\n  const [isRepeatOn, setIsRepeatOn] = useState(false);\r\n  const [rating, setRating] = useState(\"none\");\r\n  const [isNextFromMini, setIsNextFromMini] = useState(false);\r\n  const [audioURL, setAudioURL] = useState(null);\r\n  const body = document.querySelector(\"body\");\r\n\r\n  const audioPlayer = useRef();\r\n  const player = audioPlayer.current;\r\n  const setupMediaSessions = () => {\r\n    if (\"mediaSession\" in navigator) {\r\n      console.log(\"navigator setupped\");\r\n\r\n      navigator.mediaSession.metadata = new window.MediaMetadata({\r\n        title: currentVideoSnippet.title,\r\n        artist: currentVideoSnippet.channelTitle,\r\n        artwork: [\r\n          {\r\n            src: currentVideoSnippet.sdThumbnail,\r\n            sizes: \"512x512\",\r\n            type: \"image/png\"\r\n          }\r\n        ]\r\n      });\r\n      navigator.mediaSession.setActionHandler(\"play\", () => {\r\n        /* Code excerpted. */\r\n        playAudio();\r\n      });\r\n      navigator.mediaSession.setActionHandler(\"pause\", () => {\r\n        /* Code excerpted. */\r\n        audioPlayer.current.pause();\r\n      });\r\n      navigator.mediaSession.setActionHandler(\"previoustrack\", () => {\r\n        playPrevious();\r\n      });\r\n      navigator.mediaSession.setActionHandler(\"nexttrack\", () => {\r\n        playNext();\r\n      });\r\n    }\r\n  };\r\n\r\n  const playAudio = () => {\r\n    audioPlayer.current\r\n      .play()\r\n      .then(_ => {\r\n        // Automatic playback started!\r\n        // Show playing UI.\r\n        console.log(\"audio played auto\");\r\n        setupMediaSessions();\r\n      })\r\n      .catch(error => {\r\n        // Auto-play was prevented\r\n        // Show paused UI.\r\n        console.log(\"playback prevented\");\r\n        setAudioState(\"paused\");\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"state changed triggedred\");\r\n    const getAudio = async data => {\r\n      // audioPlayer.current.src = \"\";\r\n      // maximize the player every time id changes\r\n      // only if playlist is not open\r\n      if (playerState !== \"playlist\" && !isNextFromMini) {\r\n        setPlayerState(\"maximized\");\r\n        //\r\n        console.log(\"maximizing here yar and state is\", playerState);\r\n      }\r\n\r\n      setTimeout(() => {\r\n        setIsNextFromMini(false);\r\n        // change it back to false\r\n      }, 200);\r\n\r\n      setAudioState(\"loading\");\r\n      const res = await getAudioLink.get(\"/song\", {\r\n        params: { id: data }\r\n      });\r\n\r\n      // set the audio data\r\n      const proxyURL = \"https://server.ylight.xyz/proxy/\";\r\n      audioPlayer.current.src = res.data;\r\n      playAudio();\r\n\r\n      // var audioContext = new AudioContext();\r\n\r\n      // var track = audioContext.createMediaElementSource(audioPlayer.current);\r\n      // track.connect(audioContext.destination);\r\n    };\r\n\r\n    if (currentVideoSnippet.audio) {\r\n      console.log(\"yes its downloaded we will play from local file\");\r\n      // maximize the player every time id changes\r\n\r\n      setPlayerState(\"maximized\");\r\n      setAudioState(\"loading\");\r\n      audioPlayer.current.src = window.URL.createObjectURL(\r\n        currentVideoSnippet.audio\r\n      );\r\n      playAudio();\r\n    } else if (currentVideoSnippet.id) {\r\n      getAudio(currentVideoSnippet.id);\r\n    }\r\n\r\n    if (currentVideoSnippet.id) {\r\n      const searchRelated = async () => {\r\n        const res = await youtubeSearch.get(\"/search\", {\r\n          params: {\r\n            relatedToVideoId: currentVideoSnippet.id,\r\n            maxResults: 10\r\n          }\r\n        });\r\n        setRelatedVideos(res.data.items);\r\n      };\r\n\r\n      // if its not from the mini next button then only change history\r\n      if (!isNextFromMini) {\r\n        // if the click is not from playlist then only we will search for realated video\r\n        if (!isItFromPlaylist) {\r\n          // console.log(\"searching for related vids\", relatedVideos);\r\n          // if player is in playlist mode we will just replace history else push it\r\n          if (location.pathname !== \"/play\") {\r\n            // prevent duplicating history\r\n            history.push(`/play?id=${currentVideoSnippet.id}`);\r\n          }\r\n\r\n          searchRelated();\r\n        } else {\r\n          history.replace(`/play?id=${currentVideoSnippet.id}`);\r\n          setIsItFromPlaylist(false);\r\n        }\r\n      }\r\n\r\n      console.log(currentVideoSnippet);\r\n    }\r\n\r\n    // set rating to none when we load new song\r\n    setRating(\"none\");\r\n  }, [currentVideoSnippet, setIsItFromPlaylist]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"from playlist\", isItFromPlaylist);\r\n  // }, [isItFromPlaylist]);\r\n\r\n  useEffect(() => {\r\n    relatedVideosVar = relatedVideos;\r\n    console.log(\"related\", relatedVideos);\r\n  }, [relatedVideos]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"isnext state\", isNextFromMini);\r\n  }, [isNextFromMini]);\r\n\r\n  const setAudioSrcAndPlay = async id => {\r\n    const res = await getAudioLink.get(\"/song\", {\r\n      params: { id: id }\r\n    });\r\n\r\n    // set the audio data\r\n    audioPlayer.current.src = res.data;\r\n    playAudio();\r\n  };\r\n\r\n  const setVideoSnippet = video => {\r\n    setCurrentVideoSnippet({\r\n      id: video.id.videoId,\r\n      title: video.snippet.title,\r\n      channelTitle: video.snippet.channelTitle,\r\n      maxThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/hqdefault.jpg`,\r\n      sdThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/sddefault.jpg`\r\n      // this is the url of the max resolution of thumbnail\r\n    });\r\n\r\n    // if window is minimized then only we will run this function\r\n    if (document.hidden) {\r\n      setAudioSrcAndPlay(video.id.videoId);\r\n    }\r\n  };\r\n\r\n  const playNext = () => {\r\n    // also set this is from playlist\r\n    setIsItFromPlaylist(true);\r\n    console.log(\"play next related videos\", relatedVideos);\r\n    // find the index of playing song in the playlist\r\n    const currentIndex = relatedVideosVar.findIndex(\r\n      video => video.id.videoId === currentVideoSnippet.id\r\n    );\r\n    console.log(\"the current index is\", currentIndex);\r\n\r\n    let video;\r\n    console.log(\"hey we will play next song\");\r\n    video = relatedVideosVar[currentIndex + 1]; //we will play the next song\r\n\r\n    setVideoSnippet(video);\r\n  };\r\n\r\n  const playPrevious = () => {\r\n    setIsItFromPlaylist(true);\r\n\r\n    // if the player time is greater than 5 sec we will move the time to 0\r\n    if (player.currentTime > 5) {\r\n      player.currentTime = 0;\r\n    } else {\r\n      const currentIndex = relatedVideosVar.findIndex(\r\n        video => video.id.videoId === currentVideoSnippet.id\r\n      );\r\n      let video;\r\n      if (currentIndex !== -1) {\r\n        video = relatedVideosVar[currentIndex - 1]; //we will play the next song\r\n        setVideoSnippet(video);\r\n      } else {\r\n        player.currentTime = 0;\r\n      }\r\n    }\r\n  };\r\n\r\n  let playerStyle = {\r\n    position: \"fixed\",\r\n    right: 0,\r\n    bottom: 0,\r\n    background: \"#fff\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    zIndex: 1400,\r\n    display: \"inline block\",\r\n    transition: \"all .3s ease\"\r\n  };\r\n\r\n  if (playerState === \"minimized\") {\r\n    playerStyle.transform = \"translateY(calc(100% - 106px))\";\r\n    playerStyle.zIndex = 0;\r\n    // if theme is not dark then only apply the pink style\r\n    if (themeSelectValue === \"Dark\") {\r\n      playerStyle.background = \"#333\";\r\n    } else {\r\n      playerStyle.background = \"#e91e63\";\r\n    }\r\n    // playerStyle.bottom = \"48px\";\r\n    // calculate the top height and we are subtracting 148px becz\r\n    // 48 is the value of menu bar and 100px is minimized height\r\n    // make body overflow scroll 😝\r\n    body.style.overflow = \"auto\";\r\n  }\r\n\r\n  if (playerState === \"maximized\") {\r\n    // make body overflow hidden 🙈\r\n    body.style.overflow = \"hidden\";\r\n    if (themeSelectValue === \"Dark\") {\r\n      playerStyle.background = \"#333\";\r\n    }\r\n  }\r\n\r\n  if (playerState === \"playlist\") {\r\n    playerStyle.transform = \"translateY(-418px)\";\r\n  }\r\n\r\n  const expandPlayer = () => {\r\n    if (playerState === \"minimized\") {\r\n      setPlayerState(\"maximized\");\r\n      setMinimized(true);\r\n      history.push({\r\n        pathname: \"/play\",\r\n        search: `?id=${currentVideoSnippet.id}`,\r\n        state: { modal: true }\r\n      });\r\n    }\r\n  };\r\n\r\n  const toggleMaxPlaylist = () => {\r\n    if (playerState === \"playlist\") {\r\n      setPlayerState(\"maximized\");\r\n    } else {\r\n      setPlayerState(\"playlist\");\r\n    }\r\n    console.log(\"Maximize the playlist\");\r\n  };\r\n\r\n  const updateSongDB = async () => {\r\n    const rating = await updatePlayingSong(currentVideoSnippet);\r\n    //  it will update song on db and return the rating\r\n    setRating(rating);\r\n    console.log(rating);\r\n  };\r\n\r\n  // this will be fired when song is ended\r\n  const songEnded = () => {\r\n    // if repeat is false we will play next else just set the time to 0\r\n    if (!isRepeatOn) {\r\n      playNext();\r\n    } else {\r\n      audioPlayer.current.currentTime = 0;\r\n      playAudio();\r\n    }\r\n  };\r\n\r\n  let initPosition = 0;\r\n  const containerRef = useRef(null);\r\n\r\n  const swipeHandlerMaximized = useSwipeable({\r\n    onSwipedDown: e => {\r\n      setPlayerState(\"minimized\");\r\n      history.goBack();\r\n    },\r\n    onSwiping: e => {\r\n      // console.log(e);\r\n      // getting the event for touches to extract the position\r\n      if (initPosition === 0) {\r\n        initPosition = e.event.changedTouches[0].screenY;\r\n      }\r\n\r\n      const screenY = e.event.changedTouches[0].screenY;\r\n      let positionDifference = Math.round(screenY - initPosition);\r\n      if (positionDifference < 1) {\r\n        positionDifference = 0;\r\n      }\r\n\r\n      const containerRefStyle = containerRef.current.style;\r\n      containerRefStyle.transform = `translateY(${positionDifference}px)`;\r\n      containerRefStyle.transition = \"none\";\r\n    },\r\n    onSwiped: e => {\r\n      initPosition = 0;\r\n      containerRef.current.style = \"\";\r\n      // we will make the initial position 0 again after user leaves the screen\r\n    },\r\n    onSwipedUp: e => {\r\n      if (playerState === \"minimized\") {\r\n        setPlayerState(\"maximized\");\r\n      }\r\n    },\r\n    onSwipedRight: e => {\r\n      const playTimeout = setTimeout(() => {\r\n        clearTimeout(playTimeout);\r\n        playNext();\r\n      }, 250);\r\n    },\r\n    onSwipedLeft: e => {\r\n      const playTimeout = setTimeout(() => {\r\n        clearTimeout(playTimeout);\r\n        playPrevious();\r\n      }, 250);\r\n    }\r\n  });\r\n\r\n  const swipeHandlerMin = useSwipeable({\r\n    onSwipedUp: e => {\r\n      expandPlayer();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (location.pathname === \"/play\" && !currentVideoSnippet.id) {\r\n      console.log(\"history is in play fetching song\");\r\n\r\n      fetchAndSetCurrentVideoSnippet(params.get(\"id\")); // math will give the song id from\r\n    }\r\n    // we will only change if its push  otherwise while changing song from playlist changes the state\r\n\r\n    // Listen for changes to the current location.\r\n    const unlisten = history.listen(location => {\r\n      // location is an object like window.location\r\n      if (location.pathname === \"/play\") {\r\n        // we will only change if its push  otherwise while changing song from playlist changes the state\r\n        if (history.action !== \"REPLACE\") {\r\n          setPlayerState(\"maximized\");\r\n          console.log(\"set player state to maximized\");\r\n        }\r\n      } else {\r\n        setPlayerState(\"minimized\");\r\n        console.log(\"set player state to minimized\");\r\n      }\r\n      console.log(history);\r\n    });\r\n  }, [history]);\r\n\r\n  useEffect(() => {\r\n    console.log(playerState);\r\n  }, [playerState]);\r\n\r\n  const returnMinMaxClass = () => {\r\n    if (playerState === \"minimized\") {\r\n      return \"playerMinimized\";\r\n    } else if (playerState === \"playlist\") {\r\n      return \"playerPlaylist\";\r\n    }\r\n  };\r\n\r\n  const returnMaximizedPlayer = () => {\r\n    if (playerState === \"maximized\" || playerState === \"playlist\") {\r\n      return (\r\n        <>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            className=\"main-player-inner\"\r\n            style={{\r\n              height: \" calc(100vh - 46px)\",\r\n              justifyContent: \"space-evenly\"\r\n            }}\r\n          >\r\n            <TopBar\r\n              song={currentVideoSnippet}\r\n              player={player}\r\n              setPlayerState={setPlayerState}\r\n              history={history}\r\n            />\r\n            <div {...swipeHandlerMaximized} className=\"musicArtContainer\">\r\n              <MusicArt\r\n                data={currentVideoSnippet}\r\n                rating={rating}\r\n                audioEl={player}\r\n              />\r\n            </div>\r\n            <TimelineController audioState={audioState} player={player} />\r\n\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-evenly\"\r\n              alignItems=\"center\"\r\n              style={{ maxWidth: \"290px\", height: \"80px\", margin: \"0 auto\" }}\r\n            >\r\n              <PreviousButton playPrevious={playPrevious} />\r\n              <PlayPauseButton player={player} audioState={audioState} />\r\n              <NextButton onPlayNext={playNext} />\r\n            </Grid>\r\n          </Grid>\r\n          <RelatedVideos\r\n            toggleMaxPlaylist={toggleMaxPlaylist}\r\n            setPlaylist={() => setIsItFromPlaylist(true)}\r\n            playerState={playerState}\r\n            relatedVideos={relatedVideos}\r\n            setRelatedVideos={data => setRelatedVideos(data)}\r\n            isRepeatOn={isRepeatOn}\r\n            // this will set the repeat setting\r\n            setIsRepeatOn={() => {\r\n              setIsRepeatOn(!isRepeatOn);\r\n            }}\r\n          />\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  const returnMinimizedPlayer = () => {\r\n    if (playerState === \"minimized\" && currentVideoSnippet.id) {\r\n      return (\r\n        <div {...swipeHandlerMin}>\r\n          {/* <MiniMusicArt\r\n            // we are making an object for props we will pass it to play pause button through mini music art\r\n            playPause={{\r\n              player: player,\r\n              minimized: minimized,\r\n              audioState: audioState\r\n            }}\r\n            playNext={e => {\r\n              e.stopPropagation();\r\n              setIsNextFromMini(true);\r\n              playNext();\r\n            }}\r\n            data={currentVideoSnippet}\r\n            emptyPlayer={e => {\r\n              e.stopPropagation();\r\n              setCurrentVideoSnippet([]);\r\n            }}\r\n          /> */}\r\n          <TimelineController\r\n            audioState={audioState}\r\n            player={player}\r\n            minimized={minimized}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const fetchAndSetCurrentVideoSnippet = id => {\r\n    youtubeSearch\r\n      .get(\"videos\", {\r\n        params: {\r\n          id: id\r\n        }\r\n      })\r\n      .then(res => {\r\n        const item = res.data.items[0];\r\n        console.log(currentVideoSnippet);\r\n        setCurrentVideoSnippet({\r\n          id: item.id,\r\n          title: item.snippet.title,\r\n          channelTitle: item.snippet.channelTitle,\r\n          maxThumbnail: `https://img.youtube.com/vi/${item.id}/maxresdefault.jpg`,\r\n          sdThumbnail: `https://img.youtube.com/vi/${item.id}/sddefault.jpg`\r\n          // this is the url of the max resolution of thumbnail\r\n        });\r\n      });\r\n  };\r\n\r\n  if (!currentVideoSnippet.id) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      // drag=\"y\"\r\n      // dragConstraints={{ top: 0, bottom: 600 }}\r\n      ref={containerRef}\r\n      // style={playerStyle}\r\n      onClick={expandPlayer}\r\n      className={\"mediaPlayerContainer \" + returnMinMaxClass()}\r\n    >\r\n      {returnMaximizedPlayer()}\r\n      {returnMinimizedPlayer()}\r\n      <audio\r\n        // onTimeUpdate={timeUpdate}\r\n        onLoadStart={() => {\r\n          setAudioState(\"loading\");\r\n        }}\r\n        id=\"audio-element\"\r\n        onLoadedData={updateSongDB}\r\n        // crossOrigin=\"anonymous\"\r\n        onPlay={() => setAudioState(\"playing\")}\r\n        onPlaying={() => setAudioState(\"playing\")}\r\n        onPause={() => setAudioState(\"paused\")}\r\n        onEnded={songEnded}\r\n        autoPlay\r\n        ref={audioPlayer}\r\n        // type=\"audio/mp4\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPlayer;\r\n"]},"metadata":{},"sourceType":"module"}