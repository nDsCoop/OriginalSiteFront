{"ast":null,"code":"import { OrderedMap } from \"immutable\";\nimport _ from 'lodash';\nexport default class Realtime {\n  constructor(store) {\n    this.store = store;\n    this.ws = null;\n    this.isConnected = false;\n    this.connect();\n  }\n\n  decoMessage(msg) {\n    let message = {};\n\n    try {\n      message = JSON.parse(msg);\n    } catch (err) {\n      console.log(err);\n    }\n\n    return message;\n  }\n\n  readMessage(msg) {\n    const message = this.decoMessage(msg);\n\n    const action = _.get(message, 'action');\n\n    const payload = _.get(message, 'payload');\n\n    switch (action) {\n      case 'message_added':\n        let notify = true;\n        this.onAddMessage(payload, notify);\n        break;\n\n      default:\n        break;\n\n      case 'channel_added':\n        //to do check payload and insert new channel\n        this.onAddChannel(payload);\n        break;\n    }\n  }\n\n  onAddMessage(payload, notify = false) {\n    const store = this.store;\n    const currentUser = store.getCurrentUser();\n\n    const currentUserId = _.toString(_.get(currentUser, '_id'));\n\n    let user = _.get(payload, 'user'); //add user to cache\n\n\n    user = store.addUserToCache(user);\n    const messageObject = {\n      _id: payload._id,\n      body: _.get(payload, 'body', ''),\n      userId: _.get(payload, 'userId'),\n      channelId: _.get(payload, 'channelId'),\n      created: _.get(payload, 'created', new Date()),\n      me: currentUserId === _.toString(_.get(payload, 'userId')),\n      user: user\n    };\n    console.log(\"Mess listen from fetch: \", messageObject);\n    store.setMessage(messageObject, notify);\n  }\n\n  onAddChannel(payload) {\n    const store = this.store;\n    const channelId = `${payload._id}`;\n    const userId = `${payload.userId}`;\n\n    const users = _.get(payload, 'users', []);\n\n    let channel = {\n      _id: channelId,\n      title: _.get(payload, 'title', ''),\n      lastMessage: _.get(payload, 'lastMessage', ''),\n      members: new OrderedMap(),\n      messages: new OrderedMap(),\n      isNew: false,\n      userId: userId,\n      created: new Date()\n    };\n\n    _.each(users, user => {\n      //add this user to store.users collection\n      const memberId = `${user._id}`;\n      this.store.addUserToCache(user);\n      channel.members = channel.members.set(memberId, true);\n    });\n\n    const channelMessages = store.messages.filter(m => _.toString(m.channelId) === channelId);\n    channelMessages.forEach(msg => {\n      const msgId = _.toString(_.get(msg, '_id'));\n\n      channel.messages = channel.messages.set(msgId, true);\n    });\n    store.addChannel(channelId, channel);\n  }\n\n  send(msg = {}) {\n    const isConnected = this.isConnected;\n\n    if (isConnected) {\n      const msgString = JSON.stringify(msg);\n      this.ws.send(msgString);\n    }\n  }\n\n  authentication() {\n    const store = this.store;\n    const tokenId = store.getUserTokenId();\n    const message = {\n      action: 'auth',\n      payload: `${tokenId}`\n    };\n    this.send(message);\n  }\n\n  connect() {\n    const ws = new WebSocket('ws://localhost:8080');\n    this.ws = ws;\n\n    ws.onopen = () => {\n      //tell to server who are you ?\n      this.isConnected = true;\n      this.authentication();\n\n      ws.onmessage = e => {\n        this.readMessage(_.get(e, 'data', ''));\n        console.log(\"Message from server: \", e.data);\n      };\n    };\n\n    ws.onclose = () => {\n      this.isConnected = false; //\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/realtime.js"],"names":["OrderedMap","_","Realtime","constructor","store","ws","isConnected","connect","decoMessage","msg","message","JSON","parse","err","console","log","readMessage","action","get","payload","notify","onAddMessage","onAddChannel","currentUser","getCurrentUser","currentUserId","toString","user","addUserToCache","messageObject","_id","body","userId","channelId","created","Date","me","setMessage","users","channel","title","lastMessage","members","messages","isNew","each","memberId","set","channelMessages","filter","m","forEach","msgId","addChannel","send","msgString","stringify","authentication","tokenId","getUserTokenId","WebSocket","onopen","onmessage","e","data","onclose"],"mappings":"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","sourcesContent":["import { OrderedMap } from \"immutable\";\r\nimport _ from 'lodash';\r\n\r\nexport default class Realtime{\r\n\r\n    constructor(store){\r\n        this.store = store;\r\n        this.ws = null;\r\n        this.isConnected = false;\r\n        this.connect();\r\n\r\n    }\r\n    decoMessage(msg){\r\n        let message = {};\r\n        try{\r\n            message = JSON.parse(msg);\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        return message;\r\n    }\r\n    readMessage(msg){\r\n        const message = this.decoMessage(msg);\r\n        const action = _.get(message, 'action');\r\n        const payload = _.get(message, 'payload');\r\n\r\n        switch(action){\r\n            case 'message_added':\r\n                let notify = true;\r\n                this.onAddMessage(payload, notify);\r\n            break;\r\n            default:\r\n                break;\r\n            case 'channel_added':\r\n                //to do check payload and insert new channel\r\n                this.onAddChannel(payload);\r\n                break;\r\n        }\r\n    }\r\n    onAddMessage(payload, notify = false){\r\n        const store = this.store;\r\n        const currentUser = store.getCurrentUser();\r\n        const currentUserId = _.toString(_.get(currentUser, '_id'));\r\n        let user = _.get(payload, 'user');\r\n\r\n\r\n        //add user to cache\r\n        user = store.addUserToCache(user);\r\n\r\n        const messageObject = {\r\n            _id: payload._id,\r\n            body: _.get(payload, 'body', ''),\r\n            userId: _.get(payload, 'userId'),\r\n            channelId: _.get(payload, 'channelId'),\r\n            created: _.get(payload, 'created', new Date()),\r\n            me: currentUserId === _.toString(_.get(payload, 'userId')),\r\n            user: user,\r\n        };\r\n        console.log(\"Mess listen from fetch: \", messageObject);\r\n        store.setMessage(messageObject, notify);\r\n\r\n    }\r\n\r\n    onAddChannel(payload){\r\n        const store = this.store;\r\n        const channelId = `${payload._id}`;\r\n        const userId = `${payload.userId}`;\r\n        const users = _.get(payload, 'users', []);\r\n        let channel = { \r\n            \r\n            _id:channelId,  \r\n            title: _.get(payload, 'title', '' ),\r\n            lastMessage: _.get(payload, 'lastMessage', ''),\r\n            members: new OrderedMap(),\r\n            messages: new OrderedMap(),\r\n            isNew: false,\r\n            userId: userId,\r\n            created: new Date(),\r\n\r\n        };\r\n        _.each(users, (user) => {\r\n            //add this user to store.users collection\r\n            const memberId = `${user._id}`;\r\n            this.store.addUserToCache(user);\r\n            channel.members = channel.members.set(memberId, true);\r\n        });\r\n        const channelMessages = store.messages.filter((m) => _.toString(m.channelId) === channelId);\r\n        channelMessages.forEach((msg) => {\r\n            const msgId = _.toString(_.get(msg, '_id'));\r\n            channel.messages = channel.messages.set(msgId, true);\r\n        })\r\n        store.addChannel(channelId, channel);\r\n    }\r\n    send( msg = {}){\r\n        const isConnected = this.isConnected;\r\n        if(isConnected){\r\n            const msgString = JSON.stringify(msg);\r\n            this.ws.send(msgString);\r\n        }\r\n    }\r\n    authentication(){\r\n        const store = this.store;\r\n        const tokenId = store.getUserTokenId();\r\n        const message = {\r\n            action: 'auth',\r\n            payload: `${tokenId}`\r\n        }\r\n            this.send(message);\r\n    }\r\n\r\n    connect(){\r\n\r\n        const ws = new WebSocket('ws://localhost:8080');\r\n        this.ws = ws;\r\n        ws.onopen = () => {\r\n            //tell to server who are you ?\r\n            this.isConnected = true;\r\n            this.authentication();\r\n            \r\n            ws.onmessage = (e) => {\r\n                this.readMessage(_.get(e, 'data',''));\r\n                console.log(\"Message from server: \", e.data);\r\n            }\r\n        }\r\n        ws.onclose = () => {\r\n            this.isConnected = false;\r\n            //\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}