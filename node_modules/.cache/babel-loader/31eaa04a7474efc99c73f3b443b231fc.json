{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\RelatedVideos.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport { List, ListItem, Typography, ListItemIcon, ListItemText, Grid, Divider, LinearProgress } from \"@material-ui/core\";\nimport { Home, MusicVideo, LibraryMusic, Shuffle, Repeat, KeyboardArrowUp, KeyboardArrowDown, RepeatOne } from \"@material-ui/icons\";\nimport { GlobalContext } from \"./GlobalState\";\nlet renderResult; // written by @bushblade\n\nconst shuffle = arry => arry.reduce((acc, _, i) => {\n  const rnd = Math.floor(Math.random() * acc.length),\n        temp = acc[i];\n  acc[i] = acc[rnd];\n  acc[rnd] = temp;\n  return acc;\n}, [...arry]);\n\nconst RelatedVideos = ({\n  toggleMaxPlaylist,\n  setPlaylist,\n  playerState,\n  relatedVideos,\n  setRelatedVideos,\n  setIsRepeatOn,\n  isRepeatOn\n}) => {\n  const [{}, dispatch] = useContext(GlobalContext);\n\n  const setCurrentVideoSnippet = data => {\n    dispatch({\n      type: \"setCurrentVideoSnippet\",\n      snippet: data\n    });\n  };\n\n  const handleShuffleClick = () => {\n    setRelatedVideos(shuffle(relatedVideos));\n  };\n\n  const spring = {\n    type: \"spring\",\n    damping: 20,\n    stiffness: 300\n  };\n\n  const handleClick = video => {\n    // set all the info of current clicked video in this object\n    setCurrentVideoSnippet({\n      id: video.id.videoId,\n      title: video.snippet.title,\n      channelTitle: video.snippet.channelTitle,\n      maxThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/maxresdefault.jpg`,\n      sdThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/sddefault.jpg` // this is the url of the max resolution of thumbnail\n\n    });\n    setPlaylist();\n  };\n\n  if (relatedVideos.length > 1) {\n    renderResult = relatedVideos.map(song => {\n      return /*#__PURE__*/React.createElement(motion.li, {\n        key: song.id.videoId,\n        positionTransition: spring,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ListItem // key={song.id.videoId}\n      , {\n        button: true,\n        onClick: () => handleClick(song) // component={Link}\n        // replace\n        // to={{ pathname: \"/play\", search: `?id=${song.id.videoId}` }}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ListItemIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MusicVideo, {\n        style: {\n          color: \"#fff\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(ListItemText, {\n        primary: song.snippet.title.slice(0, 40),\n        secondary: song.snippet.channelTitle.slice(0, 40),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      })));\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(LinearProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const returnPlaylistExpandBtn = () => {\n    if (playerState === \"playlist\") {\n      return /*#__PURE__*/React.createElement(KeyboardArrowDown, {\n        onClick: toggleMaxPlaylist,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(KeyboardArrowUp, {\n        onClick: toggleMaxPlaylist,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 14\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"RelatedVideoContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: \"playlistHeader\",\n    container: true,\n    direction: \"row\",\n    alignItems: \"center\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    icon: /*#__PURE__*/React.createElement(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }),\n    \"aria-label\": \"Home\",\n    component: Link,\n    to: \"/page1/home\",\n    label: \"Home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Coming Next\"), /*#__PURE__*/React.createElement(Shuffle, {\n    onClick: handleShuffleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }), isRepeatOn ? /*#__PURE__*/React.createElement(RepeatOne, {\n    onClick: setIsRepeatOn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(Repeat, {\n    onClick: setIsRepeatOn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }), returnPlaylistExpandBtn()), /*#__PURE__*/React.createElement(List, {\n    dense: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, renderResult));\n};\n\nexport default RelatedVideos;","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/RelatedVideos.js"],"names":["React","useContext","useEffect","Link","motion","List","ListItem","Typography","ListItemIcon","ListItemText","Grid","Divider","LinearProgress","Home","MusicVideo","LibraryMusic","Shuffle","Repeat","KeyboardArrowUp","KeyboardArrowDown","RepeatOne","GlobalContext","renderResult","shuffle","arry","reduce","acc","_","i","rnd","Math","floor","random","length","temp","RelatedVideos","toggleMaxPlaylist","setPlaylist","playerState","relatedVideos","setRelatedVideos","setIsRepeatOn","isRepeatOn","dispatch","setCurrentVideoSnippet","data","type","snippet","handleShuffleClick","spring","damping","stiffness","handleClick","video","id","videoId","title","channelTitle","maxThumbnail","sdThumbnail","map","song","color","slice","returnPlaylistExpandBtn"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Typography,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Grid,\r\n  Divider,\r\n  LinearProgress\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n  Home,\r\n  MusicVideo,\r\n  LibraryMusic,\r\n  Shuffle,\r\n  Repeat,\r\n  KeyboardArrowUp,\r\n  KeyboardArrowDown,\r\n  RepeatOne\r\n} from \"@material-ui/icons\";\r\n\r\n\r\nimport { GlobalContext } from \"./GlobalState\";\r\n\r\nlet renderResult;\r\n\r\n// written by @bushblade\r\nconst shuffle = arry =>\r\n  arry.reduce(\r\n    (acc, _, i) => {\r\n      const rnd = Math.floor(Math.random() * acc.length),\r\n        temp = acc[i];\r\n      acc[i] = acc[rnd];\r\n      acc[rnd] = temp;\r\n      return acc;\r\n    },\r\n    [...arry]\r\n  );\r\n\r\nconst RelatedVideos = ({\r\n  toggleMaxPlaylist,\r\n  setPlaylist,\r\n  playerState,\r\n  relatedVideos,\r\n  setRelatedVideos,\r\n  setIsRepeatOn,\r\n  isRepeatOn\r\n}) => {\r\n  const [{}, dispatch] = useContext(GlobalContext);\r\n  const setCurrentVideoSnippet = data => {\r\n    dispatch({ type: \"setCurrentVideoSnippet\", snippet: data });\r\n  };\r\n  const handleShuffleClick = () => {\r\n    setRelatedVideos(shuffle(relatedVideos));\r\n  };\r\n\r\n  const spring = {\r\n    type: \"spring\",\r\n    damping: 20,\r\n    stiffness: 300\r\n  };\r\n  const handleClick = video => {\r\n    // set all the info of current clicked video in this object\r\n    setCurrentVideoSnippet({\r\n      id: video.id.videoId,\r\n      title: video.snippet.title,\r\n      channelTitle: video.snippet.channelTitle,\r\n      maxThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/maxresdefault.jpg`,\r\n      sdThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/sddefault.jpg`\r\n      // this is the url of the max resolution of thumbnail\r\n    });\r\n    setPlaylist();\r\n  };\r\n\r\n  if (relatedVideos.length > 1) {\r\n    renderResult = relatedVideos.map(song => {\r\n      return (\r\n        <motion.li key={song.id.videoId} positionTransition={spring}>\r\n          <ListItem\r\n            // key={song.id.videoId}\r\n            button\r\n            onClick={() => handleClick(song)}\r\n            // component={Link}\r\n            // replace\r\n            // to={{ pathname: \"/play\", search: `?id=${song.id.videoId}` }}\r\n          >\r\n            <ListItemIcon>\r\n              <MusicVideo style={{ color: \"#fff\" }} />\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              primary={song.snippet.title.slice(0, 40)}\r\n              secondary={song.snippet.channelTitle.slice(0, 40)}\r\n            />\r\n          </ListItem>\r\n        </motion.li>\r\n      );\r\n    });\r\n  } else {\r\n    return <LinearProgress />;\r\n  }\r\n\r\n  const returnPlaylistExpandBtn = () => {\r\n    if (playerState === \"playlist\") {\r\n      return <KeyboardArrowDown onClick={toggleMaxPlaylist} />;\r\n    } else {\r\n      return <KeyboardArrowUp onClick={toggleMaxPlaylist} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"RelatedVideoContainer\">\r\n      <Grid\r\n        className={\"playlistHeader\"}\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justify=\"space-between\"\r\n      >\r\n         <Link\r\n          icon={<Home />}\r\n          aria-label=\"Home\"\r\n          component={Link}\r\n          to=\"/page1/home\"\r\n          label=\"Home\"\r\n        />\r\n        <Typography variant=\"h6\">Coming Next</Typography>\r\n        <Shuffle onClick={handleShuffleClick} />\r\n        {/* this will show the repeat button and repeat the song */}\r\n        {isRepeatOn ? (\r\n          <RepeatOne onClick={setIsRepeatOn} />\r\n        ) : (\r\n          <Repeat onClick={setIsRepeatOn} />\r\n        )}\r\n        {returnPlaylistExpandBtn()}\r\n      </Grid>\r\n      <List dense={true}>{renderResult}</List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RelatedVideos;\r\n"]},"metadata":{},"sourceType":"module"}