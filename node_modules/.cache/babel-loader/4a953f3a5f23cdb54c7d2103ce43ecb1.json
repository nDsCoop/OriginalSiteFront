{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nconst users = OrderedMap({\n  '1': {\n    _id: '1',\n    name: \"nDs\",\n    email: \"nds@gmail.com\",\n    created: new Date(),\n    avatar: \"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"\n  },\n  '2': {\n    _id: '2',\n    name: \"nDs0\",\n    email: \"nds0@gmail.com\",\n    created: new Date(),\n    avatar: \"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"\n  },\n  '3': {\n    _id: '3',\n    name: \"nDs1\",\n    email: \"nds1@gmail.com\",\n    created: new Date(),\n    avatar: \"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"\n  }\n});\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = this.getUserFromLocalStorage();\n  }\n\n  signOut() {\n    this.user = null;\n    localStorage.removeItem('me');\n  }\n\n  getUserFromLocalStorage() {\n    let user = null;\n    const data = localStorage.getItem('me');\n\n    try {\n      if (data) {\n        user = JSON.parse(data);\n        console.log(\"user get from Localstorage: \", user);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    return user;\n  }\n\n  setCurrentUser(user) {\n    this.user = user;\n\n    if (user) {\n      localStorage.setItem('me', JSON.stringify(user));\n    }\n\n    this.update();\n  }\n\n  login(email, password) {\n    const userEmail = _.toLower(email);\n\n    const _this = this;\n\n    return new Promise((resolve, reject) => {\n      const user = users.find(user => user.email === userEmail);\n\n      if (user) {\n        _this.setCurrentUser(user);\n      }\n\n      return user ? resolve(user) : reject(\"User not found!\");\n    });\n  }\n\n  addUserToChannel(channelId, userId) {\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      channel.members = channel.members.set(userId, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  searchUsers(search = \"\") {\n    const keyword = _.toLower(search);\n\n    let searchItems = new OrderedMap();\n    const currentUser = this.getCurrentUser();\n\n    const currentUserId = _.get(currentUser, '_id');\n\n    if (_.trim(search).length) {\n      searchItems = users.filter(user => _.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n    }\n\n    return searchItems.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, \"_id\");\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId);\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    const user = this.getCurrentUser();\n    message.user = user;\n    this.messages = this.messages.set(`${id}`, message); //add new message to \n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      let channel = this.channels.get(channelId);\n      channel.isNew = false;\n      channel.lastMessage = _.get(message, 'body', '');\n      channel.messages = channel.messages.set(id, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  removeMemberFromChannel(channel = null, user = null) {\n    if (!channel || !user) {\n      return;\n    }\n\n    const channelId = _.get(channel, '_id');\n\n    const userId = _.get(user, '_id');\n\n    channel.members = channel.members.remove(userId);\n    this.channels = this.channels.set(channelId, channel);\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = new OrderedMap();\n\n    if (channel) {\n      channel.messages.forEach((value, key) => {\n        const message = this.messages.get(key);\n        messages = messages.set(key, message);\n      });\n    }\n\n    return messages.valueSeq();\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.forEach((value, key) => {\n        const user = users.get(key);\n        const loggedUser = this.getCurrentUser();\n\n        if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n          members = members.set(key, user);\n        }\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    this.channels = this.channels.sort((a, b) => b.created - a.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/store.js"],"names":["OrderedMap","_","users","_id","name","email","created","Date","avatar","Store","constructor","appComponent","app","messages","channels","activeChannelId","user","getUserFromLocalStorage","signOut","localStorage","removeItem","data","getItem","JSON","parse","console","log","err","setCurrentUser","setItem","stringify","update","login","password","userEmail","toLower","_this","Promise","resolve","reject","find","addUserToChannel","channelId","userId","channel","get","members","set","searchUsers","search","keyword","searchItems","currentUser","getCurrentUser","currentUserId","trim","length","filter","includes","valueSeq","onCreateNewChannel","addChannel","setActiveChannelId","id","getActiveChannel","first","addMessage","message","isNew","lastMessage","removeMemberFromChannel","remove","getMessages","getMessagesFromChannel","forEach","value","key","getMembersFromChannel","loggedUser","index","getChannels","sort","a","b","forceUpdate"],"mappings":"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","sourcesContent":["import { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\n\r\n\r\nconst users = OrderedMap({\r\n    '1': {_id:'1', name:\"nDs\", email:\"nds@gmail.com\", created: new Date(), avatar:\"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"},\r\n    '2': {_id:'2', name:\"nDs0\", email:\"nds0@gmail.com\", created: new Date(), avatar:\"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"},\r\n    '3': {_id:'3', name:\"nDs1\", email:\"nds1@gmail.com\", created: new Date() ,avatar:\"https://cdn.pixabay.com/photo/2018/05/19/22/03/man-3414477_960_720.png\"},\r\n})\r\nexport default class Store {\r\n    constructor(appComponent){\r\n        this.app = appComponent;\r\n        this.messages = new OrderedMap();\r\n        this.channels = new OrderedMap();\r\n        this.activeChannelId = null;\r\n        this.user = this.getUserFromLocalStorage();\r\n    }\r\n    signOut(){\r\n        this.user = null;\r\n        localStorage.removeItem('me');\r\n    }\r\n    getUserFromLocalStorage(){\r\n\r\n        let user = null;\r\n        const data = localStorage.getItem('me');\r\n         try {\r\n            if(data) {\r\n                user = JSON.parse(data);\r\n                console.log(\"user get from Localstorage: \",user);\r\n            }\r\n         }\r\n         catch(err) {\r\n             console.log(err);\r\n         }\r\n         return user;\r\n    }    \r\n        \r\n    \r\n    setCurrentUser(user){\r\n        this.user = user;\r\n        if(user){\r\n            localStorage.setItem('me', JSON.stringify(user));\r\n        }\r\n        this.update();\r\n    }\r\n\r\n\r\n    login(email, password){\r\n\r\n        const userEmail = _.toLower(email);\r\n        const _this = this;\r\n        return new Promise((resolve, reject) => {\r\n            const user = users.find((user) => user.email === userEmail);\r\n            if( user ) {\r\n                _this.setCurrentUser(user);\r\n            }\r\n            return user ? resolve(user) : reject(\"User not found!\")\r\n        });\r\n    }\r\n\r\n    addUserToChannel(channelId, userId) {\r\n        const channel = this.channels.get(channelId);\r\n        if(channel) {\r\n            channel.members = channel.members.set(userId, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n    searchUsers(search = \"\"){\r\n        const keyword = _.toLower(search);\r\n        let searchItems = new OrderedMap();\r\n        const currentUser =this.getCurrentUser();\r\n        const currentUserId = _.get(currentUser, '_id');\r\n       \r\n        if(_.trim(search).length){\r\n           searchItems = users.filter((user) =>_.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\r\n        }\r\n\r\n        return searchItems.valueSeq();\r\n    }\r\n\r\n    onCreateNewChannel(channel = {}){\r\n        const channelId = _.get(channel, \"_id\");\r\n        this.addChannel(channelId, channel );\r\n        this.setActiveChannelId(channelId);\r\n    \r\n    }\r\n\r\n    getCurrentUser(){\r\n        return this.user;\r\n    }\r\n\r\n    setActiveChannelId(id) {\r\n        this.activeChannelId = id;\r\n        this.update();\r\n    }\r\n    getActiveChannel(){\r\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\r\n        return channel;\r\n    }\r\n\r\n    addMessage(id, message = {}){\r\n\r\n        const user = this.getCurrentUser();\r\n        message.user = user;\r\n        this.messages = this.messages.set(`${id}`, message);\r\n        //add new message to \r\n        const channelId = _.get(message, 'channelId');\r\n        if(channelId){\r\n            let channel = this.channels.get(channelId);\r\n            channel.isNew = false;\r\n            channel.lastMessage = _.get(message, 'body', '');\r\n            channel.messages = channel.messages.set(id, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeMemberFromChannel( channel = null, user = null){\r\n        if(!channel || !user ){\r\n            return;\r\n        }\r\n        const channelId = _.get(channel, '_id')\r\n        const userId = _.get(user, '_id');\r\n        channel.members = channel.members.remove(userId);\r\n        this.channels = this.channels.set(channelId, channel);\r\n        this.update();\r\n    }\r\n\r\n    getMessages(){\r\n        return this.messages.valueSeq();\r\n    }\r\n    getMessagesFromChannel(channel){\r\n        let messages = new OrderedMap();\r\n\r\n        if(channel){\r\n            channel.messages.forEach((value, key) => {\r\n\r\n                const message = this.messages.get(key);\r\n                messages = messages.set( key, message);\r\n    \r\n            });\r\n        }\r\n        return messages.valueSeq();\r\n        \r\n    }\r\n\r\n    getMembersFromChannel(channel){\r\n        let members = new OrderedMap();\r\n        if(channel){\r\n            channel.members.forEach((value, key) => {\r\n                const user = users.get(key);\r\n                const loggedUser = this.getCurrentUser();\r\n                if( _.get(loggedUser, '_id') !== _.get(user, '_id')){\r\n                    members = members.set(key, user)\r\n                }\r\n            });\r\n               \r\n        }\r\n        return members.valueSeq();\r\n    }\r\n\r\n\r\n    addChannel(index, channel = {}){\r\n        this.channels = this.channels.set(`${index}`, channel);\r\n        this.update();\r\n    }\r\n\r\n    getChannels(){\r\n        this.channels = this.channels.sort((a, b) => b.created - a.created);\r\n        return this.channels.valueSeq();\r\n    }\r\n    update(){\r\n        this.app.forceUpdate();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}