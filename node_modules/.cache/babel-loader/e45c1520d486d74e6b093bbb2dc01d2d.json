{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nconst users = OrderedMap({\n  '1': {\n    _id: '1',\n    name: \"nDs\",\n    created: new Date(),\n    avatar: \"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"\n  },\n  '2': {\n    _id: '2',\n    name: \"nDs0\",\n    created: new Date(),\n    avatar: \"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"\n  },\n  '3': {\n    _id: '3',\n    name: \"nDs1\",\n    created: new Date(),\n    avatar: \"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"\n  }\n});\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = {\n      _id: '1',\n      name: 'nDs',\n      created: new Date()\n    };\n  }\n\n  searchUsers(search = \"\") {\n    let searchItems = new OrderedMap();\n\n    if (_.trim(search).length) {\n      users.filter(user => {\n        const name = _.get(user, 'name');\n\n        const userId = _.get(user, '_id');\n\n        if (_.includes(name, search)) {\n          searchItems = searchItems.set(userId, user);\n        }\n      });\n    }\n\n    return users.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, \"_id\");\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId);\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    this.messages = this.messages.set(`${id}`, message); //add new message to \n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      const channel = this.channels.get(channelId);\n      channel.messages = channel.messages.set(id, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = [];\n\n    if (channel) {\n      channel.messages.map((value, key) => {\n        const message = this.messages.get(key);\n        messages.push(message);\n      });\n    }\n\n    return messages;\n  }\n\n  getMembersFromChannel(channel) {\n    const members = [];\n\n    if (channel) {\n      channel.members.map((value, key) => {\n        const member = users.get(key);\n        members.push(member);\n      });\n    }\n\n    return members;\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    this.channels = this.channels.sort((a, b) => b.created - a.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/store.js"],"names":["OrderedMap","_","users","_id","name","created","Date","avatar","Store","constructor","appComponent","app","messages","channels","activeChannelId","user","searchUsers","search","searchItems","trim","length","filter","get","userId","includes","set","valueSeq","onCreateNewChannel","channel","channelId","addChannel","setActiveChannelId","getCurrentUser","id","update","getActiveChannel","first","addMessage","message","getMessages","getMessagesFromChannel","map","value","key","push","getMembersFromChannel","members","member","index","getChannels","sort","a","b","forceUpdate"],"mappings":"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","sourcesContent":["import { OrderedMap } from 'immutable';\r\nimport _ from 'lodash';\r\n\r\n\r\nconst users = OrderedMap({\r\n    '1': {_id:'1', name:\"nDs\", created: new Date(), avatar:\"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"},\r\n    '2': {_id:'2', name:\"nDs0\", created: new Date(), avatar:\"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"},\r\n    '3': {_id:'3', name:\"nDs1\", created: new Date() ,avatar:\"https://cdn4.vectorstock.com/i/1000x1000/94/78/man-avatar-flat-design-social-media-hipster-user-vector-20649478.jpg\"},\r\n})\r\nexport default class Store {\r\n    constructor(appComponent){\r\n        this.app = appComponent;\r\n        this.messages = new OrderedMap();\r\n        this.channels = new OrderedMap();\r\n        this.activeChannelId = null;\r\n        this.user = {\r\n            _id: '1',\r\n            name: 'nDs',\r\n            created: new Date(),\r\n        }\r\n    }\r\n\r\n    searchUsers(search = \"\"){\r\n        let searchItems = new OrderedMap();\r\n       \r\n        if(_.trim(search).length){\r\n\r\n            users.filter((user) => {\r\n                const name = _.get(user, 'name');\r\n                const userId = _.get(user, '_id');\r\n\r\n                if(_.includes(name, search)){\r\n                    searchItems = searchItems.set(userId, user);\r\n                }\r\n            })\r\n        }\r\n        return users.valueSeq();\r\n    }\r\n    onCreateNewChannel(channel = {}){\r\n        const channelId = _.get(channel, \"_id\");\r\n        this.addChannel(channelId, channel );\r\n        this.setActiveChannelId(channelId);\r\n    }\r\n\r\n    getCurrentUser(){\r\n        return this.user;\r\n    }\r\n\r\n    setActiveChannelId(id) {\r\n        this.activeChannelId = id;\r\n        this.update();\r\n    }\r\n    getActiveChannel(){\r\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\r\n        return channel;\r\n    }\r\n\r\n    addMessage(id, message = {}){\r\n        this.messages = this.messages.set(`${id}`, message);\r\n\r\n        //add new message to \r\n        const channelId = _.get(message, 'channelId');\r\n        if(channelId){\r\n            const channel = this.channels.get(channelId);\r\n            channel.messages = channel.messages.set(id, true);\r\n            this.channels = this.channels.set(channelId, channel);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    getMessages(){\r\n        return this.messages.valueSeq();\r\n    }\r\n    getMessagesFromChannel(channel){\r\n        let messages = [];\r\n\r\n        if(channel){\r\n            channel.messages.map((value, key) => {\r\n\r\n                const message = this.messages.get(key);\r\n                messages.push(message);\r\n            });\r\n        }\r\n        return messages;\r\n        \r\n    }\r\n\r\n    getMembersFromChannel(channel){\r\n        const members = [];\r\n        if(channel){\r\n            channel.members.map((value, key) => {\r\n                const member = users.get(key);\r\n                members.push(member);\r\n            })\r\n        }\r\n        return members;\r\n    }\r\n\r\n\r\n    addChannel(index, channel = {}){\r\n        this.channels = this.channels.set(`${index}`, channel);\r\n        this.update();\r\n    }\r\n\r\n    getChannels(){\r\n        this.channels = this.channels.sort((a, b) => b.created - a.created);\r\n        return this.channels.valueSeq();\r\n    }\r\n    update(){\r\n        this.app.forceUpdate();\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}