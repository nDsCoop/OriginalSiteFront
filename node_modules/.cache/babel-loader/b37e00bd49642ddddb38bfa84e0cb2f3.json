{"ast":null,"code":"import _classCallCheck from\"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{OrderedMap}from\"immutable\";import _ from'lodash';var Realtime=/*#__PURE__*/function(){function Realtime(store){_classCallCheck(this,Realtime);this.store=store;this.ws=null;this.isConnected=false;this.connect();this.reconnect();}_createClass(Realtime,[{key:\"reconnect\",value:function reconnect(){var _this=this;var store=this.store;window.setInterval(function(){var user=store.getCurrentUser();if(user&&!_this.isConnected){_this.connect();}},3000);}},{key:\"decoMessage\",value:function decoMessage(msg){var message={};try{message=JSON.parse(msg);}catch(err){console.log(err);}return message;}},{key:\"readMessage\",value:function readMessage(msg){var store=this.store;var currentUser=store.getCurrentUser();var currentUserId=_.toString(_.get(currentUser,'_id'));var message=this.decoMessage(msg);var action=_.get(message,'action');var payload=_.get(message,'payload');switch(action){case'typing_status':console.log(payload);var obj=_.get(payload,'obj');var channelId=_.get(obj,'channelId');var typing=_.get(obj,'payload');var typier=_.get(obj,'typier');this.onUpdateTypestatus(channelId,typing,typier);break;case'user_offline':this.onUpdateUserStatus(payload,false);break;case'user_online':var isOnline=true;this.onUpdateUserStatus(payload,isOnline);break;case'message_added':var activeChannel=store.getActiveChannel();var notify=_.get(activeChannel,'_id')!==_.get(payload,'channelId')&&currentUserId!==_.get(payload,'userId');this.onAddMessage(payload,notify);break;default:break;case'channel_added'://to do check payload and insert new channel\nthis.onAddChannel(payload);break;}}},{key:\"onUpdateTypestatus\",value:function onUpdateTypestatus(channelId){var isTyping=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var typier=arguments.length>2?arguments[2]:undefined;var store=this.store;store.channels=store.channels.update(channelId,function(channel){if(channel){channel.typing=isTyping;channel.typier=typier;}return channel;});store.update();}},{key:\"onUpdateUserStatus\",value:function onUpdateUserStatus(userId){var isOnline=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var store=this.store;store.users=store.users.update(userId,function(user){if(user){user.online=isOnline;}return user;});store.update();}},{key:\"onAddMessage\",value:function onAddMessage(payload){var notify=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var user=_.get(payload,'user');var store=this.store;var currentUser=store.getCurrentUser();var currentUserId=_.toString(_.get(currentUser,'_id'));//add user to cache\nuser=store.addUserToCache(user);var messageObject={_id:payload._id,body:_.get(payload,'body',''),userId:_.get(payload,'userId'),channelId:_.get(payload,'channelId'),created:_.get(payload,'created',new Date()),type:_.get(payload,'type'),me:currentUserId===_.toString(_.get(payload,'userId')),user:user};console.log(\"Mess listen from fetch: \",messageObject);store.setMessage(messageObject,notify);}},{key:\"onAddChannel\",value:function onAddChannel(payload){var _this2=this;var store=this.store;var channelId=\"\".concat(payload._id);var userId=\"\".concat(payload.userId);var users=_.get(payload,'users',[]);var channel={_id:channelId,title:_.get(payload,'title',''),lastMessage:_.get(payload,'lastMessage',''),members:new OrderedMap(),messages:new OrderedMap(),isNew:false,userId:userId,created:new Date(),typing:false};_.each(users,function(user){//add this user to store.users collection\nvar memberId=\"\".concat(user._id);_this2.store.addUserToCache(user);channel.members=channel.members.set(memberId,true);});var channelMessages=store.messages.filter(function(m){return _.toString(m.channelId)===channelId;});channelMessages.forEach(function(msg){var msgId=_.toString(_.get(msg,'_id'));channel.messages=channel.messages.set(msgId,true);});store.addChannel(channelId,channel);}},{key:\"send\",value:function send(){var msg=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var isConnected=this.isConnected;if(this.ws&&isConnected){var msgString=JSON.stringify(msg);this.ws.send(msgString);}}},{key:\"authentication\",value:function authentication(){var store=this.store;var tokenId=store.getUserTokenId();var message={action:'auth',payload:\"\".concat(tokenId)};this.send(message);}},{key:\"connect\",value:function connect(){var _this3=this;var ws=new WebSocket('ws://localhost:8080');this.ws=ws;ws.onopen=function(){//tell to server who are you ?\n_this3.isConnected=true;_this3.authentication();ws.onmessage=function(e){_this3.readMessage(_.get(e,'data',''));console.log(\"Message from server: \",e.data);};};ws.onclose=function(){_this3.isConnected=false;_this3.store.update();};ws.onerror=function(){_this3.isConnected=false;_this3.store.update();};}}]);return Realtime;}();export{Realtime as default};","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/realtime.js"],"names":["OrderedMap","_","Realtime","store","ws","isConnected","connect","reconnect","window","setInterval","user","getCurrentUser","msg","message","JSON","parse","err","console","log","currentUser","currentUserId","toString","get","decoMessage","action","payload","obj","channelId","typing","typier","onUpdateTypestatus","onUpdateUserStatus","isOnline","activeChannel","getActiveChannel","notify","onAddMessage","onAddChannel","isTyping","channels","update","channel","userId","users","online","addUserToCache","messageObject","_id","body","created","Date","type","me","setMessage","title","lastMessage","members","messages","isNew","each","memberId","set","channelMessages","filter","m","forEach","msgId","addChannel","msgString","stringify","send","tokenId","getUserTokenId","WebSocket","onopen","authentication","onmessage","e","readMessage","data","onclose","onerror"],"mappings":"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","sourcesContent":["import { OrderedMap } from \"immutable\";\r\nimport _ from 'lodash';\r\n\r\nexport default class Realtime{\r\n\r\n    constructor(store){\r\n        this.store = store;\r\n        this.ws = null;\r\n        this.isConnected = false;\r\n        this.connect();\r\n        this.reconnect();\r\n\r\n    }\r\n    reconnect(){\r\n        const store = this.store;\r\n        window.setInterval(() => {\r\n            const user = store.getCurrentUser();\r\n            if(user && !this.isConnected) {\r\n                this.connect();\r\n            }\r\n        }, 3000)\r\n    }\r\n    decoMessage(msg){\r\n        let message = {};\r\n        try{\r\n            message = JSON.parse(msg);\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        return message;\r\n    }\r\n    readMessage(msg){\r\n        const store = this.store;\r\n        const currentUser = store.getCurrentUser();\r\n        const currentUserId = _.toString(_.get(currentUser, '_id'));\r\n        const message = this.decoMessage(msg);\r\n        const action = _.get(message, 'action');\r\n        const payload = _.get(message, 'payload');\r\n\r\n        switch(action){\r\n            case 'typing_status':\r\n                console.log(payload);\r\n                const obj = _.get(payload, 'obj');\r\n                const channelId =  _.get(obj, 'channelId');\r\n                let typing = _.get(obj, 'payload');\r\n                let typier = _.get(obj, 'typier');\r\n                this.onUpdateTypestatus(channelId, typing, typier);\r\n                break;\r\n            case 'user_offline':\r\n                \r\n                this.onUpdateUserStatus(payload, false);\r\n                break;\r\n            case 'user_online':\r\n                const isOnline = true;\r\n                this.onUpdateUserStatus(payload, isOnline);\r\n                break;\r\n            case 'message_added':\r\n                \r\n                const activeChannel = store.getActiveChannel();\r\n                let notify = _.get(activeChannel, '_id') !== _.get(payload, 'channelId') && currentUserId !== _.get(payload, 'userId');\r\n                this.onAddMessage(payload, notify);\r\n\r\n            break;\r\n            default:\r\n                break;\r\n            case 'channel_added':\r\n                //to do check payload and insert new channel\r\n                this.onAddChannel(payload);\r\n                break;\r\n        }\r\n    }\r\n    onUpdateTypestatus(channelId, isTyping = false, typier){\r\n        const store = this.store;\r\n        store.channels = store.channels.update(channelId, (channel) => {\r\n            if(channel){\r\n                channel.typing = isTyping;\r\n                channel.typier = typier;\r\n            }\r\n            return channel;\r\n        });\r\n        store.update();\r\n    }\r\n\r\n    onUpdateUserStatus(userId, isOnline = false){\r\n        const store = this.store;\r\n    \r\n        store.users = store.users.update(userId, (user) => {\r\n            if(user){\r\n                user.online = isOnline;\r\n            }\r\n            \r\n            return user;\r\n        });\r\n        store.update();\r\n        \r\n    }\r\n\r\n    onAddMessage(payload, notify = false){\r\n        let user = _.get(payload, 'user');\r\n        const store = this.store;\r\n        const currentUser = store.getCurrentUser();\r\n        const currentUserId = _.toString(_.get(currentUser, '_id'));\r\n        \r\n        //add user to cache\r\n        user = store.addUserToCache(user);\r\n\r\n        const messageObject = {\r\n            _id: payload._id,\r\n            body: _.get(payload, 'body', ''),\r\n            userId: _.get(payload, 'userId'),\r\n            channelId: _.get(payload, 'channelId'),\r\n            created: _.get(payload, 'created', new Date()),\r\n            type: _.get(payload, 'type'),\r\n            me: currentUserId === _.toString(_.get(payload, 'userId')),\r\n            user: user,\r\n        };\r\n        console.log(\"Mess listen from fetch: \", messageObject);\r\n        store.setMessage(messageObject, notify);\r\n\r\n    }\r\n\r\n    onAddChannel(payload){\r\n        const store = this.store;\r\n        const channelId = `${payload._id}`;\r\n        const userId = `${payload.userId}`;\r\n        const users = _.get(payload, 'users', []);\r\n        let channel = { \r\n            \r\n            _id:channelId,  \r\n            title: _.get(payload, 'title', '' ),\r\n            lastMessage: _.get(payload, 'lastMessage', ''),\r\n            members: new OrderedMap(),\r\n            messages: new OrderedMap(),\r\n            isNew: false,\r\n            userId: userId,\r\n            created: new Date(),\r\n            typing: false,\r\n        };\r\n        _.each(users, (user) => {\r\n            //add this user to store.users collection\r\n            const memberId = `${user._id}`;\r\n            this.store.addUserToCache(user);\r\n            channel.members = channel.members.set(memberId, true);\r\n        });\r\n        const channelMessages = store.messages.filter((m) => _.toString(m.channelId) === channelId);\r\n        channelMessages.forEach((msg) => {\r\n            const msgId = _.toString(_.get(msg, '_id'));\r\n            channel.messages = channel.messages.set(msgId, true);\r\n        })\r\n        store.addChannel(channelId, channel);\r\n    }\r\n    send( msg = {}){\r\n        const isConnected = this.isConnected;\r\n        if(this.ws && isConnected){\r\n            const msgString = JSON.stringify(msg);\r\n            this.ws.send(msgString);\r\n        }\r\n    }\r\n    authentication(){\r\n        const store = this.store;\r\n        const tokenId = store.getUserTokenId();\r\n        const message = {\r\n            action: 'auth',\r\n            payload: `${tokenId}`\r\n        }\r\n            this.send(message);\r\n    }\r\n\r\n    connect(){\r\n\r\n        const ws = new WebSocket('ws://localhost:8080');\r\n        this.ws = ws;\r\n        ws.onopen = () => {\r\n            //tell to server who are you ?\r\n            this.isConnected = true;\r\n            this.authentication();\r\n            \r\n            ws.onmessage = (e) => {\r\n                this.readMessage(_.get(e, 'data',''));\r\n                console.log(\"Message from server: \", e.data);\r\n            }\r\n        }\r\n\r\n        ws.onclose = () => {\r\n            this.isConnected = false;\r\n            this.store.update();\r\n\r\n        }\r\n\r\n        ws.onerror = () => {\r\n            this.isConnected = false;\r\n            this.store.update();\r\n        }\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}