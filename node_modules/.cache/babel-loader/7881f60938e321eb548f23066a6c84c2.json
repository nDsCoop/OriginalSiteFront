{"ast":null,"code":"import { OrderedMap } from \"immutable\";\nimport _ from 'lodash';\nexport default class Realtime {\n  constructor(store) {\n    this.store = store;\n    this.ws = null;\n    this.isConnected = false;\n    this.connect();\n  }\n\n  decoMessage(msg) {\n    let message = {};\n\n    try {\n      message = JSON.parse(msg);\n    } catch (err) {\n      console.log(err);\n    }\n\n    return message;\n  }\n\n  readMessage(msg) {\n    const store = this.store;\n    const currentUser = store.getCurrentUser();\n\n    const currentUserId = _.toString(_.get(currentUser, '_id'));\n\n    const message = this.decoMessage(msg);\n\n    const action = _.get(message, 'action');\n\n    const payload = _.get(message, 'payload');\n\n    switch (action) {\n      case 'message_added':\n        let user = _.get(payload, 'user'); //add user to cache\n\n\n        user = store.addUserToCache(user);\n        const messageObject = {\n          _id: payload._id,\n          body: _.get(payload, 'body', ''),\n          userId: _.get(payload, 'userId'),\n          channelId: _.get(payload, 'channelId'),\n          created: _.get(payload, 'created', new Date()),\n          me: currentUserId === _.toString(_.get(payload, 'userId')),\n          user: user\n        };\n        console.log(\"Mess listen from server to client: \", messageObject);\n        store.setMessage(messageObject);\n        break;\n\n      case 'channel_added':\n        //to do check payload and insert new channel\n        this.onAddChannel(payload);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  onAddChannel(payload) {\n    const store = this.store;\n    const channelId = `${payload._id}`;\n    const userId = `${payload.userId}`;\n\n    const users = _.get(payload, 'users', []);\n\n    let channel = {\n      _id: channelId,\n      title: _.get(payload, 'title', ''),\n      lastMessage: _.get(payload, 'lastMessage', ''),\n      members: new OrderedMap(),\n      messages: new OrderedMap(),\n      isNew: false,\n      userId: userId,\n      created: new Date()\n    };\n\n    _.each(users, user => {\n      //add this user to store.users collection\n      const memberId = `${user._id}`;\n      this.store.addUserToCache(user);\n      channel.members = channel.members.set(memberId, true);\n    });\n\n    const channelMessages = store.messages.filter(m => _.toString(m.channelId) === channelId);\n    channelMessages.forEach(msg => {\n      const msgId = _.toString(_.get(msg, '_id'));\n\n      channel.messages = channel.messages.set(msgID, true);\n    });\n    store.addChannel(channelId, channel);\n  }\n\n  send(msg = {}) {\n    const isConnected = this.isConnected;\n\n    if (isConnected) {\n      const msgString = JSON.stringify(msg);\n      this.ws.send(msgString);\n    }\n  }\n\n  authentication() {\n    const store = this.store;\n    const tokenId = store.getUserTokenId();\n    const message = {\n      action: 'auth',\n      payload: `${tokenId}`\n    };\n    this.send(message);\n  }\n\n  connect() {\n    const ws = new WebSocket('ws://localhost:8080');\n    this.ws = ws;\n\n    ws.onopen = () => {\n      //tell to server who are you ?\n      this.isConnected = true;\n      this.authentication();\n\n      ws.onmessage = e => {\n        this.readMessage(_.get(e, 'data', ''));\n        console.log(\"Message from server: \", e.data);\n      };\n    };\n\n    ws.onclose = () => {\n      this.isConnected = false; //\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/realtime.js"],"names":["OrderedMap","_","Realtime","constructor","store","ws","isConnected","connect","decoMessage","msg","message","JSON","parse","err","console","log","readMessage","currentUser","getCurrentUser","currentUserId","toString","get","action","payload","user","addUserToCache","messageObject","_id","body","userId","channelId","created","Date","me","setMessage","onAddChannel","users","channel","title","lastMessage","members","messages","isNew","each","memberId","set","channelMessages","filter","m","forEach","msgId","msgID","addChannel","send","msgString","stringify","authentication","tokenId","getUserTokenId","WebSocket","onopen","onmessage","e","data","onclose"],"mappings":"AAAA,SAASA,UAAT,QAA2B,WAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,eAAe,MAAMC,QAAN,CAAc;AAEzBC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,OAAL;AAEH;;AACDC,EAAAA,WAAW,CAACC,GAAD,EAAK;AACZ,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAG;AACCA,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAV;AACH,KAFD,CAGA,OAAMI,GAAN,EAAU;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;;AACD,WAAOH,OAAP;AACH;;AACDM,EAAAA,WAAW,CAACP,GAAD,EAAK;AACZ,UAAML,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMa,WAAW,GAAGb,KAAK,CAACc,cAAN,EAApB;;AACA,UAAMC,aAAa,GAAGlB,CAAC,CAACmB,QAAF,CAAWnB,CAAC,CAACoB,GAAF,CAAMJ,WAAN,EAAmB,KAAnB,CAAX,CAAtB;;AAEA,UAAMP,OAAO,GAAG,KAAKF,WAAL,CAAiBC,GAAjB,CAAhB;;AAGA,UAAMa,MAAM,GAAGrB,CAAC,CAACoB,GAAF,CAAMX,OAAN,EAAe,QAAf,CAAf;;AACA,UAAMa,OAAO,GAAGtB,CAAC,CAACoB,GAAF,CAAMX,OAAN,EAAe,SAAf,CAAhB;;AAEA,YAAOY,MAAP;AACI,WAAK,eAAL;AACI,YAAIE,IAAI,GAAGvB,CAAC,CAACoB,GAAF,CAAME,OAAN,EAAe,MAAf,CAAX,CADJ,CAGI;;;AACAC,QAAAA,IAAI,GAAGpB,KAAK,CAACqB,cAAN,CAAqBD,IAArB,CAAP;AAEA,cAAME,aAAa,GAAG;AAClBC,UAAAA,GAAG,EAAEJ,OAAO,CAACI,GADK;AAElBC,UAAAA,IAAI,EAAE3B,CAAC,CAACoB,GAAF,CAAME,OAAN,EAAe,MAAf,EAAuB,EAAvB,CAFY;AAGlBM,UAAAA,MAAM,EAAE5B,CAAC,CAACoB,GAAF,CAAME,OAAN,EAAe,QAAf,CAHU;AAIlBO,UAAAA,SAAS,EAAE7B,CAAC,CAACoB,GAAF,CAAME,OAAN,EAAe,WAAf,CAJO;AAKlBQ,UAAAA,OAAO,EAAE9B,CAAC,CAACoB,GAAF,CAAME,OAAN,EAAe,SAAf,EAA0B,IAAIS,IAAJ,EAA1B,CALS;AAMlBC,UAAAA,EAAE,EAAEd,aAAa,KAAKlB,CAAC,CAACmB,QAAF,CAAWnB,CAAC,CAACoB,GAAF,CAAME,OAAN,EAAe,QAAf,CAAX,CANJ;AAOlBC,UAAAA,IAAI,EAAEA;AAPY,SAAtB;AASAV,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDW,aAAnD;AACAtB,QAAAA,KAAK,CAAC8B,UAAN,CAAiBR,aAAjB;AAGA;;AAEJ,WAAK,eAAL;AAEA;AAEI,aAAKS,YAAL,CAAkBZ,OAAlB;AACJ;;AACA;AACI;AA7BR;AA+BH;;AAEDY,EAAAA,YAAY,CAACZ,OAAD,EAAS;AACjB,UAAMnB,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAM0B,SAAS,GAAI,GAAEP,OAAO,CAACI,GAAI,EAAjC;AACA,UAAME,MAAM,GAAI,GAAEN,OAAO,CAACM,MAAO,EAAjC;;AACA,UAAMO,KAAK,GAAGnC,CAAC,CAACoB,GAAF,CAAME,OAAN,EAAe,OAAf,EAAwB,EAAxB,CAAd;;AACA,QAAIc,OAAO,GAAG;AACVV,MAAAA,GAAG,EAACG,SADM;AAEVQ,MAAAA,KAAK,EAAErC,CAAC,CAACoB,GAAF,CAAME,OAAN,EAAe,OAAf,EAAwB,EAAxB,CAFG;AAGVgB,MAAAA,WAAW,EAAEtC,CAAC,CAACoB,GAAF,CAAME,OAAN,EAAe,aAAf,EAA8B,EAA9B,CAHH;AAIViB,MAAAA,OAAO,EAAE,IAAIxC,UAAJ,EAJC;AAKVyC,MAAAA,QAAQ,EAAE,IAAIzC,UAAJ,EALA;AAMV0C,MAAAA,KAAK,EAAE,KANG;AAOVb,MAAAA,MAAM,EAAEA,MAPE;AAQVE,MAAAA,OAAO,EAAE,IAAIC,IAAJ;AARC,KAAd;;AAUA/B,IAAAA,CAAC,CAAC0C,IAAF,CAAOP,KAAP,EAAeZ,IAAD,IAAU;AACpB;AACA,YAAMoB,QAAQ,GAAI,GAAEpB,IAAI,CAACG,GAAI,EAA7B;AACA,WAAKvB,KAAL,CAAWqB,cAAX,CAA0BD,IAA1B;AACAa,MAAAA,OAAO,CAACG,OAAR,GAAkBH,OAAO,CAACG,OAAR,CAAgBK,GAAhB,CAAoBD,QAApB,EAA8B,IAA9B,CAAlB;AACH,KALD;;AAMA,UAAME,eAAe,GAAG1C,KAAK,CAACqC,QAAN,CAAeM,MAAf,CAAuBC,CAAD,IAAO/C,CAAC,CAACmB,QAAF,CAAW4B,CAAC,CAAClB,SAAb,MAA4BA,SAAzD,CAAxB;AACAgB,IAAAA,eAAe,CAACG,OAAhB,CAAyBxC,GAAD,IAAS;AAC7B,YAAMyC,KAAK,GAAGjD,CAAC,CAACmB,QAAF,CAAWnB,CAAC,CAACoB,GAAF,CAAMZ,GAAN,EAAW,KAAX,CAAX,CAAd;;AACA4B,MAAAA,OAAO,CAACI,QAAR,GAAmBJ,OAAO,CAACI,QAAR,CAAiBI,GAAjB,CAAqBM,KAArB,EAA4B,IAA5B,CAAnB;AACH,KAHD;AAIA/C,IAAAA,KAAK,CAACgD,UAAN,CAAiBtB,SAAjB,EAA4BO,OAA5B;AACH;;AACDgB,EAAAA,IAAI,CAAE5C,GAAG,GAAG,EAAR,EAAW;AACX,UAAMH,WAAW,GAAG,KAAKA,WAAzB;;AACA,QAAGA,WAAH,EAAe;AACX,YAAMgD,SAAS,GAAG3C,IAAI,CAAC4C,SAAL,CAAe9C,GAAf,CAAlB;AACA,WAAKJ,EAAL,CAAQgD,IAAR,CAAaC,SAAb;AACH;AACJ;;AACDE,EAAAA,cAAc,GAAE;AACZ,UAAMpD,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMqD,OAAO,GAAGrD,KAAK,CAACsD,cAAN,EAAhB;AACA,UAAMhD,OAAO,GAAG;AACZY,MAAAA,MAAM,EAAE,MADI;AAEZC,MAAAA,OAAO,EAAG,GAAEkC,OAAQ;AAFR,KAAhB;AAII,SAAKJ,IAAL,CAAU3C,OAAV;AACP;;AAEDH,EAAAA,OAAO,GAAE;AAEL,UAAMF,EAAE,GAAG,IAAIsD,SAAJ,CAAc,qBAAd,CAAX;AACA,SAAKtD,EAAL,GAAUA,EAAV;;AACAA,IAAAA,EAAE,CAACuD,MAAH,GAAY,MAAM;AACd;AACA,WAAKtD,WAAL,GAAmB,IAAnB;AACA,WAAKkD,cAAL;;AAEAnD,MAAAA,EAAE,CAACwD,SAAH,GAAgBC,CAAD,IAAO;AAClB,aAAK9C,WAAL,CAAiBf,CAAC,CAACoB,GAAF,CAAMyC,CAAN,EAAS,MAAT,EAAgB,EAAhB,CAAjB;AACAhD,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqC+C,CAAC,CAACC,IAAvC;AACH,OAHD;AAIH,KATD;;AAUA1D,IAAAA,EAAE,CAAC2D,OAAH,GAAa,MAAM;AACf,WAAK1D,WAAL,GAAmB,KAAnB,CADe,CAEf;AACH,KAHD;AAIH;;AA9HwB","sourcesContent":["import { OrderedMap } from \"immutable\";\r\nimport _ from 'lodash';\r\n\r\nexport default class Realtime{\r\n\r\n    constructor(store){\r\n        this.store = store;\r\n        this.ws = null;\r\n        this.isConnected = false;\r\n        this.connect();\r\n\r\n    }\r\n    decoMessage(msg){\r\n        let message = {};\r\n        try{\r\n            message = JSON.parse(msg);\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        return message;\r\n    }\r\n    readMessage(msg){\r\n        const store = this.store;\r\n        const currentUser = store.getCurrentUser();\r\n        const currentUserId = _.toString(_.get(currentUser, '_id'));\r\n\r\n        const message = this.decoMessage(msg);\r\n        \r\n        \r\n        const action = _.get(message, 'action');\r\n        const payload = _.get(message, 'payload');\r\n\r\n        switch(action){\r\n            case 'message_added':\r\n                let user = _.get(payload, 'user');\r\n\r\n                //add user to cache\r\n                user = store.addUserToCache(user);\r\n\r\n                const messageObject = {\r\n                    _id: payload._id,\r\n                    body: _.get(payload, 'body', ''),\r\n                    userId: _.get(payload, 'userId'),\r\n                    channelId: _.get(payload, 'channelId'),\r\n                    created: _.get(payload, 'created', new Date()),\r\n                    me: currentUserId === _.toString(_.get(payload, 'userId')),\r\n                    user: user,\r\n                };\r\n                console.log(\"Mess listen from server to client: \", messageObject);\r\n                store.setMessage(messageObject);\r\n               \r\n\r\n                break;\r\n\r\n            case 'channel_added':\r\n\r\n            //to do check payload and insert new channel\r\n          \r\n                this.onAddChannel(payload);\r\n            break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onAddChannel(payload){\r\n        const store = this.store;\r\n        const channelId = `${payload._id}`;\r\n        const userId = `${payload.userId}`;\r\n        const users = _.get(payload, 'users', []);\r\n        let channel = { \r\n            _id:channelId,  \r\n            title: _.get(payload, 'title', '' ),\r\n            lastMessage: _.get(payload, 'lastMessage', ''),\r\n            members: new OrderedMap(),\r\n            messages: new OrderedMap(),\r\n            isNew: false,\r\n            userId: userId,\r\n            created: new Date(),\r\n        };\r\n        _.each(users, (user) => {\r\n            //add this user to store.users collection\r\n            const memberId = `${user._id}`;\r\n            this.store.addUserToCache(user);\r\n            channel.members = channel.members.set(memberId, true);\r\n        });\r\n        const channelMessages = store.messages.filter((m) => _.toString(m.channelId) === channelId);\r\n        channelMessages.forEach((msg) => {\r\n            const msgId = _.toString(_.get(msg, '_id'));\r\n            channel.messages = channel.messages.set(msgID, true);\r\n        })\r\n        store.addChannel(channelId, channel);\r\n    }\r\n    send( msg = {}){\r\n        const isConnected = this.isConnected;\r\n        if(isConnected){\r\n            const msgString = JSON.stringify(msg);\r\n            this.ws.send(msgString);\r\n        }\r\n    }\r\n    authentication(){\r\n        const store = this.store;\r\n        const tokenId = store.getUserTokenId();\r\n        const message = {\r\n            action: 'auth',\r\n            payload: `${tokenId}`\r\n        }\r\n            this.send(message);\r\n    }\r\n\r\n    connect(){\r\n\r\n        const ws = new WebSocket('ws://localhost:8080');\r\n        this.ws = ws;\r\n        ws.onopen = () => {\r\n            //tell to server who are you ?\r\n            this.isConnected = true;\r\n            this.authentication();\r\n            \r\n            ws.onmessage = (e) => {\r\n                this.readMessage(_.get(e, 'data',''));\r\n                console.log(\"Message from server: \", e.data);\r\n            }\r\n        }\r\n        ws.onclose = () => {\r\n            this.isConnected = false;\r\n            //\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}