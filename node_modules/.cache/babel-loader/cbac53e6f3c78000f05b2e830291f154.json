{"ast":null,"code":"import { OrderedMap } from \"immutable\";\nimport _ from 'lodash';\nexport default class Realtime {\n  constructor(store) {\n    this.store = store;\n    this.ws = null;\n    this.isConnected = false;\n    this.connect();\n  }\n\n  decoMessage(msg) {\n    let message = {};\n\n    try {\n      message = JSON.parse(msg);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  readMessage(msg) {\n    const message = this.decoMessage(msg);\n\n    const action = _.get(message, 'action', '');\n\n    const payload = _.get(message, 'payload', '');\n\n    const store = this.store;\n\n    switch (action) {\n      case 'channel_added':\n        //to do check payload and insert new channel\n        const channelId = `${payload.id}`;\n        const userId = `${payload.userId}`;\n\n        const users = _.get(payload, 'users', []);\n\n        let channel = {\n          _id: channelId,\n          title: _.get(payload, 'title', ''),\n          lastMessage: _.get(payload, 'lastMessage', ''),\n          members: new OrderedMap(),\n          messages: new OrderedMap(),\n          isNew: false,\n          userId: userId,\n          created: new Date()\n        };\n\n        _.each(users, user => {\n          //add this user to store.users collection\n          const memberId = `${user._id}`;\n          this.store.adduserToCache(user);\n          channel.members = channel.members.set(memberId, true);\n        });\n\n        store.addChannel(channelId, channel);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  send(msg = {}) {\n    const isConnected = this.isConnected;\n\n    if (isConnected) {\n      const msgString = JSON.stringify(msg);\n      this.ws.send(msgString);\n    }\n  }\n\n  authentication() {\n    const store = this.store;\n    const tokenId = store.getUserTokenId();\n    const message = {\n      action: 'auth',\n      payload: `${tokenId}`\n    };\n    this.send(message);\n  }\n\n  connect() {\n    const ws = new WebSocket('ws://localhost:8080');\n    this.ws = ws;\n\n    ws.onopen = () => {\n      //tell to server who are you ?\n      this.isConnected = true;\n      this.authentication();\n\n      ws.onmessage = e => {\n        this.readMessage(_.get(e, 'data', ''));\n        console.log(\"Message from server: \", e.data);\n      };\n    };\n\n    ws.onclose = () => {\n      this.isConnected = false; //\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/realtime.js"],"names":["OrderedMap","_","Realtime","constructor","store","ws","isConnected","connect","decoMessage","msg","message","JSON","parse","err","console","log","readMessage","action","get","payload","channelId","id","userId","users","channel","_id","title","lastMessage","members","messages","isNew","created","Date","each","user","memberId","adduserToCache","set","addChannel","send","msgString","stringify","authentication","tokenId","getUserTokenId","WebSocket","onopen","onmessage","e","data","onclose"],"mappings":"AAAA,SAASA,UAAT,QAA2B,WAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,eAAe,MAAMC,QAAN,CAAc;AAEzBC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,OAAL;AAEH;;AACDC,EAAAA,WAAW,CAACC,GAAD,EAAK;AACZ,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAG;AACCA,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAV;AACH,KAFD,CAGA,OAAMI,GAAN,EAAU;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ;;AACDG,EAAAA,WAAW,CAACP,GAAD,EAAK;AACZ,UAAMC,OAAO,GAAG,KAAKF,WAAL,CAAiBC,GAAjB,CAAhB;;AACA,UAAMQ,MAAM,GAAGhB,CAAC,CAACiB,GAAF,CAAMR,OAAN,EAAe,QAAf,EAAyB,EAAzB,CAAf;;AACA,UAAMS,OAAO,GAAGlB,CAAC,CAACiB,GAAF,CAAMR,OAAN,EAAe,SAAf,EAA0B,EAA1B,CAAhB;;AACA,UAAMN,KAAK,GAAG,KAAKA,KAAnB;;AAEA,YAAOa,MAAP;AAEI,WAAK,eAAL;AAEA;AACA,cAAMG,SAAS,GAAI,GAAED,OAAO,CAACE,EAAG,EAAhC;AACA,cAAMC,MAAM,GAAI,GAAEH,OAAO,CAACG,MAAO,EAAjC;;AACA,cAAMC,KAAK,GAAGtB,CAAC,CAACiB,GAAF,CAAMC,OAAN,EAAe,OAAf,EAAwB,EAAxB,CAAd;;AACA,YAAIK,OAAO,GAAG;AACVC,UAAAA,GAAG,EAACL,SADM;AAEVM,UAAAA,KAAK,EAAEzB,CAAC,CAACiB,GAAF,CAAMC,OAAN,EAAe,OAAf,EAAwB,EAAxB,CAFG;AAGVQ,UAAAA,WAAW,EAAE1B,CAAC,CAACiB,GAAF,CAAMC,OAAN,EAAe,aAAf,EAA8B,EAA9B,CAHH;AAIVS,UAAAA,OAAO,EAAE,IAAI5B,UAAJ,EAJC;AAKV6B,UAAAA,QAAQ,EAAE,IAAI7B,UAAJ,EALA;AAMV8B,UAAAA,KAAK,EAAE,KANG;AAOVR,UAAAA,MAAM,EAAEA,MAPE;AAQVS,UAAAA,OAAO,EAAE,IAAIC,IAAJ;AARC,SAAd;;AAUA/B,QAAAA,CAAC,CAACgC,IAAF,CAAOV,KAAP,EAAeW,IAAD,IAAU;AACpB;AACA,gBAAMC,QAAQ,GAAI,GAAED,IAAI,CAACT,GAAI,EAA7B;AACA,eAAKrB,KAAL,CAAWgC,cAAX,CAA0BF,IAA1B;AACAV,UAAAA,OAAO,CAACI,OAAR,GAAkBJ,OAAO,CAACI,OAAR,CAAgBS,GAAhB,CAAoBF,QAApB,EAA8B,IAA9B,CAAlB;AACH,SALD;;AAOA/B,QAAAA,KAAK,CAACkC,UAAN,CAAiBlB,SAAjB,EAA4BI,OAA5B;AAEA;;AACA;AACI;AA7BR;AA+BH;;AACDe,EAAAA,IAAI,CAAE9B,GAAG,GAAG,EAAR,EAAW;AACX,UAAMH,WAAW,GAAG,KAAKA,WAAzB;;AACA,QAAGA,WAAH,EAAe;AACX,YAAMkC,SAAS,GAAG7B,IAAI,CAAC8B,SAAL,CAAehC,GAAf,CAAlB;AACA,WAAKJ,EAAL,CAAQkC,IAAR,CAAaC,SAAb;AACH;AACJ;;AACDE,EAAAA,cAAc,GAAE;AACZ,UAAMtC,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMuC,OAAO,GAAGvC,KAAK,CAACwC,cAAN,EAAhB;AACA,UAAMlC,OAAO,GAAG;AACZO,MAAAA,MAAM,EAAE,MADI;AAEZE,MAAAA,OAAO,EAAG,GAAEwB,OAAQ;AAFR,KAAhB;AAII,SAAKJ,IAAL,CAAU7B,OAAV;AACP;;AAEDH,EAAAA,OAAO,GAAE;AAEL,UAAMF,EAAE,GAAG,IAAIwC,SAAJ,CAAc,qBAAd,CAAX;AACA,SAAKxC,EAAL,GAAUA,EAAV;;AACAA,IAAAA,EAAE,CAACyC,MAAH,GAAY,MAAM;AACd;AACA,WAAKxC,WAAL,GAAmB,IAAnB;AACA,WAAKoC,cAAL;;AAEArC,MAAAA,EAAE,CAAC0C,SAAH,GAAgBC,CAAD,IAAO;AAClB,aAAKhC,WAAL,CAAiBf,CAAC,CAACiB,GAAF,CAAM8B,CAAN,EAAS,MAAT,EAAgB,EAAhB,CAAjB;AACAlC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCiC,CAAC,CAACC,IAAvC;AACH,OAHD;AAIH,KATD;;AAUA5C,IAAAA,EAAE,CAAC6C,OAAH,GAAa,MAAM;AACf,WAAK5C,WAAL,GAAmB,KAAnB,CADe,CAEf;AACH,KAHD;AAIH;;AA3FwB","sourcesContent":["import { OrderedMap } from \"immutable\";\r\nimport _ from 'lodash';\r\n\r\nexport default class Realtime{\r\n\r\n    constructor(store){\r\n        this.store = store;\r\n        this.ws = null;\r\n        this.isConnected = false;\r\n        this.connect();\r\n\r\n    }\r\n    decoMessage(msg){\r\n        let message = {};\r\n        try{\r\n            message = JSON.parse(msg);\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    readMessage(msg){\r\n        const message = this.decoMessage(msg);\r\n        const action = _.get(message, 'action', '');\r\n        const payload = _.get(message, 'payload', '');\r\n        const store = this.store;\r\n\r\n        switch(action){\r\n\r\n            case 'channel_added':\r\n\r\n            //to do check payload and insert new channel\r\n            const channelId = `${payload.id}`;\r\n            const userId = `${payload.userId}`;\r\n            const users = _.get(payload, 'users', []);\r\n            let channel = { \r\n                _id:channelId,  \r\n                title: _.get(payload, 'title', '' ),\r\n                lastMessage: _.get(payload, 'lastMessage', ''),\r\n                members: new OrderedMap(),\r\n                messages: new OrderedMap(),\r\n                isNew: false,\r\n                userId: userId,\r\n                created: new Date(),\r\n            };\r\n            _.each(users, (user) => {\r\n                //add this user to store.users collection\r\n                const memberId = `${user._id}`;\r\n                this.store.adduserToCache(user);\r\n                channel.members = channel.members.set(memberId, true);\r\n            });\r\n\r\n            store.addChannel(channelId, channel);\r\n\r\n            break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    send( msg = {}){\r\n        const isConnected = this.isConnected;\r\n        if(isConnected){\r\n            const msgString = JSON.stringify(msg);\r\n            this.ws.send(msgString);\r\n        }\r\n    }\r\n    authentication(){\r\n        const store = this.store;\r\n        const tokenId = store.getUserTokenId();\r\n        const message = {\r\n            action: 'auth',\r\n            payload: `${tokenId}`\r\n        }\r\n            this.send(message);\r\n    }\r\n\r\n    connect(){\r\n\r\n        const ws = new WebSocket('ws://localhost:8080');\r\n        this.ws = ws;\r\n        ws.onopen = () => {\r\n            //tell to server who are you ?\r\n            this.isConnected = true;\r\n            this.authentication();\r\n            \r\n            ws.onmessage = (e) => {\r\n                this.readMessage(_.get(e, 'data',''));\r\n                console.log(\"Message from server: \", e.data);\r\n            }\r\n        }\r\n        ws.onclose = () => {\r\n            this.isConnected = false;\r\n            //\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}