{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\MainVideo.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport Video from './Video';\nimport Videos from './Videos';\nexport class MainVideo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getLocalStream = () => {\n      // called when getUserMedia() successfully returns - see below\n      // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n      const success = stream => {\n        window.localStream = stream; // this.localVideoref.current.srcObject = stream\n        // this.pc.addStream(stream);\n\n        this.setState({\n          localStream: stream\n        });\n        this.whoisOnline();\n      }; // called when getUserMedia() fails - see below\n\n\n      const failure = e => {\n        console.log('getUserMedia Error: ', e);\n      }; // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n      // see the above link for more constraint options\n\n\n      const constraints = {\n        // audio: true,\n        video: true,\n        // video: {\n        //   width: 1280,\n        //   height: 720\n        // },\n        // video: {\n        //   width: { min: 1280 },\n        // }\n        options: {\n          mirror: true\n        }\n      }; // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n\n      navigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);\n    };\n\n    this.whoisOnline = () => {\n      // let all peers know I am joining\n      this.sendToPeer('onlinePeers', null, {\n        local: this.socket.id\n      });\n    };\n\n    this.sendToPeer = (messageType, payload, socketID) => {\n      this.socket.emit(messageType, {\n        socketID,\n        payload\n      });\n    };\n\n    this.createPeerConnection = (socketID, callback) => {\n      try {\n        let pc = new RTCPeerConnection(this.state.pc_config); // add pc to peerConnections object\n\n        const peerConnections = { ...this.state.peerConnections,\n          [socketID]: pc\n        };\n        this.setState({\n          peerConnections\n        });\n\n        pc.onicecandidate = e => {\n          if (e.candidate) {\n            this.sendToPeer('candidate', e.candidate, {\n              local: this.socket.id,\n              remote: socketID\n            });\n          }\n        };\n\n        pc.oniceconnectionstatechange = e => {// if (pc.iceConnectionState === 'disconnected') {\n          //   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n          //   this.setState({\n          //     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n          //   })\n          // }\n        };\n\n        pc.ontrack = e => {\n          let _remoteStream = null;\n          let remoteStreams = this.state.remoteStreams;\n          let remoteVideo = {}; // check if steam already exists in remoteStreams\n\n          const rVideo = this.state.remoteStreams.filter(stream => stream.id = socketID); //if it dones exists then add track\n\n          if (rVideo.length) {\n            _remoteStream = rVideo[0].stream;\n\n            _remoteStream.addTrack(e.track, _remoteStream);\n\n            remoteVideo = { ...rVideo[0],\n              stream: _remoteStream\n            };\n            remoteStreams = this.state.remoteStreams.map(_remoteVideo => {\n              return _remoteVideo.id === remoteVideo.id && remoteVideo || _remoteVideo;\n            });\n          } else {\n            //create new Stream and add track\n            _remoteStream = new MediaStream();\n\n            _remoteStream.addTrack(e.track, _remoteStream);\n\n            remoteVideo = {\n              id: socketID,\n              name: socketID,\n              stream: _remoteStream\n            };\n            remoteStreams = [...this.state.remoteStreams, remoteVideo];\n          } // const remoteVideo = {\n          //   id: socketID,\n          //   name: socketID,\n          //   stream: e.streams[0]\n          // }\n\n\n          this.setState(prevState => {\n            // If we already have a stream in display let it stay the same, otherwise use the latest stream\n            const remoteStream = prevState.remoteStreams.length > 0 ? {} : {\n              remoteStream: _remoteStream\n            }; // get currently selected video\n\n            let selectedVideo = prevState.remoteStreams.filter(stream => stream.id === prevState.selectedVideo.id); // if the video is still in the list, then do nothing, otherwise set to new video stream\n\n            selectedVideo = selectedVideo.length ? {} : {\n              selectedVideo: remoteVideo\n            };\n            return { // selectedVideo: remoteVideo,\n              ...selectedVideo,\n              // remoteStream: e.streams[0],\n              ...remoteStream,\n              remoteStreams // [...prevState.remoteStreams, remoteVideo]\n\n            };\n          });\n        };\n\n        pc.close = () => {// alert('GONE')\n        };\n\n        if (this.state.localStream) // pc.addStream(this.state.localStream)\n          this.state.localStream.getTracks().forEach(track => {\n            pc.addTrack(track, this.state.localStream);\n          }); // return pc\n\n        callback(pc);\n      } catch (e) {\n        console.log('Something went wrong! pc not created!!', e); // return;\n\n        callback(null);\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.socket = io.connect(this.serviceIP, {\n        path: '/io/webrtc',\n        query: {\n          room: window.location.pathname\n        }\n      });\n      this.socket.on('connection-success', data => {\n        this.getLocalStream();\n        console.log(data.success);\n        const status = data.peerCount > 1 ? `Total Connected Peers to ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect';\n        this.setState({\n          status: status\n        });\n      });\n      this.socket.on('joined-peers', data => {\n        this.setState({\n          status: data.peerCount > 1 ? `Total Connected Peers to ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\n        });\n      });\n      this.socket.on('peer-disconnected', data => {\n        console.log('peer-disconnected', data);\n        const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== data.socketID);\n        this.setState(prevState => {\n          // check if disconnected peer is the selected video and if there still connected peers, then select the first\n          const selectedVideo = prevState.selectedVideo.id === data.socketID && remoteStreams.length ? {\n            selectedVideo: remoteStreams[0]\n          } : null;\n          return {\n            // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n            remoteStreams,\n            ...selectedVideo,\n            status: data.peerCount > 1 ? `Total Connected Peers to ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\n          };\n        });\n      }); // this.socket.on('offerOrAnswer', (sdp) => {\n      //   this.textref.value = JSON.stringify(sdp)\n      //   // set sdp as remote description\n      //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n      // })\n\n      this.socket.on('online-peer', socketID => {\n        console.log('connected peers ...', socketID); // create and send offer to the peer (data.socketID)\n        // 1. Create new pc\n\n        this.createPeerConnection(socketID, pc => {\n          // 2. Create Offer\n          if (pc) pc.createOffer(this.state.sdpConstraints).then(sdp => {\n            pc.setLocalDescription(sdp);\n            this.sendToPeer('offer', sdp, {\n              local: this.socket.id,\n              remote: socketID\n            });\n          });\n        });\n      });\n      this.socket.on('offer', data => {\n        this.createPeerConnection(data.socketID, pc => {\n          pc.addStream(this.state.localStream);\n          pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\n            // 2. Create Answer\n            pc.createAnswer(this.state.sdpConstraints).then(sdp => {\n              pc.setLocalDescription(sdp);\n              this.sendToPeer('answer', sdp, {\n                local: this.socket.id,\n                remote: data.socketID\n              });\n            });\n          });\n        });\n      });\n      this.socket.on('answer', data => {\n        // get remote's peerConnection\n        const pc = this.state.peerConnections[data.socketID];\n        console.log(data.sdp);\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {});\n      });\n      this.socket.on('candidate', data => {\n        // get remote's peerConnection\n        const pc = this.state.peerConnections[data.socketID];\n        if (pc) pc.addIceCandidate(new RTCIceCandidate(data.candidate));\n      }); // const pc_config = null\n      // const pc_config = {\n      //   \"iceServers\": [\n      //     // {\n      //     //   urls: 'stun:[STUN_IP]:[PORT]',\n      //     //   'credentials': '[YOR CREDENTIALS]',\n      //     //   'username': '[USERNAME]'\n      //     // },\n      //     {\n      //       urls : 'stun:stun.l.google.com:19302'\n      //     }\n      //   ]\n      // }\n      // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n      // create an instance of RTCPeerConnection\n      // this.pc = new RTCPeerConnection(this.state.pc_config)\n      // triggered when a new candidate is returned\n      // this.pc.onicecandidate = (e) => {\n      //   // send the candidates to the remote peer\n      //   // see addCandidate below to be triggered on the remote peer\n      //   if (e.candidate) {\n      //     // console.log(JSON.stringify(e.candidate))\n      //     this.sendToPeer('candidate', e.candidate)\n      //   }\n      // }\n      // triggered when there is a change in connection state\n      // this.pc.oniceconnectionstatechange = (e) => {\n      //   console.log(e)\n      // }\n      // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n      // this.pc.onaddstream = (e) => {\n      //   this.remoteVideoref.current.srcObject = e.stream\n      // }\n      // this.pc.ontrack = (e) => {\n      //   debugger\n      //   // this.remoteVideoref.current.srcObject = e.streams[0]\n      //   this.setState({\n      //     remoteStream: e.streams[0]\n      //   })\n      // }\n    };\n\n    this.switchVideo = _video => {\n      console.log(_video);\n      this.setState({\n        selectedVideo: _video\n      });\n    };\n\n    this.state = {\n      localStream: null,\n      // used to hold local stream object to avoid recreating the stream everytime a new offer comes\n      remoteStream: null,\n      // used to hold remote stream object that is displayed in the main screen\n      remoteStreams: [],\n      // holds all Video Streams (all remote streams)\n      peerConnections: {},\n      // holds all Peer Connections\n      selectedVideo: null,\n      status: 'Please wait...',\n      pc_config: {\n        \"iceServers\": [{\n          urls: 'stun:stun.l.google.com:19302'\n        }]\n      },\n      sdpConstraints: {\n        'mandatory': {\n          'OfferToReceiveAudio': true,\n          'OfferToReceiveVideo': true\n        }\n      }\n    }; // DONT FORGET TO CHANGE TO YOUR URL\n\n    this.serviceIP = 'http://localhost:9150/webrtcPeer'; // https://reactjs.org/docs/refs-and-the-dom.html\n    // this.localVideoref = React.createRef()\n    // this.remoteVideoref = React.createRef()\n\n    this.socket = null; // this.candidates = []\n  }\n\n  render() {\n    console.log(this.state.localStream);\n    const statusText = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: 'yellow',\n        padding: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 26\n      }\n    }, this.state.status);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Video, {\n      videoStyles: {\n        // zIndex:2,\n        //   position: 'absolute',\n        // right:0,\n        width: 200 // height: 200,\n        // margin: 5,\n        // backgroundColor: 'black'\n\n      },\n      frameStyle: {\n        width: 200,\n        margin: 5,\n        borderRadius: 5,\n        backgroundColor: 'black'\n      } // ref={this.localVideoref}\n      ,\n      videoStream: this.state.localStream,\n      autoPlay: true,\n      muted: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Video, {\n      videoStyles: {\n        zIndex: 1,\n        //   position: 'fixed',\n        bottom: 0,\n        minWidth: '100%',\n        minHeight: '100%',\n        backgroundColor: 'black'\n      } // ref={ this.remoteVideoref }\n      ,\n      videoStream: this.state.selectedVideo && this.state.selectedVideo.stream,\n      autoPlay: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        zIndex: 3,\n        position: 'absolute' // margin: 10,\n        // backgroundColor: '#cdc4ff4f',\n        // padding: 10,\n        // borderRadius: 5,\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 10,\n        backgroundColor: '#cdc4ff4f',\n        padding: 10,\n        borderRadius: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 14\n      }\n    }, statusText)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Videos, {\n      switchVideo: this.switchVideo,\n      remoteStreams: this.state.remoteStreams,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\nexport default MainVideo;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/MainVideo.js"],"names":["React","Component","io","Video","Videos","MainVideo","constructor","props","getLocalStream","success","stream","window","localStream","setState","whoisOnline","failure","e","console","log","constraints","video","options","mirror","navigator","mediaDevices","getUserMedia","then","catch","sendToPeer","local","socket","id","messageType","payload","socketID","emit","createPeerConnection","callback","pc","RTCPeerConnection","state","pc_config","peerConnections","onicecandidate","candidate","remote","oniceconnectionstatechange","ontrack","_remoteStream","remoteStreams","remoteVideo","rVideo","filter","length","addTrack","track","map","_remoteVideo","MediaStream","name","prevState","remoteStream","selectedVideo","close","getTracks","forEach","componentDidMount","connect","serviceIP","path","query","room","location","pathname","on","data","status","peerCount","createOffer","sdpConstraints","sdp","setLocalDescription","addStream","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","switchVideo","_video","urls","render","statusText","color","padding","width","margin","borderRadius","backgroundColor","zIndex","bottom","minWidth","minHeight","position"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport io from 'socket.io-client';\r\nimport Video from './Video'\r\nimport Videos from './Videos'\r\n\r\nexport class MainVideo extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n  \r\n      this.state = {\r\n        localStream: null,    // used to hold local stream object to avoid recreating the stream everytime a new offer comes\r\n        remoteStream: null,    // used to hold remote stream object that is displayed in the main screen\r\n  \r\n        remoteStreams: [],    // holds all Video Streams (all remote streams)\r\n        peerConnections: {},  // holds all Peer Connections\r\n        selectedVideo: null,\r\n  \r\n        status: 'Please wait...',\r\n  \r\n        pc_config: {\r\n          \"iceServers\": [\r\n            {\r\n              urls : 'stun:stun.l.google.com:19302'\r\n            }\r\n          ]\r\n        },\r\n  \r\n        sdpConstraints: {\r\n          'mandatory': {\r\n              'OfferToReceiveAudio': true,\r\n              'OfferToReceiveVideo': true\r\n          }\r\n        },\r\n      }\r\n  \r\n      // DONT FORGET TO CHANGE TO YOUR URL\r\n      this.serviceIP = 'http://localhost:9150/webrtcPeer'\r\n  \r\n      // https://reactjs.org/docs/refs-and-the-dom.html\r\n      // this.localVideoref = React.createRef()\r\n      // this.remoteVideoref = React.createRef()\r\n  \r\n      this.socket = null\r\n      // this.candidates = []\r\n    }\r\n  \r\n    getLocalStream = () => {\r\n      // called when getUserMedia() successfully returns - see below\r\n      // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\r\n      const success = (stream) => {\r\n        window.localStream = stream\r\n        // this.localVideoref.current.srcObject = stream\r\n        // this.pc.addStream(stream);\r\n        this.setState({\r\n          localStream: stream\r\n        })\r\n  \r\n        this.whoisOnline()\r\n      }\r\n  \r\n      // called when getUserMedia() fails - see below\r\n      const failure = (e) => {\r\n        console.log('getUserMedia Error: ', e)\r\n      }\r\n  \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n      // see the above link for more constraint options\r\n      const constraints = {\r\n        // audio: true,\r\n        video: true,\r\n        // video: {\r\n        //   width: 1280,\r\n        //   height: 720\r\n        // },\r\n        // video: {\r\n        //   width: { min: 1280 },\r\n        // }\r\n        options: {\r\n          mirror: true,\r\n        }\r\n      }\r\n  \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n      navigator.mediaDevices.getUserMedia(constraints)\r\n        .then(success)\r\n        .catch(failure)\r\n    }\r\n  \r\n    whoisOnline = () => {\r\n      // let all peers know I am joining\r\n      this.sendToPeer('onlinePeers', null, {local: this.socket.id})\r\n    }\r\n  \r\n    sendToPeer = (messageType, payload, socketID) => {\r\n      this.socket.emit(messageType, {\r\n        socketID,\r\n        payload\r\n      })\r\n    }\r\n  \r\n    createPeerConnection = (socketID, callback) => {\r\n  \r\n      try {\r\n        let pc = new RTCPeerConnection(this.state.pc_config)\r\n  \r\n        // add pc to peerConnections object\r\n        const peerConnections = { ...this.state.peerConnections, [socketID]: pc }\r\n        this.setState({\r\n          peerConnections\r\n        })\r\n  \r\n        pc.onicecandidate = (e) => {\r\n          if (e.candidate) {\r\n            this.sendToPeer('candidate', e.candidate, {\r\n              local: this.socket.id,\r\n              remote: socketID\r\n            })\r\n          }\r\n        }\r\n  \r\n        pc.oniceconnectionstatechange = (e) => {\r\n          // if (pc.iceConnectionState === 'disconnected') {\r\n          //   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\r\n  \r\n          //   this.setState({\r\n          //     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\r\n          //   })\r\n          // }\r\n  \r\n        }\r\n  \r\n        pc.ontrack = (e) => {\r\n          let _remoteStream = null\r\n          let remoteStreams = this.state.remoteStreams\r\n          let remoteVideo = {}\r\n          // check if steam already exists in remoteStreams\r\n          const rVideo = this.state.remoteStreams.filter(stream => stream.id = socketID)\r\n\r\n          //if it dones exists then add track\r\n          if(rVideo.length){\r\n            _remoteStream = rVideo[0].stream\r\n            _remoteStream.addTrack(e.track, _remoteStream)\r\n            remoteVideo = {\r\n              ...rVideo[0],\r\n              stream: _remoteStream,\r\n            }\r\n            remoteStreams = this.state.remoteStreams.map(_remoteVideo => {\r\n              return _remoteVideo.id === remoteVideo.id && remoteVideo || _remoteVideo\r\n            })\r\n          } else {\r\n             //create new Stream and add track\r\n             _remoteStream = new MediaStream()\r\n             _remoteStream.addTrack(e.track, _remoteStream)\r\n\r\n             remoteVideo = {\r\n               id: socketID,\r\n               name: socketID,\r\n               stream: _remoteStream,\r\n             }\r\n             remoteStreams = [...this.state.remoteStreams, remoteVideo]\r\n          }\r\n          // const remoteVideo = {\r\n          //   id: socketID,\r\n          //   name: socketID,\r\n          //   stream: e.streams[0]\r\n          // }\r\n  \r\n          this.setState(prevState => {\r\n  \r\n            // If we already have a stream in display let it stay the same, otherwise use the latest stream\r\n            const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: _remoteStream }\r\n  \r\n            // get currently selected video\r\n            let selectedVideo = prevState.remoteStreams.filter(stream => stream.id === prevState.selectedVideo.id)\r\n            // if the video is still in the list, then do nothing, otherwise set to new video stream\r\n            selectedVideo = selectedVideo.length ? {} : { selectedVideo: remoteVideo }\r\n  \r\n            return {\r\n              // selectedVideo: remoteVideo,\r\n              ...selectedVideo,\r\n              // remoteStream: e.streams[0],\r\n              ...remoteStream,\r\n              remoteStreams, // [...prevState.remoteStreams, remoteVideo]\r\n            }\r\n          })\r\n        }\r\n  \r\n        pc.close = () => {\r\n          // alert('GONE')\r\n        }\r\n  \r\n        if (this.state.localStream)\r\n          // pc.addStream(this.state.localStream)\r\n          this.state.localStream.getTracks().forEach(track => {\r\n            pc.addTrack(track, this.state.localStream)\r\n          })\r\n  \r\n        // return pc\r\n        callback(pc)\r\n  \r\n      } catch(e) {\r\n        console.log('Something went wrong! pc not created!!', e)\r\n        // return;\r\n        callback(null)\r\n      }\r\n    }\r\n  \r\n    componentDidMount = () => {\r\n  \r\n      this.socket = io.connect(\r\n        this.serviceIP,\r\n        {\r\n          path: '/io/webrtc',\r\n          query: {\r\n            room: window.location.pathname,\r\n          }\r\n        }\r\n      )\r\n  \r\n      this.socket.on('connection-success', data => {\r\n  \r\n        this.getLocalStream()\r\n  \r\n        console.log(data.success)\r\n        const status = data.peerCount > 1 ? `Total Connected Peers to ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\r\n  \r\n        this.setState({\r\n          status: status\r\n        })\r\n      })\r\n      \r\n      this.socket.on('joined-peers', data => {\r\n        this.setState ({\r\n          status: data.peerCount > 1 ? `Total Connected Peers to ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\r\n        })\r\n      })\r\n      this.socket.on('peer-disconnected', data => {\r\n        console.log('peer-disconnected', data)\r\n  \r\n        const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== data.socketID)\r\n  \r\n        this.setState(prevState => {\r\n          // check if disconnected peer is the selected video and if there still connected peers, then select the first\r\n          const selectedVideo = prevState.selectedVideo.id === data.socketID && remoteStreams.length ? { selectedVideo: remoteStreams[0] } : null\r\n  \r\n          return {\r\n            // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\r\n            remoteStreams,\r\n            ...selectedVideo,\r\n            status: data.peerCount > 1 ? `Total Connected Peers to ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\r\n          }\r\n          }\r\n        )\r\n      })\r\n  \r\n      // this.socket.on('offerOrAnswer', (sdp) => {\r\n  \r\n      //   this.textref.value = JSON.stringify(sdp)\r\n  \r\n      //   // set sdp as remote description\r\n      //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\r\n      // })\r\n  \r\n      this.socket.on('online-peer', socketID => {\r\n        console.log('connected peers ...', socketID)\r\n  \r\n        // create and send offer to the peer (data.socketID)\r\n        // 1. Create new pc\r\n        this.createPeerConnection(socketID, pc => {\r\n          // 2. Create Offer\r\n            if (pc)\r\n              pc.createOffer(this.state.sdpConstraints)\r\n                .then(sdp => {\r\n                  pc.setLocalDescription(sdp)\r\n  \r\n                  this.sendToPeer('offer', sdp, {\r\n                    local: this.socket.id,\r\n                    remote: socketID\r\n                  })\r\n            })\r\n          })\r\n      })\r\n  \r\n      this.socket.on('offer', data => {\r\n        this.createPeerConnection(data.socketID, pc => {\r\n          pc.addStream(this.state.localStream)\r\n  \r\n          pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\r\n            // 2. Create Answer\r\n            pc.createAnswer(this.state.sdpConstraints)\r\n              .then(sdp => {\r\n                pc.setLocalDescription(sdp)\r\n  \r\n                this.sendToPeer('answer', sdp, {\r\n                  local: this.socket.id,\r\n                  remote: data.socketID\r\n                })\r\n              })\r\n          })\r\n        })\r\n      })\r\n  \r\n      this.socket.on('answer', data => {\r\n        // get remote's peerConnection\r\n        const pc = this.state.peerConnections[data.socketID]\r\n        console.log(data.sdp)\r\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(()=>{})\r\n      })\r\n  \r\n      this.socket.on('candidate', (data) => {\r\n        // get remote's peerConnection\r\n        const pc = this.state.peerConnections[data.socketID]\r\n  \r\n        if (pc)\r\n          pc.addIceCandidate(new RTCIceCandidate(data.candidate))\r\n      })\r\n  \r\n      // const pc_config = null\r\n  \r\n      // const pc_config = {\r\n      //   \"iceServers\": [\r\n      //     // {\r\n      //     //   urls: 'stun:[STUN_IP]:[PORT]',\r\n      //     //   'credentials': '[YOR CREDENTIALS]',\r\n      //     //   'username': '[USERNAME]'\r\n      //     // },\r\n      //     {\r\n      //       urls : 'stun:stun.l.google.com:19302'\r\n      //     }\r\n      //   ]\r\n      // }\r\n  \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\r\n      // create an instance of RTCPeerConnection\r\n      // this.pc = new RTCPeerConnection(this.state.pc_config)\r\n  \r\n      // triggered when a new candidate is returned\r\n      // this.pc.onicecandidate = (e) => {\r\n      //   // send the candidates to the remote peer\r\n      //   // see addCandidate below to be triggered on the remote peer\r\n      //   if (e.candidate) {\r\n      //     // console.log(JSON.stringify(e.candidate))\r\n      //     this.sendToPeer('candidate', e.candidate)\r\n      //   }\r\n      // }\r\n  \r\n      // triggered when there is a change in connection state\r\n      // this.pc.oniceconnectionstatechange = (e) => {\r\n      //   console.log(e)\r\n      // }\r\n  \r\n      // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\r\n      // this.pc.onaddstream = (e) => {\r\n      //   this.remoteVideoref.current.srcObject = e.stream\r\n      // }\r\n  \r\n      // this.pc.ontrack = (e) => {\r\n      //   debugger\r\n      //   // this.remoteVideoref.current.srcObject = e.streams[0]\r\n  \r\n      //   this.setState({\r\n      //     remoteStream: e.streams[0]\r\n      //   })\r\n      // }\r\n  \r\n    }\r\n  \r\n    switchVideo = (_video) => {\r\n      console.log(_video)\r\n      this.setState({\r\n        selectedVideo: _video\r\n      })\r\n    }\r\n  \r\n    render() {\r\n  \r\n      console.log(this.state.localStream)\r\n  \r\n      const statusText = <div style={{ color: 'yellow', padding: 5 }}>{this.state.status}</div>\r\n  \r\n      return (\r\n        <div>\r\n          <Video\r\n            videoStyles={{\r\n              // zIndex:2,\r\n            //   position: 'absolute',\r\n              // right:0,\r\n              width: 200,\r\n              // height: 200,\r\n              // margin: 5,\r\n              // backgroundColor: 'black'\r\n            }}\r\n            frameStyle ={{\r\n              width: 200,\r\n              margin: 5,\r\n              borderRadius: 5,\r\n              backgroundColor: 'black',\r\n            }}\r\n            // ref={this.localVideoref}\r\n            videoStream={this.state.localStream}\r\n            autoPlay muted>\r\n          </Video>\r\n          <Video\r\n            videoStyles={{\r\n              zIndex: 1,\r\n            //   position: 'fixed',\r\n              bottom: 0,\r\n              minWidth: '100%',\r\n              minHeight: '100%',\r\n              backgroundColor: 'black'\r\n            }}\r\n            // ref={ this.remoteVideoref }\r\n            videoStream={this.state.selectedVideo && this.state.selectedVideo.stream}\r\n            autoPlay>\r\n          </Video>\r\n          <br />\r\n          <div style={{\r\n            zIndex: 3,\r\n            position: 'absolute',\r\n            // margin: 10,\r\n            // backgroundColor: '#cdc4ff4f',\r\n            // padding: 10,\r\n            // borderRadius: 5,\r\n          }}><div style={{\r\n            margin: 10,\r\n            backgroundColor: '#cdc4ff4f',\r\n            padding: 10,\r\n            borderRadius: 5,\r\n          }}>\r\n             { statusText }\r\n          </div>\r\n          </div>\r\n          <div>\r\n            <Videos\r\n              switchVideo={this.switchVideo}\r\n              remoteStreams={this.state.remoteStreams}\r\n            ></Videos>\r\n          </div>\r\n          <br />\r\n  \r\n          {/* <div style={{zIndex: 1, position: 'fixed'}} >\r\n            <button onClick={this.createOffer}>Offer</button>\r\n            <button onClick={this.createAnswer}>Answer</button>\r\n            <br />\r\n            <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\r\n          </div> */}\r\n          {/* <br />\r\n          <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\r\n          <button onClick={this.addCandidate}>Add Candidate</button> */}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\nexport default MainVideo\r\n"]},"metadata":{},"sourceType":"module"}