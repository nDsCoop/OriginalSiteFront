{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\SearchResult.js\";\nimport React, { useContext } from \"react\";\nimport { motion, useCycle } from \"framer-motion\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"./GlobalState\";\nimport youtubeSearch from \"./apis/youtubeSearch\";\nimport \"../style.css\";\nimport { ListItem, Typography, ListItemAvatar, Avatar, Divider, ListItemText } from \"@material-ui/core\";\n\nconst Entities = require(\"html-entities\").XmlEntities;\n\nconst entities = new Entities();\nconst liVariants = {\n  open: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      y: {\n        stiffness: 1000,\n        velocity: -100\n      }\n    }\n  },\n  closed: {\n    y: 50,\n    opacity: 0,\n    transition: {\n      y: {\n        stiffness: 1000\n      }\n    }\n  }\n};\nconst ulVariants = {\n  open: {\n    transition: {\n      staggerChildren: 0.07,\n      delayChildren: 0.2\n    }\n  },\n  closed: {\n    transition: {\n      staggerChildren: 0.05,\n      staggerDirection: -1\n    }\n  }\n};\n\nconst SearchResult = ({\n  videos\n}) => {\n  const [isOpen, setisOpen] = useCycle(false, true);\n  const [{}, dispatch] = useContext(GlobalContext);\n\n  const setCurrentVideoSnippet = data => {\n    dispatch({\n      type: \"setCurrentVideoSnippet\",\n      snippet: data\n    });\n  };\n\n  const handleClick = video => {\n    // set all the info of current clicked video in this object\n    setCurrentVideoSnippet({\n      id: video.id.videoId,\n      title: entities.decode(video.snippet.title),\n      channelTitle: entities.decode(video.snippet.channelTitle),\n      maxThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/maxresdefault.jpg`,\n      sdThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/sddefault.jpg` // this is the url of the max resolution of thumbnail\n\n    });\n  };\n\n  React.useEffect(() => {\n    setTimeout(() => {}, 100);\n    console.log(\"isopen cycle\", isOpen);\n    setisOpen(true);\n  }, []);\n  const renderResult = videos.map(video => {\n    const {\n      snippet\n    } = video;\n    console.log(\"render result times\");\n    return /*#__PURE__*/React.createElement(motion.div, {\n      variants: liVariants,\n      key: video.id.videoId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      alignItems: \"flex-start\",\n      button: true,\n      onClick: () => handleClick(video) // component={Link}\n      // to={{pathname: \"/play\", search:`?id=${video.id.videoId}`}}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      className: \"searchThumb\",\n      style: {\n        width: \"60px\",\n        height: \"60px\",\n        marginRight: \"15px\"\n      },\n      alt: snippet.title,\n      src: snippet.thumbnails.high.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: entities.decode(snippet.title),\n      secondary: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n        component: \"span\",\n        variant: \"body2\",\n        color: \"textPrimary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }, snippet.channelTitle)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }));\n  });\n  return /*#__PURE__*/React.createElement(motion.div, {\n    variants: ulVariants,\n    initial: false,\n    animate: isOpen ? \"open\" : \"closed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, renderResult);\n};\n\nexport default SearchResult;","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/SearchResult.js"],"names":["React","useContext","motion","useCycle","Link","GlobalContext","youtubeSearch","ListItem","Typography","ListItemAvatar","Avatar","Divider","ListItemText","Entities","require","XmlEntities","entities","liVariants","open","y","opacity","transition","stiffness","velocity","closed","ulVariants","staggerChildren","delayChildren","staggerDirection","SearchResult","videos","isOpen","setisOpen","dispatch","setCurrentVideoSnippet","data","type","snippet","handleClick","video","id","videoId","title","decode","channelTitle","maxThumbnail","sdThumbnail","useEffect","setTimeout","console","log","renderResult","map","width","height","marginRight","thumbnails","high","url"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { motion, useCycle } from \"framer-motion\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { GlobalContext } from \"./GlobalState\";\r\n\r\nimport youtubeSearch from \"./apis/youtubeSearch\";\r\nimport \"../style.css\";\r\nimport {\r\n  ListItem,\r\n  Typography,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Divider,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\n\r\nconst Entities = require(\"html-entities\").XmlEntities;\r\n\r\nconst entities = new Entities();\r\n\r\nconst liVariants = {\r\n  open: {\r\n    y: 0,\r\n    opacity: 1,\r\n    transition: {\r\n      y: { stiffness: 1000, velocity: -100 }\r\n    }\r\n  },\r\n  closed: {\r\n    y: 50,\r\n    opacity: 0,\r\n    transition: {\r\n      y: { stiffness: 1000 }\r\n    }\r\n  }\r\n};\r\n\r\nconst ulVariants = {\r\n  open: {\r\n    transition: { staggerChildren: 0.07, delayChildren: 0.2 }\r\n  },\r\n  closed: {\r\n    transition: { staggerChildren: 0.05, staggerDirection: -1 }\r\n  }\r\n};\r\n\r\nconst SearchResult = ({ videos }) => {\r\n  const [isOpen, setisOpen] = useCycle(false, true);\r\n\r\n  const [{}, dispatch] = useContext(GlobalContext);\r\n  const setCurrentVideoSnippet = data => {\r\n    dispatch({ type: \"setCurrentVideoSnippet\", snippet: data });\r\n  };\r\n\r\n  const handleClick = video => {\r\n    // set all the info of current clicked video in this object\r\n    setCurrentVideoSnippet({\r\n      id: video.id.videoId,\r\n      title: entities.decode(video.snippet.title),\r\n      channelTitle: entities.decode(video.snippet.channelTitle),\r\n      maxThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/maxresdefault.jpg`,\r\n      sdThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/sddefault.jpg`\r\n      // this is the url of the max resolution of thumbnail\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {}, 100);\r\n    console.log(\"isopen cycle\", isOpen);\r\n    setisOpen(true);\r\n  }, []);\r\n\r\n  const renderResult = videos.map(video => {\r\n    const { snippet } = video;\r\n    console.log(\"render result times\");\r\n    return (\r\n      <motion.div variants={liVariants} key={video.id.videoId}>\r\n        <ListItem\r\n          alignItems=\"flex-start\"\r\n          button\r\n          onClick={() => handleClick(video)}\r\n          // component={Link}\r\n          // to={{pathname: \"/play\", search:`?id=${video.id.videoId}`}}\r\n        >\r\n          <ListItemAvatar>\r\n            <Avatar\r\n              className=\"searchThumb\"\r\n              style={{ width: \"60px\", height: \"60px\", marginRight: \"15px\" }}\r\n              alt={snippet.title}\r\n              src={snippet.thumbnails.high.url}\r\n            />\r\n          </ListItemAvatar>\r\n          <ListItemText\r\n            primary={entities.decode(snippet.title)}\r\n            secondary={\r\n              <>\r\n                <Typography\r\n                  component=\"span\"\r\n                  variant=\"body2\"\r\n                  color=\"textPrimary\"\r\n                >\r\n                  {snippet.channelTitle}\r\n                </Typography>\r\n              </>\r\n            }\r\n          />\r\n        </ListItem>\r\n        <Divider />\r\n      </motion.div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <motion.div\r\n      variants={ulVariants}\r\n      initial={false}\r\n      animate={isOpen ? \"open\" : \"closed\"}\r\n    >\r\n      {renderResult}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n"]},"metadata":{},"sourceType":"module"}