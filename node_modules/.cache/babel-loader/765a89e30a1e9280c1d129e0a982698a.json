{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\RenderDatabase.js\";\nimport React, { useContext, useState, useEffect } from \"react\"; // import {\n//   List,\n//   AutoSizer,\n//   CellMeasurer,\n//   CellMeasurerCache\n// } from \"react-virtualized\";\n\nimport { DynamicSizeList as List } from \"react-window-dynamic\";\nimport CompletedTick from \"../images/CompletedTick.svg\";\nimport DownloadIcon from \"../images/DownloadIcon.svg\";\nimport { ListItem, Typography, ListItemAvatar, Avatar, Divider, ListItemText } from \"@material-ui/core\";\nimport DownloadDeleteDialog from \"./DownloadDeleteDialog\";\nimport { GlobalContext } from \"./GlobalState\";\nimport getAudioLink from \"../apis/getAudioLink\";\nimport { downloadSong, deleteSongAudio } from \"../external/saveSong\"; // const cache = new CellMeasurerCache({\n//   minHeight: 50,\n//   defaultHeight: 60,\n//   fixedWidth: true\n//   // keyMapper: () => 1\n// });\n\nlet currentId;\nexport const useSongMethods = songId => {\n  const [{}, dispatch] = useContext(GlobalContext);\n  const setSnackbarMsg = React.useCallback(data => {\n    dispatch({\n      type: \"setSnackbarMsg\",\n      snippet: data\n    });\n  }, [dispatch]);\n  const [deleteDialogState, setDeleteDialogState] = useState(false);\n  const [dontAskPopup, setDontAskPopup] = useState(null);\n  useEffect(() => {\n    //convert string to bool\n    const popupLocalState = localStorage.getItem(\"dontAskPopup\") === \"true\";\n    setDontAskPopup(popupLocalState); // for popup settings\n  }, []);\n\n  const handleDownload = async songId => {\n    // console.log(\"here is the id\", songId);\n    const res = await getAudioLink.get(\"/song\", {\n      params: {\n        id: songId\n      }\n    }); // first we will fetch the song link then we will download it\n    // the download song function takes id and the url\n\n    const status = await downloadSong(songId, res.data); // after the downloading is done we will remove the downloading class\n    // set the snackbar message\n\n    setSnackbarMsg(\"Song Downloaded\");\n    console.log(\"song status\", status);\n  };\n\n  const disablePopup = () => {\n    localStorage.setItem(\"dontAskPopup\", true);\n    setDontAskPopup(true);\n  };\n\n  const deleteTheSong = async checkBox => {\n    const deleted = await deleteSongAudio(currentId);\n    setDeleteDialogState(false);\n    setSnackbarMsg(\"Deleted Successfully\");\n    console.log(currentId, checkBox); // we will set it to localstorage the popup option\n\n    if (checkBox) {\n      disablePopup();\n    }\n  }; // hadnling download dialog\n\n\n  const handleRemoveSong = songId => {\n    console.log(\"handle remove dude\");\n    currentId = songId; // when user clicks on the download badge we will check the state\n    // then delete the song without showing the popup if dontAskPopup is true\n    // and delete the song by calling deleteTheSong\n\n    dontAskPopup ? deleteTheSong() : setDeleteDialogState(true);\n  };\n\n  const deleteDialogComponent = dontAskPopup ? null : /*#__PURE__*/React.createElement(DownloadDeleteDialog, {\n    isOpen: deleteDialogState,\n    handleCancel: () => setDeleteDialogState(false) // we will just hide the dialog on cancel\n    ,\n    handleDelete: deleteTheSong //if user wants to delete the song we will just do it\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  });\n  return {\n    handleDownload,\n    handleRemoveSong,\n    deleteTheSong,\n    dontAskPopup,\n    setDeleteDialogState,\n    deleteDialogState,\n    deleteDialogComponent\n  };\n};\n\nconst RenderDatabase = props => {\n  const songs = props.songs;\n  const [{}, dispatch] = useContext(GlobalContext);\n\n  const setCurrentVideoSnippet = data => {\n    dispatch({\n      type: \"setCurrentVideoSnippet\",\n      snippet: data\n    });\n  };\n\n  const setSnackbarMsg = data => {\n    dispatch({\n      type: \"setSnakbarMsg\",\n      snippet: data\n    });\n  };\n\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight);\n\n  const handleClick = song => {\n    // set all the info of current clicked video in this object\n    setCurrentVideoSnippet({\n      id: song.videoId,\n      audio: song.audio,\n      thumbnail: song.thumbnail,\n      title: song.title,\n      channelTitle: song.channelTitle,\n      maxThumbnail: `https://img.youtube.com/vi/${song.videoId}/maxresdefault.jpg`,\n      sdThumbnail: `https://img.youtube.com/vi/${song.videoId}/sddefault.jpg` // this is the url of the max resolution of thumbnail\n\n    });\n  };\n\n  const {\n    handleDownload,\n    handleRemoveSong,\n    deleteDialogComponent\n  } = useSongMethods();\n\n  const returnAnimatedClass = song => {\n    if (song.downloadState === \"downloading\") {\n      console.log(song.downloadState);\n      return \"downloading-animation\";\n    } else {\n      return \"\";\n    }\n  };\n\n  useEffect(() => {\n    setWindowHeight(window.innerHeight);\n  });\n  const renderResult = songs.map((song, index) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListItem, {\n      alignItems: \"flex-start\",\n      button: true,\n      onClick: () => handleClick(song) // component={Link}\n      // to={{ pathname: \"/play\", search: `?id=${song.videoId}`, state: { modal: true } }}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      className: \"searchThumb\",\n      style: {\n        width: \"60px\",\n        height: \"60px\",\n        marginRight: \"15px\"\n      },\n      alt: song.title,\n      src: `https://img.youtube.com/vi/${song.videoId}/default.jpg`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: song.title,\n      secondary: /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        component: \"span\",\n        variant: \"body2\",\n        color: \"textPrimary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }\n      }, song.channelTitle)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"download-container\",\n      onClick: () => song.audio ? handleRemoveSong(song.videoId) : handleDownload(song.videoId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"badge-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: returnAnimatedClass(song),\n      src: song.audio ? CompletedTick : DownloadIcon,\n      alt: \"downloading icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    }))));\n  });\n  const renderItem = React.forwardRef((row, ref) => /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    style: { ...row.style,\n      maxWidth: \"1000px\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 5\n    }\n  }, renderResult[row.index], /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  })));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, deleteDialogComponent, /*#__PURE__*/React.createElement(List, {\n    height: window.innerHeight - 100,\n    itemCount: songs.length,\n    width: window.innerWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, renderItem));\n};\n\nexport default RenderDatabase;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/RenderDatabase.js"],"names":["React","useContext","useState","useEffect","DynamicSizeList","List","ListItem","Typography","ListItemAvatar","Avatar","Divider","ListItemText","DownloadDeleteDialog","GlobalContext","getAudioLink","downloadSong","deleteSongAudio","currentId","useSongMethods","songId","dispatch","setSnackbarMsg","useCallback","data","type","snippet","deleteDialogState","setDeleteDialogState","dontAskPopup","setDontAskPopup","popupLocalState","localStorage","getItem","handleDownload","res","get","params","id","status","console","log","disablePopup","setItem","deleteTheSong","checkBox","deleted","handleRemoveSong","deleteDialogComponent","RenderDatabase","props","songs","setCurrentVideoSnippet","windowHeight","setWindowHeight","window","innerHeight","handleClick","song","videoId","audio","thumbnail","title","channelTitle","maxThumbnail","sdThumbnail","returnAnimatedClass","downloadState","renderResult","map","index","width","height","marginRight","CompletedTick","DownloadIcon","renderItem","forwardRef","row","ref","style","maxWidth","left","transform","length","innerWidth"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\n// import {\r\n//   List,\r\n//   AutoSizer,\r\n//   CellMeasurer,\r\n//   CellMeasurerCache\r\n// } from \"react-virtualized\";\r\n\r\nimport { DynamicSizeList as List } from \"react-window-dynamic\";\r\n\r\n\r\nimport CompletedTick from \"../images/CompletedTick.svg\";\r\nimport DownloadIcon from \"../images/DownloadIcon.svg\";\r\n\r\nimport {\r\n  ListItem,\r\n  Typography,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Divider,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\n\r\nimport DownloadDeleteDialog from \"./DownloadDeleteDialog\";\r\n\r\nimport { GlobalContext } from \"./GlobalState\";\r\n\r\nimport getAudioLink from \"../apis/getAudioLink\";\r\nimport { downloadSong, deleteSongAudio } from \"../external/saveSong\";\r\n\r\n// const cache = new CellMeasurerCache({\r\n//   minHeight: 50,\r\n//   defaultHeight: 60,\r\n//   fixedWidth: true\r\n//   // keyMapper: () => 1\r\n// });\r\n\r\nlet currentId;\r\n\r\nexport const useSongMethods = songId => {\r\n  const [{}, dispatch] = useContext(GlobalContext);\r\n\r\n  const setSnackbarMsg = React.useCallback(\r\n    data => {\r\n      dispatch({ type: \"setSnackbarMsg\", snippet: data });\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const [deleteDialogState, setDeleteDialogState] = useState(false);\r\n  const [dontAskPopup, setDontAskPopup] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //convert string to bool\r\n    const popupLocalState = localStorage.getItem(\"dontAskPopup\") === \"true\";\r\n    setDontAskPopup(popupLocalState);\r\n    // for popup settings\r\n  }, []);\r\n\r\n  const handleDownload = async songId => {\r\n    // console.log(\"here is the id\", songId);\r\n    const res = await getAudioLink.get(\"/song\", {\r\n      params: { id: songId }\r\n    });\r\n    // first we will fetch the song link then we will download it\r\n    // the download song function takes id and the url\r\n    const status = await downloadSong(songId, res.data);\r\n    // after the downloading is done we will remove the downloading class\r\n    // set the snackbar message\r\n    setSnackbarMsg(\"Song Downloaded\");\r\n    console.log(\"song status\", status);\r\n  };\r\n\r\n  const disablePopup = () => {\r\n    localStorage.setItem(\"dontAskPopup\", true);\r\n    setDontAskPopup(true);\r\n  };\r\n\r\n  const deleteTheSong = async checkBox => {\r\n    const deleted = await deleteSongAudio(currentId);\r\n    setDeleteDialogState(false);\r\n    setSnackbarMsg(\"Deleted Successfully\");\r\n\r\n    console.log(currentId, checkBox);\r\n    // we will set it to localstorage the popup option\r\n    if (checkBox) {\r\n      disablePopup();\r\n    }\r\n  };\r\n\r\n  // hadnling download dialog\r\n  const handleRemoveSong = songId => {\r\n    console.log(\"handle remove dude\");\r\n    currentId = songId;\r\n    // when user clicks on the download badge we will check the state\r\n    // then delete the song without showing the popup if dontAskPopup is true\r\n    // and delete the song by calling deleteTheSong\r\n    dontAskPopup ? deleteTheSong() : setDeleteDialogState(true);\r\n  };\r\n\r\n  const deleteDialogComponent = dontAskPopup ? null : (\r\n    <DownloadDeleteDialog\r\n      isOpen={deleteDialogState}\r\n      handleCancel={() => setDeleteDialogState(false)} // we will just hide the dialog on cancel\r\n      handleDelete={deleteTheSong} //if user wants to delete the song we will just do it\r\n    />\r\n  );\r\n\r\n  return {\r\n    handleDownload,\r\n    handleRemoveSong,\r\n    deleteTheSong,\r\n    dontAskPopup,\r\n    setDeleteDialogState,\r\n    deleteDialogState,\r\n    deleteDialogComponent\r\n  };\r\n};\r\n\r\nconst RenderDatabase = props => {\r\n  const songs = props.songs;\r\n  const [{}, dispatch] = useContext(GlobalContext);\r\n  const setCurrentVideoSnippet = data => {\r\n    dispatch({ type: \"setCurrentVideoSnippet\", snippet: data });\r\n  };\r\n  const setSnackbarMsg = data => {\r\n    dispatch({ type: \"setSnakbarMsg\", snippet: data });\r\n  };\r\n\r\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight);\r\n\r\n  const handleClick = song => {\r\n    // set all the info of current clicked video in this object\r\n    setCurrentVideoSnippet({\r\n      id: song.videoId,\r\n      audio: song.audio,\r\n      thumbnail: song.thumbnail,\r\n      title: song.title,\r\n      channelTitle: song.channelTitle,\r\n      maxThumbnail: `https://img.youtube.com/vi/${song.videoId}/maxresdefault.jpg`,\r\n      sdThumbnail: `https://img.youtube.com/vi/${song.videoId}/sddefault.jpg`\r\n      // this is the url of the max resolution of thumbnail\r\n    });\r\n  };\r\n\r\n  const {\r\n    handleDownload,\r\n    handleRemoveSong,\r\n    deleteDialogComponent\r\n  } = useSongMethods();\r\n\r\n  const returnAnimatedClass = song => {\r\n    if (song.downloadState === \"downloading\") {\r\n      console.log(song.downloadState);\r\n      return \"downloading-animation\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setWindowHeight(window.innerHeight);\r\n  });\r\n\r\n  const renderResult = songs.map((song, index) => {\r\n    return (\r\n      <>\r\n        <ListItem\r\n          alignItems=\"flex-start\"\r\n          button\r\n          onClick={() => handleClick(song)}\r\n          // component={Link}\r\n          // to={{ pathname: \"/play\", search: `?id=${song.videoId}`, state: { modal: true } }}\r\n        >\r\n          <ListItemAvatar>\r\n            <Avatar\r\n              className=\"searchThumb\"\r\n              style={{ width: \"60px\", height: \"60px\", marginRight: \"15px\" }}\r\n              alt={song.title}\r\n              src={`https://img.youtube.com/vi/${song.videoId}/default.jpg`}\r\n            />\r\n          </ListItemAvatar>\r\n          {/* we will play the song when clicked on title */}\r\n          <ListItemText\r\n            primary={song.title}\r\n            secondary={\r\n              <React.Fragment>\r\n                <Typography\r\n                  component=\"span\"\r\n                  variant=\"body2\"\r\n                  color=\"textPrimary\"\r\n                >\r\n                  {song.channelTitle}\r\n                </Typography>\r\n              </React.Fragment>\r\n            }\r\n          />\r\n        </ListItem>\r\n        <div\r\n          className=\"download-container\"\r\n          onClick={() =>\r\n            song.audio\r\n              ? handleRemoveSong(song.videoId)\r\n              : handleDownload(song.videoId)\r\n          }\r\n        >\r\n          <div className=\"badge-container\">\r\n            {/* if there is audio file then we will show tick mark icon */}\r\n            <img\r\n              className={returnAnimatedClass(song)}\r\n              src={song.audio ? CompletedTick : DownloadIcon}\r\n              alt=\"downloading icon\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  });\r\n\r\n  const renderItem = React.forwardRef((row, ref) => (\r\n    <div\r\n      ref={ref}\r\n      style={{\r\n        ...row.style,\r\n        maxWidth: \"1000px\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\"\r\n      }}\r\n    >\r\n      {renderResult[row.index]}\r\n      <Divider />\r\n    </div>\r\n  ));\r\n  return (\r\n    <>\r\n      {deleteDialogComponent}\r\n\r\n      <List\r\n        height={window.innerHeight - 100}\r\n        itemCount={songs.length}\r\n        width={window.innerWidth}\r\n      >\r\n        {renderItem}\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RenderDatabase;\r\n"]},"metadata":{},"sourceType":"module"}