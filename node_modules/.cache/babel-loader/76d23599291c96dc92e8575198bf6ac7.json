{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\MainVideo.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport Video from './Video';\nimport Videos from './Videos';\nexport class MainVideo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getLocalStream = () => {\n      // called when getUserMedia() successfully returns - see below\n      // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n      const success = stream => {\n        window.localStream = stream; // this.localVideoref.current.srcObject = stream\n        // this.pc.addStream(stream);\n\n        this.setState({\n          localStream: stream\n        });\n        this.whoisOnline();\n      }; // called when getUserMedia() fails - see below\n\n\n      const failure = e => {\n        console.log('getUserMedia Error: ', e);\n      }; // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n      // see the above link for more constraint options\n\n\n      const constraints = {\n        // audio: true,\n        video: true,\n        // video: {\n        //   width: 1280,\n        //   height: 720\n        // },\n        // video: {\n        //   width: { min: 1280 },\n        // }\n        options: {\n          mirror: true\n        }\n      }; // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n\n      navigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);\n    };\n\n    this.whoisOnline = () => {\n      // let all peers know I am joining\n      this.sendToPeer('onlinePeers', null, {\n        local: this.socket.id\n      });\n    };\n\n    this.sendToPeer = (messageType, payload, socketID) => {\n      this.socket.emit(messageType, {\n        socketID,\n        payload\n      });\n    };\n\n    this.createPeerConnection = (socketID, callback) => {\n      try {\n        let pc = new RTCPeerConnection(this.state.pc_config); // add pc to peerConnections object\n\n        const peerConnections = { ...this.state.peerConnections,\n          [socketID]: pc\n        };\n        this.setState({\n          peerConnections\n        });\n\n        pc.onicecandidate = e => {\n          if (e.candidate) {\n            this.sendToPeer('candidate', e.candidate, {\n              local: this.socket.id,\n              remote: socketID\n            });\n          }\n        };\n\n        pc.oniceconnectionstatechange = e => {// if (pc.iceConnectionState === 'disconnected') {\n          //   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n          //   this.setState({\n          //     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n          //   })\n          // }\n        };\n\n        pc.ontrack = e => {\n          const remoteVideo = {\n            id: socketID,\n            name: socketID,\n            stream: e.streams[0]\n          };\n          this.setState(prevState => {\n            // If we already have a stream in display let it stay the same, otherwise use the latest stream\n            const remoteStream = prevState.remoteStreams.length > 0 ? {} : {\n              remoteStream: e.streams[0]\n            }; // get currently selected video\n\n            let selectedVideo = prevState.remoteStreams.filter(stream => stream.id === prevState.selectedVideo.id); // if the video is still in the list, then do nothing, otherwise set to new video stream\n\n            selectedVideo = selectedVideo.length ? {} : {\n              selectedVideo: remoteVideo\n            };\n            return { // selectedVideo: remoteVideo,\n              ...selectedVideo,\n              // remoteStream: e.streams[0],\n              ...remoteStream,\n              remoteStreams: [...prevState.remoteStreams, remoteVideo]\n            };\n          });\n        };\n\n        pc.close = () => {// alert('GONE')\n        };\n\n        if (this.state.localStream) pc.addStream(this.state.localStream); // return pc\n\n        callback(pc);\n      } catch (e) {\n        console.log('Something went wrong! pc not created!!', e); // return;\n\n        callback(null);\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.socket = io.connect(this.serviceIP, {\n        path: '/io/webrtc',\n        query: {}\n      });\n      this.socket.on('connection-success', data => {\n        this.getLocalStream();\n        console.log(data.success);\n        const status = data.peerCount > 1 ? `Total Connected Peers: ${data.peerCount}` : 'Waiting for other peers to connect';\n        this.setState({\n          status: status\n        });\n      });\n      this.socket.on('peer-disconnected', data => {\n        console.log('peer-disconnected', data);\n        const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== data.socketID);\n        this.setState(prevState => {\n          // check if disconnected peer is the selected video and if there still connected peers, then select the first\n          const selectedVideo = prevState.selectedVideo.id === data.socketID && remoteStreams.length ? {\n            selectedVideo: remoteStreams[0]\n          } : null;\n          return {\n            // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n            remoteStreams,\n            ...selectedVideo\n          };\n        });\n      }); // this.socket.on('offerOrAnswer', (sdp) => {\n      //   this.textref.value = JSON.stringify(sdp)\n      //   // set sdp as remote description\n      //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n      // })\n\n      this.socket.on('online-peer', socketID => {\n        console.log('connected peers ...', socketID); // create and send offer to the peer (data.socketID)\n        // 1. Create new pc\n\n        this.createPeerConnection(socketID, pc => {\n          // 2. Create Offer\n          if (pc) pc.createOffer(this.state.sdpConstraints).then(sdp => {\n            pc.setLocalDescription(sdp);\n            this.sendToPeer('offer', sdp, {\n              local: this.socket.id,\n              remote: socketID\n            });\n          });\n        });\n      });\n      this.socket.on('offer', data => {\n        this.createPeerConnection(data.socketID, pc => {\n          pc.addStream(this.state.localStream);\n          pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\n            // 2. Create Answer\n            pc.createAnswer(this.state.sdpConstraints).then(sdp => {\n              pc.setLocalDescription(sdp);\n              this.sendToPeer('answer', sdp, {\n                local: this.socket.id,\n                remote: data.socketID\n              });\n            });\n          });\n        });\n      });\n      this.socket.on('answer', data => {\n        // get remote's peerConnection\n        const pc = this.state.peerConnections[data.socketID];\n        console.log(data.sdp);\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {});\n      });\n      this.socket.on('candidate', data => {\n        // get remote's peerConnection\n        const pc = this.state.peerConnections[data.socketID];\n        if (pc) pc.addIceCandidate(new RTCIceCandidate(data.candidate));\n      }); // const pc_config = null\n      // const pc_config = {\n      //   \"iceServers\": [\n      //     // {\n      //     //   urls: 'stun:[STUN_IP]:[PORT]',\n      //     //   'credentials': '[YOR CREDENTIALS]',\n      //     //   'username': '[USERNAME]'\n      //     // },\n      //     {\n      //       urls : 'stun:stun.l.google.com:19302'\n      //     }\n      //   ]\n      // }\n      // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n      // create an instance of RTCPeerConnection\n      // this.pc = new RTCPeerConnection(this.state.pc_config)\n      // triggered when a new candidate is returned\n      // this.pc.onicecandidate = (e) => {\n      //   // send the candidates to the remote peer\n      //   // see addCandidate below to be triggered on the remote peer\n      //   if (e.candidate) {\n      //     // console.log(JSON.stringify(e.candidate))\n      //     this.sendToPeer('candidate', e.candidate)\n      //   }\n      // }\n      // triggered when there is a change in connection state\n      // this.pc.oniceconnectionstatechange = (e) => {\n      //   console.log(e)\n      // }\n      // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n      // this.pc.onaddstream = (e) => {\n      //   this.remoteVideoref.current.srcObject = e.stream\n      // }\n      // this.pc.ontrack = (e) => {\n      //   debugger\n      //   // this.remoteVideoref.current.srcObject = e.streams[0]\n      //   this.setState({\n      //     remoteStream: e.streams[0]\n      //   })\n      // }\n    };\n\n    this.switchVideo = _video => {\n      console.log(_video);\n      this.setState({\n        selectedVideo: _video\n      });\n    };\n\n    this.state = {\n      localStream: null,\n      // used to hold local stream object to avoid recreating the stream everytime a new offer comes\n      remoteStream: null,\n      // used to hold remote stream object that is displayed in the main screen\n      remoteStreams: [],\n      // holds all Video Streams (all remote streams)\n      peerConnections: {},\n      // holds all Peer Connections\n      selectedVideo: null,\n      status: 'Please wait...',\n      pc_config: {\n        \"iceServers\": [{\n          urls: 'stun:stun.l.google.com:19302'\n        }]\n      },\n      sdpConstraints: {\n        'mandatory': {\n          'OfferToReceiveAudio': true,\n          'OfferToReceiveVideo': true\n        }\n      }\n    }; // DONT FORGET TO CHANGE TO YOUR URL\n\n    this.serviceIP = 'https://cc82bd38.ngrok.io/webrtcPeer'; // https://reactjs.org/docs/refs-and-the-dom.html\n    // this.localVideoref = React.createRef()\n    // this.remoteVideoref = React.createRef()\n\n    this.socket = null; // this.candidates = []\n  }\n\n  render() {\n    console.log(this.state.localStream);\n    const statusText = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: 'yellow',\n        padding: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 26\n      }\n    }, this.state.status);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Video, {\n      videoStyles: {\n        zIndex: 2,\n        //   position: 'absolute',\n        right: 0,\n        width: 200,\n        height: 200,\n        margin: 5,\n        backgroundColor: 'black'\n      } // ref={this.localVideoref}\n      ,\n      videoStream: this.state.localStream,\n      autoPlay: true,\n      muted: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Video, {\n      videoStyles: {\n        zIndex: 1,\n        //   position: 'fixed',\n        bottom: 0,\n        minWidth: '100%',\n        minHeight: '100%',\n        backgroundColor: 'black'\n      } // ref={ this.remoteVideoref }\n      ,\n      videoStream: this.state.selectedVideo && this.state.selectedVideo.stream,\n      autoPlay: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        zIndex: 3,\n        // position: 'absolute',\n        margin: 10,\n        backgroundColor: '#cdc4ff4f',\n        padding: 10,\n        borderRadius: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }\n    }, statusText), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Videos, {\n      switchVideo: this.switchVideo,\n      remoteStreams: this.state.remoteStreams,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\nexport default MainVideo;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/MainVideo.js"],"names":["React","Component","io","Video","Videos","MainVideo","constructor","props","getLocalStream","success","stream","window","localStream","setState","whoisOnline","failure","e","console","log","constraints","video","options","mirror","navigator","mediaDevices","getUserMedia","then","catch","sendToPeer","local","socket","id","messageType","payload","socketID","emit","createPeerConnection","callback","pc","RTCPeerConnection","state","pc_config","peerConnections","onicecandidate","candidate","remote","oniceconnectionstatechange","ontrack","remoteVideo","name","streams","prevState","remoteStream","remoteStreams","length","selectedVideo","filter","close","addStream","componentDidMount","connect","serviceIP","path","query","on","data","status","peerCount","createOffer","sdpConstraints","sdp","setLocalDescription","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","switchVideo","_video","urls","render","statusText","color","padding","zIndex","right","width","height","margin","backgroundColor","bottom","minWidth","minHeight","borderRadius"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAO,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AACrCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAwCnBC,cAxCmB,GAwCF,MAAM;AACrB;AACA;AACA,YAAMC,OAAO,GAAIC,MAAD,IAAY;AAC1BC,QAAAA,MAAM,CAACC,WAAP,GAAqBF,MAArB,CAD0B,CAE1B;AACA;;AACA,aAAKG,QAAL,CAAc;AACZD,UAAAA,WAAW,EAAEF;AADD,SAAd;AAIA,aAAKI,WAAL;AACD,OATD,CAHqB,CAcrB;;;AACA,YAAMC,OAAO,GAAIC,CAAD,IAAO;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,CAApC;AACD,OAFD,CAfqB,CAmBrB;AACA;;;AACA,YAAMG,WAAW,GAAG;AAClB;AACAC,QAAAA,KAAK,EAAE,IAFW;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AADD;AAVS,OAApB,CArBqB,CAoCrB;;AACAC,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCN,WAApC,EACGO,IADH,CACQjB,OADR,EAEGkB,KAFH,CAESZ,OAFT;AAGD,KAhFkB;;AAAA,SAkFnBD,WAlFmB,GAkFL,MAAM;AAClB;AACA,WAAKc,UAAL,CAAgB,aAAhB,EAA+B,IAA/B,EAAqC;AAACC,QAAAA,KAAK,EAAE,KAAKC,MAAL,CAAYC;AAApB,OAArC;AACD,KArFkB;;AAAA,SAuFnBH,UAvFmB,GAuFN,CAACI,WAAD,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AAC/C,WAAKJ,MAAL,CAAYK,IAAZ,CAAiBH,WAAjB,EAA8B;AAC5BE,QAAAA,QAD4B;AAE5BD,QAAAA;AAF4B,OAA9B;AAID,KA5FkB;;AAAA,SA8FnBG,oBA9FmB,GA8FI,CAACF,QAAD,EAAWG,QAAX,KAAwB;AAE7C,UAAI;AACF,YAAIC,EAAE,GAAG,IAAIC,iBAAJ,CAAsB,KAAKC,KAAL,CAAWC,SAAjC,CAAT,CADE,CAGF;;AACA,cAAMC,eAAe,GAAG,EAAE,GAAG,KAAKF,KAAL,CAAWE,eAAhB;AAAiC,WAACR,QAAD,GAAYI;AAA7C,SAAxB;AACA,aAAKzB,QAAL,CAAc;AACZ6B,UAAAA;AADY,SAAd;;AAIAJ,QAAAA,EAAE,CAACK,cAAH,GAAqB3B,CAAD,IAAO;AACzB,cAAIA,CAAC,CAAC4B,SAAN,EAAiB;AACf,iBAAKhB,UAAL,CAAgB,WAAhB,EAA6BZ,CAAC,CAAC4B,SAA/B,EAA0C;AACxCf,cAAAA,KAAK,EAAE,KAAKC,MAAL,CAAYC,EADqB;AAExCc,cAAAA,MAAM,EAAEX;AAFgC,aAA1C;AAID;AACF,SAPD;;AASAI,QAAAA,EAAE,CAACQ,0BAAH,GAAiC9B,CAAD,IAAO,CACrC;AACA;AAEA;AACA;AACA;AACA;AAED,SATD;;AAWAsB,QAAAA,EAAE,CAACS,OAAH,GAAc/B,CAAD,IAAO;AAClB,gBAAMgC,WAAW,GAAG;AAClBjB,YAAAA,EAAE,EAAEG,QADc;AAElBe,YAAAA,IAAI,EAAEf,QAFY;AAGlBxB,YAAAA,MAAM,EAAEM,CAAC,CAACkC,OAAF,CAAU,CAAV;AAHU,WAApB;AAMA,eAAKrC,QAAL,CAAcsC,SAAS,IAAI;AAEzB;AACA,kBAAMC,YAAY,GAAGD,SAAS,CAACE,aAAV,CAAwBC,MAAxB,GAAiC,CAAjC,GAAqC,EAArC,GAA0C;AAAEF,cAAAA,YAAY,EAAEpC,CAAC,CAACkC,OAAF,CAAU,CAAV;AAAhB,aAA/D,CAHyB,CAKzB;;AACA,gBAAIK,aAAa,GAAGJ,SAAS,CAACE,aAAV,CAAwBG,MAAxB,CAA+B9C,MAAM,IAAIA,MAAM,CAACqB,EAAP,KAAcoB,SAAS,CAACI,aAAV,CAAwBxB,EAA/E,CAApB,CANyB,CAOzB;;AACAwB,YAAAA,aAAa,GAAGA,aAAa,CAACD,MAAd,GAAuB,EAAvB,GAA4B;AAAEC,cAAAA,aAAa,EAAEP;AAAjB,aAA5C;AAEA,mBAAO,EACL;AACA,iBAAGO,aAFE;AAGL;AACA,iBAAGH,YAJE;AAKLC,cAAAA,aAAa,EAAE,CAAC,GAAGF,SAAS,CAACE,aAAd,EAA6BL,WAA7B;AALV,aAAP;AAOD,WAjBD;AAkBD,SAzBD;;AA2BAV,QAAAA,EAAE,CAACmB,KAAH,GAAW,MAAM,CACf;AACD,SAFD;;AAIA,YAAI,KAAKjB,KAAL,CAAW5B,WAAf,EACE0B,EAAE,CAACoB,SAAH,CAAa,KAAKlB,KAAL,CAAW5B,WAAxB,EA7DA,CA+DF;;AACAyB,QAAAA,QAAQ,CAACC,EAAD,CAAR;AAED,OAlED,CAkEE,OAAMtB,CAAN,EAAS;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDF,CAAtD,EADS,CAET;;AACAqB,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KAvKkB;;AAAA,SAyKnBsB,iBAzKmB,GAyKC,MAAM;AAExB,WAAK7B,MAAL,GAAc5B,EAAE,CAAC0D,OAAH,CACZ,KAAKC,SADO,EAEZ;AACEC,QAAAA,IAAI,EAAE,YADR;AAEEC,QAAAA,KAAK,EAAE;AAFT,OAFY,CAAd;AAQA,WAAKjC,MAAL,CAAYkC,EAAZ,CAAe,oBAAf,EAAqCC,IAAI,IAAI;AAE3C,aAAKzD,cAAL;AAEAS,QAAAA,OAAO,CAACC,GAAR,CAAY+C,IAAI,CAACxD,OAAjB;AACA,cAAMyD,MAAM,GAAGD,IAAI,CAACE,SAAL,GAAiB,CAAjB,GAAsB,0BAAyBF,IAAI,CAACE,SAAU,EAA9D,GAAkE,oCAAjF;AAEA,aAAKtD,QAAL,CAAc;AACZqD,UAAAA,MAAM,EAAEA;AADI,SAAd;AAGD,OAVD;AAYA,WAAKpC,MAAL,CAAYkC,EAAZ,CAAe,mBAAf,EAAoCC,IAAI,IAAI;AAC1ChD,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC+C,IAAjC;AAEA,cAAMZ,aAAa,GAAG,KAAKb,KAAL,CAAWa,aAAX,CAAyBG,MAAzB,CAAgC9C,MAAM,IAAIA,MAAM,CAACqB,EAAP,KAAckC,IAAI,CAAC/B,QAA7D,CAAtB;AAEA,aAAKrB,QAAL,CAAcsC,SAAS,IAAI;AACzB;AACA,gBAAMI,aAAa,GAAGJ,SAAS,CAACI,aAAV,CAAwBxB,EAAxB,KAA+BkC,IAAI,CAAC/B,QAApC,IAAgDmB,aAAa,CAACC,MAA9D,GAAuE;AAAEC,YAAAA,aAAa,EAAEF,aAAa,CAAC,CAAD;AAA9B,WAAvE,GAA6G,IAAnI;AAEA,iBAAO;AACL;AACAA,YAAAA,aAFK;AAGL,eAAGE;AAHE,WAAP;AAKC,SATH;AAWD,OAhBD,EAtBwB,CAwCxB;AAEA;AAEA;AACA;AACA;;AAEA,WAAKzB,MAAL,CAAYkC,EAAZ,CAAe,aAAf,EAA8B9B,QAAQ,IAAI;AACxCjB,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCgB,QAAnC,EADwC,CAGxC;AACA;;AACA,aAAKE,oBAAL,CAA0BF,QAA1B,EAAoCI,EAAE,IAAI;AACxC;AACE,cAAIA,EAAJ,EACEA,EAAE,CAAC8B,WAAH,CAAe,KAAK5B,KAAL,CAAW6B,cAA1B,EACG3C,IADH,CACQ4C,GAAG,IAAI;AACXhC,YAAAA,EAAE,CAACiC,mBAAH,CAAuBD,GAAvB;AAEA,iBAAK1C,UAAL,CAAgB,OAAhB,EAAyB0C,GAAzB,EAA8B;AAC5BzC,cAAAA,KAAK,EAAE,KAAKC,MAAL,CAAYC,EADS;AAE5Bc,cAAAA,MAAM,EAAEX;AAFoB,aAA9B;AAIL,WARC;AASH,SAZH;AAaD,OAlBD;AAoBA,WAAKJ,MAAL,CAAYkC,EAAZ,CAAe,OAAf,EAAwBC,IAAI,IAAI;AAC9B,aAAK7B,oBAAL,CAA0B6B,IAAI,CAAC/B,QAA/B,EAAyCI,EAAE,IAAI;AAC7CA,UAAAA,EAAE,CAACoB,SAAH,CAAa,KAAKlB,KAAL,CAAW5B,WAAxB;AAEA0B,UAAAA,EAAE,CAACkC,oBAAH,CAAwB,IAAIC,qBAAJ,CAA0BR,IAAI,CAACK,GAA/B,CAAxB,EAA6D5C,IAA7D,CAAkE,MAAM;AACtE;AACAY,YAAAA,EAAE,CAACoC,YAAH,CAAgB,KAAKlC,KAAL,CAAW6B,cAA3B,EACG3C,IADH,CACQ4C,GAAG,IAAI;AACXhC,cAAAA,EAAE,CAACiC,mBAAH,CAAuBD,GAAvB;AAEA,mBAAK1C,UAAL,CAAgB,QAAhB,EAA0B0C,GAA1B,EAA+B;AAC7BzC,gBAAAA,KAAK,EAAE,KAAKC,MAAL,CAAYC,EADU;AAE7Bc,gBAAAA,MAAM,EAAEoB,IAAI,CAAC/B;AAFgB,eAA/B;AAID,aARH;AASD,WAXD;AAYD,SAfD;AAgBD,OAjBD;AAmBA,WAAKJ,MAAL,CAAYkC,EAAZ,CAAe,QAAf,EAAyBC,IAAI,IAAI;AAC/B;AACA,cAAM3B,EAAE,GAAG,KAAKE,KAAL,CAAWE,eAAX,CAA2BuB,IAAI,CAAC/B,QAAhC,CAAX;AACAjB,QAAAA,OAAO,CAACC,GAAR,CAAY+C,IAAI,CAACK,GAAjB;AACAhC,QAAAA,EAAE,CAACkC,oBAAH,CAAwB,IAAIC,qBAAJ,CAA0BR,IAAI,CAACK,GAA/B,CAAxB,EAA6D5C,IAA7D,CAAkE,MAAI,CAAE,CAAxE;AACD,OALD;AAOA,WAAKI,MAAL,CAAYkC,EAAZ,CAAe,WAAf,EAA6BC,IAAD,IAAU;AACpC;AACA,cAAM3B,EAAE,GAAG,KAAKE,KAAL,CAAWE,eAAX,CAA2BuB,IAAI,CAAC/B,QAAhC,CAAX;AAEA,YAAII,EAAJ,EACEA,EAAE,CAACqC,eAAH,CAAmB,IAAIC,eAAJ,CAAoBX,IAAI,CAACrB,SAAzB,CAAnB;AACH,OAND,EA9FwB,CAsGxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAED,KA/TkB;;AAAA,SAiUnBiC,WAjUmB,GAiUJC,MAAD,IAAY;AACxB7D,MAAAA,OAAO,CAACC,GAAR,CAAY4D,MAAZ;AACA,WAAKjE,QAAL,CAAc;AACZ0C,QAAAA,aAAa,EAAEuB;AADH,OAAd;AAGD,KAtUkB;;AAGjB,SAAKtC,KAAL,GAAa;AACX5B,MAAAA,WAAW,EAAE,IADF;AACW;AACtBwC,MAAAA,YAAY,EAAE,IAFH;AAEY;AAEvBC,MAAAA,aAAa,EAAE,EAJJ;AAIW;AACtBX,MAAAA,eAAe,EAAE,EALN;AAKW;AACtBa,MAAAA,aAAa,EAAE,IANJ;AAQXW,MAAAA,MAAM,EAAE,gBARG;AAUXzB,MAAAA,SAAS,EAAE;AACT,sBAAc,CACZ;AACEsC,UAAAA,IAAI,EAAG;AADT,SADY;AADL,OAVA;AAkBXV,MAAAA,cAAc,EAAE;AACd,qBAAa;AACT,iCAAuB,IADd;AAET,iCAAuB;AAFd;AADC;AAlBL,KAAb,CAHiB,CA6BjB;;AACA,SAAKR,SAAL,GAAiB,sCAAjB,CA9BiB,CAgCjB;AACA;AACA;;AAEA,SAAK/B,MAAL,GAAc,IAAd,CApCiB,CAqCjB;AACD;;AAkSDkD,EAAAA,MAAM,GAAG;AAEP/D,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKsB,KAAL,CAAW5B,WAAvB;AAEA,UAAMqE,UAAU,gBAAG;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,QAAT;AAAmBC,QAAAA,OAAO,EAAE;AAA5B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8C,KAAK3C,KAAL,CAAW0B,MAAzD,CAAnB;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,WAAW,EAAE;AACXkB,QAAAA,MAAM,EAAC,CADI;AAEb;AACEC,QAAAA,KAAK,EAAC,CAHK;AAIXC,QAAAA,KAAK,EAAE,GAJI;AAKXC,QAAAA,MAAM,EAAE,GALG;AAMXC,QAAAA,MAAM,EAAE,CANG;AAOXC,QAAAA,eAAe,EAAE;AAPN,OADf,CAUE;AAVF;AAWE,MAAA,WAAW,EAAE,KAAKjD,KAAL,CAAW5B,WAX1B;AAYE,MAAA,QAAQ,MAZV;AAYW,MAAA,KAAK,MAZhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAeE,oBAAC,KAAD;AACE,MAAA,WAAW,EAAE;AACXwE,QAAAA,MAAM,EAAE,CADG;AAEb;AACEM,QAAAA,MAAM,EAAE,CAHG;AAIXC,QAAAA,QAAQ,EAAE,MAJC;AAKXC,QAAAA,SAAS,EAAE,MALA;AAMXH,QAAAA,eAAe,EAAE;AANN,OADf,CASE;AATF;AAUE,MAAA,WAAW,EAAE,KAAKjD,KAAL,CAAWe,aAAX,IAA4B,KAAKf,KAAL,CAAWe,aAAX,CAAyB7C,MAVpE;AAWE,MAAA,QAAQ,MAXV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,eA4BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BF,eA6BE;AAAK,MAAA,KAAK,EAAE;AACV0E,QAAAA,MAAM,EAAE,CADE;AAEV;AACAI,QAAAA,MAAM,EAAE,EAHE;AAIVC,QAAAA,eAAe,EAAE,WAJP;AAKVN,QAAAA,OAAO,EAAE,EALC;AAMVU,QAAAA,YAAY,EAAE;AANJ,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQIZ,UARJ,CA7BF,eAuCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,WAAW,EAAE,KAAKJ,WADpB;AAEE,MAAA,aAAa,EAAE,KAAKrC,KAAL,CAAWa,aAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAvCF,eA6CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7CF,CADF;AA2DD;;AA1YoC;AA4YzC,eAAehD,SAAf","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport io from 'socket.io-client';\r\nimport Video from './Video'\r\nimport Videos from './Videos'\r\n\r\nexport class MainVideo extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n  \r\n      this.state = {\r\n        localStream: null,    // used to hold local stream object to avoid recreating the stream everytime a new offer comes\r\n        remoteStream: null,    // used to hold remote stream object that is displayed in the main screen\r\n  \r\n        remoteStreams: [],    // holds all Video Streams (all remote streams)\r\n        peerConnections: {},  // holds all Peer Connections\r\n        selectedVideo: null,\r\n  \r\n        status: 'Please wait...',\r\n  \r\n        pc_config: {\r\n          \"iceServers\": [\r\n            {\r\n              urls : 'stun:stun.l.google.com:19302'\r\n            }\r\n          ]\r\n        },\r\n  \r\n        sdpConstraints: {\r\n          'mandatory': {\r\n              'OfferToReceiveAudio': true,\r\n              'OfferToReceiveVideo': true\r\n          }\r\n        },\r\n      }\r\n  \r\n      // DONT FORGET TO CHANGE TO YOUR URL\r\n      this.serviceIP = 'https://cc82bd38.ngrok.io/webrtcPeer'\r\n  \r\n      // https://reactjs.org/docs/refs-and-the-dom.html\r\n      // this.localVideoref = React.createRef()\r\n      // this.remoteVideoref = React.createRef()\r\n  \r\n      this.socket = null\r\n      // this.candidates = []\r\n    }\r\n  \r\n    getLocalStream = () => {\r\n      // called when getUserMedia() successfully returns - see below\r\n      // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\r\n      const success = (stream) => {\r\n        window.localStream = stream\r\n        // this.localVideoref.current.srcObject = stream\r\n        // this.pc.addStream(stream);\r\n        this.setState({\r\n          localStream: stream\r\n        })\r\n  \r\n        this.whoisOnline()\r\n      }\r\n  \r\n      // called when getUserMedia() fails - see below\r\n      const failure = (e) => {\r\n        console.log('getUserMedia Error: ', e)\r\n      }\r\n  \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n      // see the above link for more constraint options\r\n      const constraints = {\r\n        // audio: true,\r\n        video: true,\r\n        // video: {\r\n        //   width: 1280,\r\n        //   height: 720\r\n        // },\r\n        // video: {\r\n        //   width: { min: 1280 },\r\n        // }\r\n        options: {\r\n          mirror: true,\r\n        }\r\n      }\r\n  \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n      navigator.mediaDevices.getUserMedia(constraints)\r\n        .then(success)\r\n        .catch(failure)\r\n    }\r\n  \r\n    whoisOnline = () => {\r\n      // let all peers know I am joining\r\n      this.sendToPeer('onlinePeers', null, {local: this.socket.id})\r\n    }\r\n  \r\n    sendToPeer = (messageType, payload, socketID) => {\r\n      this.socket.emit(messageType, {\r\n        socketID,\r\n        payload\r\n      })\r\n    }\r\n  \r\n    createPeerConnection = (socketID, callback) => {\r\n  \r\n      try {\r\n        let pc = new RTCPeerConnection(this.state.pc_config)\r\n  \r\n        // add pc to peerConnections object\r\n        const peerConnections = { ...this.state.peerConnections, [socketID]: pc }\r\n        this.setState({\r\n          peerConnections\r\n        })\r\n  \r\n        pc.onicecandidate = (e) => {\r\n          if (e.candidate) {\r\n            this.sendToPeer('candidate', e.candidate, {\r\n              local: this.socket.id,\r\n              remote: socketID\r\n            })\r\n          }\r\n        }\r\n  \r\n        pc.oniceconnectionstatechange = (e) => {\r\n          // if (pc.iceConnectionState === 'disconnected') {\r\n          //   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\r\n  \r\n          //   this.setState({\r\n          //     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\r\n          //   })\r\n          // }\r\n  \r\n        }\r\n  \r\n        pc.ontrack = (e) => {\r\n          const remoteVideo = {\r\n            id: socketID,\r\n            name: socketID,\r\n            stream: e.streams[0]\r\n          }\r\n  \r\n          this.setState(prevState => {\r\n  \r\n            // If we already have a stream in display let it stay the same, otherwise use the latest stream\r\n            const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: e.streams[0] }\r\n  \r\n            // get currently selected video\r\n            let selectedVideo = prevState.remoteStreams.filter(stream => stream.id === prevState.selectedVideo.id)\r\n            // if the video is still in the list, then do nothing, otherwise set to new video stream\r\n            selectedVideo = selectedVideo.length ? {} : { selectedVideo: remoteVideo }\r\n  \r\n            return {\r\n              // selectedVideo: remoteVideo,\r\n              ...selectedVideo,\r\n              // remoteStream: e.streams[0],\r\n              ...remoteStream,\r\n              remoteStreams: [...prevState.remoteStreams, remoteVideo]\r\n            }\r\n          })\r\n        }\r\n  \r\n        pc.close = () => {\r\n          // alert('GONE')\r\n        }\r\n  \r\n        if (this.state.localStream)\r\n          pc.addStream(this.state.localStream)\r\n  \r\n        // return pc\r\n        callback(pc)\r\n  \r\n      } catch(e) {\r\n        console.log('Something went wrong! pc not created!!', e)\r\n        // return;\r\n        callback(null)\r\n      }\r\n    }\r\n  \r\n    componentDidMount = () => {\r\n  \r\n      this.socket = io.connect(\r\n        this.serviceIP,\r\n        {\r\n          path: '/io/webrtc',\r\n          query: {}\r\n        }\r\n      )\r\n  \r\n      this.socket.on('connection-success', data => {\r\n  \r\n        this.getLocalStream()\r\n  \r\n        console.log(data.success)\r\n        const status = data.peerCount > 1 ? `Total Connected Peers: ${data.peerCount}` : 'Waiting for other peers to connect'\r\n  \r\n        this.setState({\r\n          status: status\r\n        })\r\n      })\r\n  \r\n      this.socket.on('peer-disconnected', data => {\r\n        console.log('peer-disconnected', data)\r\n  \r\n        const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== data.socketID)\r\n  \r\n        this.setState(prevState => {\r\n          // check if disconnected peer is the selected video and if there still connected peers, then select the first\r\n          const selectedVideo = prevState.selectedVideo.id === data.socketID && remoteStreams.length ? { selectedVideo: remoteStreams[0] } : null\r\n  \r\n          return {\r\n            // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\r\n            remoteStreams,\r\n            ...selectedVideo,\r\n          }\r\n          }\r\n        )\r\n      })\r\n  \r\n      // this.socket.on('offerOrAnswer', (sdp) => {\r\n  \r\n      //   this.textref.value = JSON.stringify(sdp)\r\n  \r\n      //   // set sdp as remote description\r\n      //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\r\n      // })\r\n  \r\n      this.socket.on('online-peer', socketID => {\r\n        console.log('connected peers ...', socketID)\r\n  \r\n        // create and send offer to the peer (data.socketID)\r\n        // 1. Create new pc\r\n        this.createPeerConnection(socketID, pc => {\r\n          // 2. Create Offer\r\n            if (pc)\r\n              pc.createOffer(this.state.sdpConstraints)\r\n                .then(sdp => {\r\n                  pc.setLocalDescription(sdp)\r\n  \r\n                  this.sendToPeer('offer', sdp, {\r\n                    local: this.socket.id,\r\n                    remote: socketID\r\n                  })\r\n            })\r\n          })\r\n      })\r\n  \r\n      this.socket.on('offer', data => {\r\n        this.createPeerConnection(data.socketID, pc => {\r\n          pc.addStream(this.state.localStream)\r\n  \r\n          pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\r\n            // 2. Create Answer\r\n            pc.createAnswer(this.state.sdpConstraints)\r\n              .then(sdp => {\r\n                pc.setLocalDescription(sdp)\r\n  \r\n                this.sendToPeer('answer', sdp, {\r\n                  local: this.socket.id,\r\n                  remote: data.socketID\r\n                })\r\n              })\r\n          })\r\n        })\r\n      })\r\n  \r\n      this.socket.on('answer', data => {\r\n        // get remote's peerConnection\r\n        const pc = this.state.peerConnections[data.socketID]\r\n        console.log(data.sdp)\r\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(()=>{})\r\n      })\r\n  \r\n      this.socket.on('candidate', (data) => {\r\n        // get remote's peerConnection\r\n        const pc = this.state.peerConnections[data.socketID]\r\n  \r\n        if (pc)\r\n          pc.addIceCandidate(new RTCIceCandidate(data.candidate))\r\n      })\r\n  \r\n      // const pc_config = null\r\n  \r\n      // const pc_config = {\r\n      //   \"iceServers\": [\r\n      //     // {\r\n      //     //   urls: 'stun:[STUN_IP]:[PORT]',\r\n      //     //   'credentials': '[YOR CREDENTIALS]',\r\n      //     //   'username': '[USERNAME]'\r\n      //     // },\r\n      //     {\r\n      //       urls : 'stun:stun.l.google.com:19302'\r\n      //     }\r\n      //   ]\r\n      // }\r\n  \r\n      // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\r\n      // create an instance of RTCPeerConnection\r\n      // this.pc = new RTCPeerConnection(this.state.pc_config)\r\n  \r\n      // triggered when a new candidate is returned\r\n      // this.pc.onicecandidate = (e) => {\r\n      //   // send the candidates to the remote peer\r\n      //   // see addCandidate below to be triggered on the remote peer\r\n      //   if (e.candidate) {\r\n      //     // console.log(JSON.stringify(e.candidate))\r\n      //     this.sendToPeer('candidate', e.candidate)\r\n      //   }\r\n      // }\r\n  \r\n      // triggered when there is a change in connection state\r\n      // this.pc.oniceconnectionstatechange = (e) => {\r\n      //   console.log(e)\r\n      // }\r\n  \r\n      // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\r\n      // this.pc.onaddstream = (e) => {\r\n      //   this.remoteVideoref.current.srcObject = e.stream\r\n      // }\r\n  \r\n      // this.pc.ontrack = (e) => {\r\n      //   debugger\r\n      //   // this.remoteVideoref.current.srcObject = e.streams[0]\r\n  \r\n      //   this.setState({\r\n      //     remoteStream: e.streams[0]\r\n      //   })\r\n      // }\r\n  \r\n    }\r\n  \r\n    switchVideo = (_video) => {\r\n      console.log(_video)\r\n      this.setState({\r\n        selectedVideo: _video\r\n      })\r\n    }\r\n  \r\n    render() {\r\n  \r\n      console.log(this.state.localStream)\r\n  \r\n      const statusText = <div style={{ color: 'yellow', padding: 5 }}>{this.state.status}</div>\r\n  \r\n      return (\r\n        <div>\r\n          <Video\r\n            videoStyles={{\r\n              zIndex:2,\r\n            //   position: 'absolute',\r\n              right:0,\r\n              width: 200,\r\n              height: 200,\r\n              margin: 5,\r\n              backgroundColor: 'black'\r\n            }}\r\n            // ref={this.localVideoref}\r\n            videoStream={this.state.localStream}\r\n            autoPlay muted>\r\n          </Video>\r\n          <Video\r\n            videoStyles={{\r\n              zIndex: 1,\r\n            //   position: 'fixed',\r\n              bottom: 0,\r\n              minWidth: '100%',\r\n              minHeight: '100%',\r\n              backgroundColor: 'black'\r\n            }}\r\n            // ref={ this.remoteVideoref }\r\n            videoStream={this.state.selectedVideo && this.state.selectedVideo.stream}\r\n            autoPlay>\r\n          </Video>\r\n          <br />\r\n          <div style={{\r\n            zIndex: 3,\r\n            // position: 'absolute',\r\n            margin: 10,\r\n            backgroundColor: '#cdc4ff4f',\r\n            padding: 10,\r\n            borderRadius: 5,\r\n          }}>\r\n            { statusText }\r\n          </div>\r\n          <div>\r\n            <Videos\r\n              switchVideo={this.switchVideo}\r\n              remoteStreams={this.state.remoteStreams}\r\n            ></Videos>\r\n          </div>\r\n          <br />\r\n  \r\n          {/* <div style={{zIndex: 1, position: 'fixed'}} >\r\n            <button onClick={this.createOffer}>Offer</button>\r\n            <button onClick={this.createAnswer}>Answer</button>\r\n            <br />\r\n            <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\r\n          </div> */}\r\n          {/* <br />\r\n          <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\r\n          <button onClick={this.addCandidate}>Add Candidate</button> */}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\nexport default MainVideo\r\n"]},"metadata":{},"sourceType":"module"}