{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\WeatherApp\\\\weatherapp\\\\src\\\\components\\\\SnackbarMessage.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { Snackbar } from \"@material-ui/core\";\nimport { Context2 } from \"../Context2\";\n\nconst SnackbarMessage = () => {\n  const [isOpen, setOpen] = useState(false);\n  const [{\n    snackbarMsg\n  }, dispatch] = useContext(Context2);\n  const setSnackbarMsg = React.useCallback(data => {\n    dispatch({\n      type: \"setSnackbarMsg\",\n      snippet: data\n    });\n  }, [dispatch]);\n  useEffect(() => {\n    if (snackbarMsg) {\n      setOpen(true);\n    }\n  }, [snackbarMsg, setSnackbarMsg]);\n\n  function handleClose() {\n    console.log(\"closed\");\n    setOpen(false);\n    setSnackbarMsg(null); // we will set back it to null otherwise it wont fire for the same\n  }\n\n  return /*#__PURE__*/React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"center\"\n    },\n    autoHideDuration: 3000,\n    open: isOpen,\n    ContentProps: {\n      \"aria-describedby\": \"message-id\"\n    },\n    onClose: handleClose,\n    message: /*#__PURE__*/React.createElement(\"span\", {\n      id: \"message-id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 16\n      }\n    }, snackbarMsg),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default SnackbarMessage;","map":{"version":3,"sources":["C:/myProJects/WeatherApp/weatherapp/src/components/SnackbarMessage.js"],"names":["React","useContext","useState","useEffect","Snackbar","Context2","SnackbarMessage","isOpen","setOpen","snackbarMsg","dispatch","setSnackbarMsg","useCallback","data","type","snippet","handleClose","console","log","vertical","horizontal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AAGA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAM,CAACC,MAAD,EAASC,OAAT,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAAC;AAAEO,IAAAA;AAAF,GAAD,EAAkBC,QAAlB,IAA8BT,UAAU,CAACI,QAAD,CAA9C;AAEA,QAAMM,cAAc,GAAGX,KAAK,CAACY,WAAN,CACrBC,IAAI,IAAI;AACNH,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAE,gBAAR;AAA0BC,MAAAA,OAAO,EAAEF;AAAnC,KAAD,CAAR;AACD,GAHoB,EAIrB,CAACH,QAAD,CAJqB,CAAvB;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,WAAJ,EAAiB;AACfD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GAJQ,EAIN,CAACC,WAAD,EAAcE,cAAd,CAJM,CAAT;;AAMA,WAASK,WAAT,GAAuB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAV,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAG,IAAAA,cAAc,CAAC,IAAD,CAAd,CAHqB,CAIrB;AACD;;AACD,sBACE,oBAAC,QAAD;AACE,IAAA,YAAY,EAAE;AACZQ,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,UAAU,EAAE;AAFA,KADhB;AAKE,IAAA,gBAAgB,EAAE,IALpB;AAME,IAAA,IAAI,EAAEb,MANR;AAOE,IAAA,YAAY,EAAE;AACZ,0BAAoB;AADR,KAPhB;AAUE,IAAA,OAAO,EAAES,WAVX;AAWE,IAAA,OAAO,eAAE;AAAM,MAAA,EAAE,EAAC,YAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuBP,WAAvB,CAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAeD,CArCD;;AAuCA,eAAeH,eAAf","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nimport { Snackbar } from \"@material-ui/core\";\r\n\r\n\r\nimport { Context2 } from \"../Context2\";\r\n\r\nconst SnackbarMessage = () => {\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [{ snackbarMsg }, dispatch] = useContext(Context2);\r\n\r\n  const setSnackbarMsg = React.useCallback(\r\n    data => {\r\n      dispatch({ type: \"setSnackbarMsg\", snippet: data });\r\n    },\r\n    [dispatch]\r\n  );\r\n  useEffect(() => {\r\n    if (snackbarMsg) {\r\n      setOpen(true);\r\n    }\r\n  }, [snackbarMsg, setSnackbarMsg]);\r\n\r\n  function handleClose() {\r\n    console.log(\"closed\");\r\n    setOpen(false);\r\n    setSnackbarMsg(null);\r\n    // we will set back it to null otherwise it wont fire for the same\r\n  }\r\n  return (\r\n    <Snackbar\r\n      anchorOrigin={{\r\n        vertical: \"bottom\",\r\n        horizontal: \"center\"\r\n      }}\r\n      autoHideDuration={3000}\r\n      open={isOpen}\r\n      ContentProps={{\r\n        \"aria-describedby\": \"message-id\"\r\n      }}\r\n      onClose={handleClose}\r\n      message={<span id=\"message-id\">{snackbarMsg}</span>}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SnackbarMessage;\r\n"]},"metadata":{},"sourceType":"module"}