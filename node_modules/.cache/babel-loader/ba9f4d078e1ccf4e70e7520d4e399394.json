{"ast":null,"code":"var _jsxFileName = \"C:\\\\myProJects\\\\Server\\\\weatherapp\\\\src\\\\components\\\\Animation\\\\Rain.js\";\nimport React, { Component } from 'react';\nimport './Animation.css';\nimport * as THREE from 'three';\nimport snowImg from '../../images/smoke.png';\n\nclass Rain extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  } //   componentDidUpdate() {\n  //     this.rain();\n  //   }\n\n\n  componentDidMount() {\n    let scene,\n        camera,\n        renderer,\n        cloudParticles = [],\n        flash,\n        rain,\n        rainGeo,\n        rainCount = 6800;\n    const snowfalldiv = document.getElementById('snowfall');\n\n    function init() {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 1;\n      camera.rotation.x = 1.16;\n      camera.rotation.y = -0.12;\n      camera.rotation.z = 1.57;\n      const ambient = new THREE.AmbientLight(0x555555);\n      scene.add(ambient);\n      const directionalLight = new THREE.DirectionalLight(0xffeedd);\n      directionalLight.position.set(0, 0, 1);\n      scene.add(directionalLight);\n      flash = new THREE.PointLight(0x062d89, 30, 500, 1.7);\n      flash.position.set(200, 300, 100);\n      scene.add(flash);\n      renderer = new THREE.WebGLRenderer();\n      scene.fog = new THREE.FogExp2(0x11111f, 0.002);\n      renderer.setClearColor(scene.fog.color);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      snowfalldiv.appendChild(renderer.domElement);\n      rainGeo = new THREE.Geometry();\n\n      for (let i = 0; i < rainCount; i++) {\n        const rainDrop = new THREE.Vector3(Math.random() * 400 - 200, Math.random() * 500 - 250, Math.random() * 400 - 200);\n        rainDrop.velocity = {};\n        rainDrop.velocity = 0;\n        rainGeo.vertices.push(rainDrop);\n      }\n\n      const rainMaterial = new THREE.PointsMaterial({\n        color: 'rgb(154, 190, 214)',\n        size: 0.2,\n        transparent: true\n      });\n      rain = new THREE.Points(rainGeo, rainMaterial);\n      scene.add(rain);\n      let loader = new THREE.TextureLoader();\n      loader.load(\"https://i.dlpng.com/static/png/6676007_preview.png\", function (texture) {\n        const cloudGeo = new THREE.PlaneBufferGeometry(500, 500);\n        const cloudMaterial = new THREE.MeshLambertMaterial({\n          map: texture,\n          transparent: true\n        });\n\n        for (let p = 0; p < 25; p++) {\n          let cloud = new THREE.Mesh(cloudGeo, cloudMaterial);\n          cloud.position.set(Math.random() * 800 - 400, 500, Math.random() * 500 - 450);\n          cloud.rotation.x = 1.16;\n          cloud.rotation.y = -0.12;\n          cloud.rotation.z = Math.random() * 360;\n          cloud.material.opacity = 0.6;\n          cloudParticles.push(cloud);\n          scene.add(cloud);\n        }\n\n        animate();\n      });\n    }\n\n    function animate() {\n      cloudParticles.forEach(p => {\n        p.rotation.z -= 0.002;\n      });\n      rainGeo.vertices.forEach(p => {\n        p.velocity -= 0.1 + Math.random() * 0.1;\n        p.y += p.velocity;\n\n        if (p.y < -200) {\n          p.y = 200;\n          p.velocity = 0;\n        }\n      });\n      rainGeo.verticesNeedUpdate = true;\n      rain.rotation.y += 0.002;\n\n      if (Math.random() > 0.93 || flash.power > 100) {\n        if (flash.power < 100) flash.position.set(Math.random() * 400, 300 + Math.random() * 200, 100);\n        flash.power = 50 + Math.random() * 500;\n      }\n\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n\n    init();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"snowfall\",\n      id: \"snowfall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 12\n      }\n    }); // return <canvas width=\"1250px\" height=\"800px\" ref={this.canvas}>\n    // </canvas>;\n  }\n\n}\n\nexport default Rain;","map":{"version":3,"sources":["C:/myProJects/Server/weatherapp/src/components/Animation/Rain.js"],"names":["React","Component","THREE","snowImg","Rain","constructor","props","canvas","createRef","componentDidMount","scene","camera","renderer","cloudParticles","flash","rain","rainGeo","rainCount","snowfalldiv","document","getElementById","init","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","z","rotation","x","y","ambient","AmbientLight","add","directionalLight","DirectionalLight","set","PointLight","WebGLRenderer","fog","FogExp2","setClearColor","color","setSize","appendChild","domElement","Geometry","i","rainDrop","Vector3","Math","random","velocity","vertices","push","rainMaterial","PointsMaterial","size","transparent","Points","loader","TextureLoader","load","texture","cloudGeo","PlaneBufferGeometry","cloudMaterial","MeshLambertMaterial","map","p","cloud","Mesh","material","opacity","animate","forEach","verticesNeedUpdate","power","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './Animation.css'\r\nimport * as THREE from 'three'\r\nimport snowImg from '../../images/smoke.png';\r\n\r\nclass Rain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvas = React.createRef();\r\n    \r\n  }\r\n//   componentDidUpdate() {\r\n//     this.rain();\r\n//   }\r\n\r\n\r\ncomponentDidMount() {\r\n    let scene,camera, renderer, cloudParticles = [], flash, rain, rainGeo, rainCount = 6800;\r\n    const snowfalldiv = document.getElementById('snowfall');\r\n    function init() {\r\n      scene = new THREE.Scene();\r\n      camera = new THREE.PerspectiveCamera(60,window.innerWidth / window.innerHeight, 1, 1000);\r\n      camera.position.z = 1;\r\n      camera.rotation.x = 1.16;\r\n      camera.rotation.y = -0.12;\r\n      camera.rotation.z = 1.57;\r\n      const ambient = new THREE.AmbientLight(0x555555);\r\n      scene.add(ambient);\r\n      const directionalLight = new THREE.DirectionalLight(0xffeedd);\r\n      directionalLight.position.set(0,0,1);\r\n      scene.add(directionalLight);\r\n      flash = new THREE.PointLight(0x062d89, 30, 500 ,1.7);\r\n      flash.position.set(200,300,100);\r\n      scene.add(flash);\r\n      renderer = new THREE.WebGLRenderer();\r\n      scene.fog = new THREE.FogExp2(0x11111f, 0.002);\r\n      renderer.setClearColor(scene.fog.color);\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n   \r\n\r\n      snowfalldiv.appendChild(renderer.domElement)\r\n      rainGeo = new THREE.Geometry();\r\n      for(let i=0;i<rainCount;i++) {\r\n        const rainDrop = new THREE.Vector3(\r\n          Math.random() * 400 -200,\r\n          Math.random() * 500 - 250,\r\n          Math.random() * 400 - 200\r\n        );\r\n        rainDrop.velocity = {};\r\n        rainDrop.velocity = 0;\r\n        rainGeo.vertices.push(rainDrop);\r\n      }\r\n      const rainMaterial = new THREE.PointsMaterial({\r\n        color: 'rgb(154, 190, 214)',\r\n        size: 0.2,\r\n        transparent: true\r\n      });\r\n      rain = new THREE.Points(rainGeo,rainMaterial);\r\n      scene.add(rain);\r\n      let loader = new THREE.TextureLoader();\r\n      loader.load(\"https://i.dlpng.com/static/png/6676007_preview.png\", function(texture){\r\n        const cloudGeo = new THREE.PlaneBufferGeometry(500,500);\r\n        const cloudMaterial = new THREE.MeshLambertMaterial({\r\n          map: texture,\r\n          transparent: true\r\n        });\r\n        for(let p=0; p<25; p++) {\r\n          let cloud = new THREE.Mesh(cloudGeo,cloudMaterial);\r\n          cloud.position.set(\r\n            Math.random()*800 -400,\r\n            500,\r\n            Math.random()*500 - 450\r\n          );\r\n          cloud.rotation.x = 1.16;\r\n          cloud.rotation.y = -0.12;\r\n          cloud.rotation.z = Math.random()*360;\r\n          cloud.material.opacity = 0.6;\r\n          cloudParticles.push(cloud);\r\n          scene.add(cloud);\r\n        }\r\n        animate();\r\n      });\r\n    }\r\n    function animate() {\r\n      cloudParticles.forEach(p => {\r\n        p.rotation.z -=0.002;\r\n      });\r\n      rainGeo.vertices.forEach(p => {\r\n        p.velocity -= 0.1 + Math.random() * 0.1;\r\n        p.y += p.velocity;\r\n        if (p.y < -200) {\r\n          p.y = 200;\r\n          p.velocity = 0;\r\n        }\r\n      });\r\n      rainGeo.verticesNeedUpdate = true;\r\n      rain.rotation.y +=0.002;\r\n      if(Math.random() > 0.93 || flash.power > 100) {\r\n        if(flash.power < 100) \r\n          flash.position.set(\r\n            Math.random()*400,\r\n            300 + Math.random() *200,\r\n            100\r\n          );\r\n        flash.power = 50 + Math.random() * 500;\r\n      }\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    }\r\n    init();\r\n    \r\n}\r\n\r\n  render() {\r\n\r\n    return <div class=\"snowfall\" id=\"snowfall\"></div>\r\n    \r\n    // return <canvas width=\"1250px\" height=\"800px\" ref={this.canvas}>\r\n    // </canvas>;\r\n\r\n  }\r\n}\r\n\r\nexport default Rain;"]},"metadata":{},"sourceType":"module"}